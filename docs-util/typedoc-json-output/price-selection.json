{
	"id": 22054,
	"name": "price-selection",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 22055,
			"name": "IPriceSelectionStrategy",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\nThe price selection strategy retrieves the best price for a product variant for a specific context such as selected region, taxes applied,\nthe quantity in cart, and more.\n\nMedusa provides a default price selection strategy, but you can override it. A price selecion strategy is a TypeScript or JavaScript file in the "
					},
					{
						"kind": "code",
						"text": "`src/strategies`"
					},
					{
						"kind": "text",
						"text": " directory of your Medusa backend project. It exports a class that extends the "
					},
					{
						"kind": "code",
						"text": "`AbstractPriceSelectionStrategy`"
					},
					{
						"kind": "text",
						"text": " class.\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/strategies/price.ts\"\nimport {\n  AbstractPriceSelectionStrategy,\n  PriceSelectionContext,\n  PriceSelectionResult,\n} from \"@medusajs/medusa\"\n\nexport default class MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  async calculateVariantPrice(\n    data: {\n      variantId: string;\n      quantity?: number\n    }[],\n    context: PriceSelectionContext\n  ): Promise<Map<string, PriceSelectionResult>> {\n    throw new Error(\"Method not implemented.\")\n  }\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 22056,
					"name": "calculateVariantPrice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 22057,
							"name": "calculateVariantPrice",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves one or more product variants' prices. It's used when retrieving product variants or their associated line items.\nIt's also used when retrieving other entities that product variants and line items belong to, such as products and carts respectively."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A map, each key is an ID of a variant, and its value is an object holding the price selection result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, here's a snippet of how the price selection strategy is implemented in the Medusa backend:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AbstractPriceSelectionStrategy,\n  CustomerService,\n  PriceSelectionContext,\n  PriceSelectionResult,\n} from \"@medusajs/medusa\"\n\ntype InjectedDependencies = {\n  customerService: CustomerService\n}\n\nexport default class MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  async calculateVariantPrice(\n    data: {\n      variantId: string\n      quantity?: number\n    }[],\n    context: PriceSelectionContext\n  ): Promise<Map<string, PriceSelectionResult>> {\n    const dataMap = new Map(data.map((d) => [d.variantId, d]))\n\n    const cacheKeysMap = new Map(\n      data.map(({ variantId, quantity }) => [\n        variantId,\n        this.getCacheKey(variantId, { ...context, quantity }),\n      ])\n    )\n\n    const nonCachedData: {\n      variantId: string\n      quantity?: number\n    }[] = []\n\n    const variantPricesMap = new Map<string, PriceSelectionResult>()\n\n    if (!context.ignore_cache) {\n      const cacheHits = await promiseAll(\n        [...cacheKeysMap].map(async ([, cacheKey]) => {\n          return await this.cacheService_.get<PriceSelectionResult>(cacheKey)\n        })\n      )\n\n      if (!cacheHits.length) {\n        nonCachedData.push(...dataMap.values())\n      }\n\n      for (const [index, cacheHit] of cacheHits.entries()) {\n        const variantId = data[index].variantId\n        if (cacheHit) {\n          variantPricesMap.set(variantId, cacheHit)\n          continue\n        }\n\n        nonCachedData.push(dataMap.get(variantId)!)\n      }\n    } else {\n      nonCachedData.push(...dataMap.values())\n    }\n\n    let results: Map<string, PriceSelectionResult> = new Map()\n\n    if (\n      this.featureFlagRouter_.isFeatureEnabled(\n        TaxInclusivePricingFeatureFlag.key\n      )\n    ) {\n      results = await this.calculateVariantPrice_new(nonCachedData, context)\n    } else {\n      results = await this.calculateVariantPrice_old(nonCachedData, context)\n    }\n\n    await promiseAll(\n      [...results].map(async ([variantId, prices]) => {\n        variantPricesMap.set(variantId, prices)\n        if (!context.ignore_cache) {\n          await this.cacheService_.set(cacheKeysMap.get(variantId)!, prices)\n        }\n      })\n    )\n\n    return variantPricesMap\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 22058,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary data to perform the price selection for each variant ID."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 22059,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 22060,
														"name": "variantId",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "The ID of the variant to retrieve its prices."
																}
															]
														},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 22061,
														"name": "quantity",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "The variant's quantity in the cart, if available."
																}
															]
														},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															22060,
															22061
														]
													}
												]
											}
										}
									}
								},
								{
									"id": 22062,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context of the price selection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 22122,
										"name": "PriceSelectionContext",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 22137,
												"name": "PriceSelectionResult",
												"package": "@medusajs/medusa"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 22063,
					"name": "onVariantsPricesUpdate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 22064,
							"name": "onVariantsPricesUpdate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when prices of product variants have changed.\nYou can use it to invalidate prices stored in the cache."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves after any necessary actions are performed."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, this is how this method is implemented in the Medusa backend's default\nprice selection strategy:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AbstractPriceSelectionStrategy,\n  CustomerService,\n} from \"@medusajs/medusa\"\nimport { promiseAll } from \"@medusajs/utils\"\n\ntype InjectedDependencies = {\n  customerService: CustomerService\n}\n\nexport default class MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  public async onVariantsPricesUpdate(variantIds: string[]): Promise<void> {\n    await promiseAll(\n      variantIds.map(\n        async (id: string) => await this.cacheService_.invalidate(`ps:${id}:*`)\n      )\n    )\n  }\n\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::note\n\nLearn more about the cache service in [this documentation](https://docs.medusajs.com/development/cache/overview).\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 22065,
									"name": "variantIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the updated variants."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 22066,
					"name": "withTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 22067,
							"name": "withTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 22068,
									"name": "transactionManager",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
											"qualifiedName": "EntityManager"
										},
										"name": "EntityManager",
										"package": "typeorm"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ITransactionBaseService.withTransaction"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ITransactionBaseService.withTransaction"
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						22056,
						22063,
						22066
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/types/src/transaction-base/transaction-base.ts",
						"qualifiedName": "ITransactionBaseService"
					},
					"name": "ITransactionBaseService",
					"package": "@medusajs/types"
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 22069,
					"name": "AbstractPriceSelectionStrategy"
				}
			]
		},
		{
			"id": 22069,
			"name": "AbstractPriceSelectionStrategy",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 22074,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 22075,
							"name": "new AbstractPriceSelectionStrategy",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your price-selection strategy to access the different services in Medusa through dependency injection."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport {\n  AbstractPriceSelectionStrategy,\n  CustomerService,\n} from \"@medusajs/medusa\"\ntype InjectedDependencies = {\n  customerService: CustomerService\n}\n\nclass MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  protected customerService_: CustomerService\n\n  constructor(container: InjectedDependencies) {\n    super(container)\n    this.customerService_ = container.customerService\n  }\n\n  // ...\n}\n\nexport default  MyStrategy\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 22076,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources, such as services, in your Medusa backend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 22077,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this price-selection strategy is created in a plugin, the plugin's options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 22069,
								"name": "AbstractPriceSelectionStrategy",
								"package": "@medusajs/medusa"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.constructor"
					}
				},
				{
					"id": 22078,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources, such as services, in your Medusa backend."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 22079,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this price-selection strategy is created in a plugin, the plugin's options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 22080,
					"name": "calculateVariantPrice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 22081,
							"name": "calculateVariantPrice",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves one or more product variants' prices. It's used when retrieving product variants or their associated line items.\nIt's also used when retrieving other entities that product variants and line items belong to, such as products and carts respectively."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A map, each key is an ID of a variant, and its value is an object holding the price selection result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, here's a snippet of how the price selection strategy is implemented in the Medusa backend:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AbstractPriceSelectionStrategy,\n  CustomerService,\n  PriceSelectionContext,\n  PriceSelectionResult,\n} from \"@medusajs/medusa\"\n\ntype InjectedDependencies = {\n  customerService: CustomerService\n}\n\nexport default class MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  async calculateVariantPrice(\n    data: {\n      variantId: string\n      quantity?: number\n    }[],\n    context: PriceSelectionContext\n  ): Promise<Map<string, PriceSelectionResult>> {\n    const dataMap = new Map(data.map((d) => [d.variantId, d]))\n\n    const cacheKeysMap = new Map(\n      data.map(({ variantId, quantity }) => [\n        variantId,\n        this.getCacheKey(variantId, { ...context, quantity }),\n      ])\n    )\n\n    const nonCachedData: {\n      variantId: string\n      quantity?: number\n    }[] = []\n\n    const variantPricesMap = new Map<string, PriceSelectionResult>()\n\n    if (!context.ignore_cache) {\n      const cacheHits = await promiseAll(\n        [...cacheKeysMap].map(async ([, cacheKey]) => {\n          return await this.cacheService_.get<PriceSelectionResult>(cacheKey)\n        })\n      )\n\n      if (!cacheHits.length) {\n        nonCachedData.push(...dataMap.values())\n      }\n\n      for (const [index, cacheHit] of cacheHits.entries()) {\n        const variantId = data[index].variantId\n        if (cacheHit) {\n          variantPricesMap.set(variantId, cacheHit)\n          continue\n        }\n\n        nonCachedData.push(dataMap.get(variantId)!)\n      }\n    } else {\n      nonCachedData.push(...dataMap.values())\n    }\n\n    let results: Map<string, PriceSelectionResult> = new Map()\n\n    if (\n      this.featureFlagRouter_.isFeatureEnabled(\n        TaxInclusivePricingFeatureFlag.key\n      )\n    ) {\n      results = await this.calculateVariantPrice_new(nonCachedData, context)\n    } else {\n      results = await this.calculateVariantPrice_old(nonCachedData, context)\n    }\n\n    await promiseAll(\n      [...results].map(async ([variantId, prices]) => {\n        variantPricesMap.set(variantId, prices)\n        if (!context.ignore_cache) {\n          await this.cacheService_.set(cacheKeysMap.get(variantId)!, prices)\n        }\n      })\n    )\n\n    return variantPricesMap\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 22082,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary data to perform the price selection for each variant ID."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 22083,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 22084,
														"name": "variantId",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 22086,
														"name": "quantity",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															22084,
															22086
														]
													}
												]
											}
										}
									}
								},
								{
									"id": 22087,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context of the price selection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 22122,
										"name": "PriceSelectionContext",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 22137,
												"name": "PriceSelectionResult",
												"package": "@medusajs/medusa"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 22057,
								"name": "IPriceSelectionStrategy.calculateVariantPrice"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 22056,
						"name": "IPriceSelectionStrategy.calculateVariantPrice"
					}
				},
				{
					"id": 22088,
					"name": "onVariantsPricesUpdate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 22089,
							"name": "onVariantsPricesUpdate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when prices of product variants have changed.\nYou can use it to invalidate prices stored in the cache."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves after any necessary actions are performed."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, this is how this method is implemented in the Medusa backend's default\nprice selection strategy:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AbstractPriceSelectionStrategy,\n  CustomerService,\n} from \"@medusajs/medusa\"\nimport { promiseAll } from \"@medusajs/utils\"\n\ntype InjectedDependencies = {\n  customerService: CustomerService\n}\n\nexport default class MyStrategy extends\n  AbstractPriceSelectionStrategy {\n\n  public async onVariantsPricesUpdate(variantIds: string[]): Promise<void> {\n    await promiseAll(\n      variantIds.map(\n        async (id: string) => await this.cacheService_.invalidate(`ps:${id}:*`)\n      )\n    )\n  }\n\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::note\n\nLearn more about the cache service in [this documentation](https://docs.medusajs.com/development/cache/overview).\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 22090,
									"name": "variantIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the updated variants."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 22064,
								"name": "IPriceSelectionStrategy.onVariantsPricesUpdate"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 22063,
						"name": "IPriceSelectionStrategy.onVariantsPricesUpdate"
					}
				},
				{
					"id": 22091,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					}
				},
				{
					"id": 22092,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					}
				},
				{
					"id": 22095,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					}
				},
				{
					"id": 22096,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					}
				},
				{
					"id": 22097,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						22074
					]
				},
				{
					"title": "Properties",
					"children": [
						22078,
						22079,
						22091,
						22092,
						22095,
						22096,
						22097
					]
				},
				{
					"title": "Methods",
					"children": [
						22080,
						22088
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 22055,
					"name": "IPriceSelectionStrategy",
					"package": "@medusajs/medusa"
				}
			]
		},
		{
			"id": 22122,
			"name": "PriceSelectionContext",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The context of the price selection."
					}
				]
			},
			"children": [
				{
					"id": 22123,
					"name": "cart_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cart's ID. This is used when the prices are being retrieved for the variant of a line item,\nas it is used to determine the current region and currency code of the context."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 22124,
					"name": "customer_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the customer viewing the variant."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 22125,
					"name": "region_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The region's ID."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 22126,
					"name": "quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The quantity of the item in the cart. This is used to filter out price lists that have\n"
							},
							{
								"kind": "code",
								"text": "`min_quantity`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`max_quantity`"
							},
							{
								"kind": "text",
								"text": " conditions set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 22127,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code the customer is using."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 22128,
					"name": "include_discount_prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the price list's prices should be retrieved or not."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 22129,
					"name": "tax_rates",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tax rates to be applied. This is only used for\n[Tax-Inclusive Pricing](https://docs.medusajs.com/modules/taxes/inclusive-pricing)."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../packages/medusa/src/types/tax-service.ts",
								"qualifiedName": "TaxServiceRate"
							},
							"name": "TaxServiceRate",
							"package": "@medusajs/medusa"
						}
					}
				},
				{
					"id": 22130,
					"name": "ignore_cache",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether to calculate the prices even if the value of an earlier price calculation\nis available in the cache."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						22123,
						22124,
						22125,
						22126,
						22127,
						22128,
						22129,
						22130
					]
				}
			]
		},
		{
			"id": 22131,
			"name": "PriceType",
			"variant": "declaration",
			"kind": 32,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 22132,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 22135,
							"name": "DEFAULT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
									"qualifiedName": "DefaultPriceType.DEFAULT"
								},
								"name": "DEFAULT",
								"package": "@medusajs/medusa",
								"qualifiedName": "DefaultPriceType.DEFAULT"
							},
							"defaultValue": "\"default\""
						},
						{
							"id": 22133,
							"name": "SALE",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/types/price-list.ts",
									"qualifiedName": "PriceListType.SALE"
								},
								"name": "SALE",
								"package": "@medusajs/medusa",
								"qualifiedName": "PriceListType.SALE"
							},
							"defaultValue": "\"sale\""
						},
						{
							"id": 22134,
							"name": "OVERRIDE",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa/src/types/price-list.ts",
									"qualifiedName": "PriceListType.OVERRIDE"
								},
								"name": "OVERRIDE",
								"package": "@medusajs/medusa",
								"qualifiedName": "PriceListType.OVERRIDE"
							},
							"defaultValue": "\"override\""
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								22135,
								22133,
								22134
							]
						}
					]
				}
			}
		},
		{
			"id": 22136,
			"name": "PriceType",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
							"qualifiedName": "DefaultPriceType"
						},
						"name": "DefaultPriceType",
						"package": "@medusajs/medusa"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../../packages/medusa/src/types/price-list.ts",
							"qualifiedName": "PriceListType"
						},
						"name": "PriceListType",
						"package": "@medusajs/medusa"
					}
				]
			}
		},
		{
			"id": 22137,
			"name": "PriceSelectionResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price selection result of a variant."
					}
				]
			},
			"children": [
				{
					"id": 22138,
					"name": "originalPrice",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The original price of the variant which depends on the selected region or currency code in the context object.\nIf both region ID and currency code are available in the context object, the region has higher precedence."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 22139,
					"name": "originalPriceIncludesTax",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the original price includes taxes or not. This is only available\nfor [Tax-Inclusive Pricing](https://docs.medusajs.com/modules/taxes/inclusive-pricing)."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 22140,
					"name": "calculatedPrice",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The lowest price among the prices of the product variant retrieved using the context object."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 22141,
					"name": "calculatedPriceIncludesTax",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the calculated price includes taxes or not.\nThis is only available for [Tax-Inclusive Pricing](https://docs.medusajs.com/modules/taxes/inclusive-pricing)."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 22142,
					"name": "calculatedPriceType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The type of price applied in "
							},
							{
								"kind": "code",
								"text": "`calculatedPrice`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 22136,
						"name": "PriceType",
						"package": "@medusajs/medusa"
					}
				},
				{
					"id": 22143,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "All possible prices of the variant that are retrieved using the "
							},
							{
								"kind": "code",
								"text": "`context`"
							},
							{
								"kind": "text",
								"text": " object.\nIt can include its original price and its price lists if there are any."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../packages/medusa/src/models/money-amount.ts",
								"qualifiedName": "MoneyAmount"
							},
							"name": "MoneyAmount",
							"package": "@medusajs/medusa"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						22138,
						22139,
						22140,
						22141,
						22142,
						22143
					]
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				22069
			]
		},
		{
			"title": "Interfaces",
			"children": [
				22055,
				22122,
				22137
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				22136
			]
		},
		{
			"title": "Variables",
			"children": [
				22131
			]
		}
	],
	"packageName": "@medusajs/medusa",
	"symbolIdMap": {
		"22054": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": ""
		},
		"22055": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "IPriceSelectionStrategy"
		},
		"22056": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "IPriceSelectionStrategy.calculateVariantPrice"
		},
		"22057": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "IPriceSelectionStrategy.calculateVariantPrice"
		},
		"22058": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "data"
		},
		"22059": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type"
		},
		"22060": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.variantId"
		},
		"22061": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.quantity"
		},
		"22062": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "context"
		},
		"22063": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "IPriceSelectionStrategy.onVariantsPricesUpdate"
		},
		"22064": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "IPriceSelectionStrategy.onVariantsPricesUpdate"
		},
		"22065": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "variantIds"
		},
		"22066": {
			"sourceFileName": "../../../packages/types/src/transaction-base/transaction-base.ts",
			"qualifiedName": "ITransactionBaseService.withTransaction"
		},
		"22067": {
			"sourceFileName": "../../../packages/types/src/transaction-base/transaction-base.ts",
			"qualifiedName": "ITransactionBaseService.withTransaction"
		},
		"22068": {
			"sourceFileName": "../../../packages/types/src/transaction-base/transaction-base.ts",
			"qualifiedName": "transactionManager"
		},
		"22069": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy"
		},
		"22074": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.__constructor"
		},
		"22075": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy"
		},
		"22076": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "container"
		},
		"22077": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "config"
		},
		"22078": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.container"
		},
		"22079": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.config"
		},
		"22080": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.calculateVariantPrice"
		},
		"22081": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.calculateVariantPrice"
		},
		"22082": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "data"
		},
		"22083": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type"
		},
		"22084": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.variantId"
		},
		"22086": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.quantity"
		},
		"22087": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "context"
		},
		"22088": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.onVariantsPricesUpdate"
		},
		"22089": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "AbstractPriceSelectionStrategy.onVariantsPricesUpdate"
		},
		"22090": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "variantIds"
		},
		"22091": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"22092": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"22093": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"22094": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"22095": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"22096": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"22097": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"22098": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"22099": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"22100": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"22101": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"22102": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"22103": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"22104": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22105": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"22106": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"22107": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"22108": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"22109": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"22110": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"22111": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22112": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22113": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"22114": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"22115": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22116": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22117": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"22118": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"22119": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22120": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"22121": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"22122": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "PriceSelectionContext"
		},
		"22123": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.cart_id"
		},
		"22124": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.customer_id"
		},
		"22125": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.region_id"
		},
		"22126": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.quantity"
		},
		"22127": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.currency_code"
		},
		"22128": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.include_discount_prices"
		},
		"22129": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.tax_rates"
		},
		"22130": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.ignore_cache"
		},
		"22131": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "PriceType"
		},
		"22132": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__object"
		},
		"22133": {
			"sourceFileName": "../../../packages/medusa/src/types/price-list.ts",
			"qualifiedName": "SALE"
		},
		"22134": {
			"sourceFileName": "../../../packages/medusa/src/types/price-list.ts",
			"qualifiedName": "OVERRIDE"
		},
		"22135": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "DEFAULT"
		},
		"22136": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "PriceType"
		},
		"22137": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "PriceSelectionResult"
		},
		"22138": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.originalPrice"
		},
		"22139": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.originalPriceIncludesTax"
		},
		"22140": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.calculatedPrice"
		},
		"22141": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.calculatedPriceIncludesTax"
		},
		"22142": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.calculatedPriceType"
		},
		"22143": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/price-selection-strategy.ts",
			"qualifiedName": "__type.prices"
		}
	}
}