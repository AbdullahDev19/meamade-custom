{
	"id": 10900,
	"name": "file",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 10901,
			"name": "IFileService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\nA file service class is defined in a TypeScript or JavaScript file that’s created in the "
					},
					{
						"kind": "code",
						"text": "`src/services`"
					},
					{
						"kind": "text",
						"text": " directory.\nThe class must extend the "
					},
					{
						"kind": "code",
						"text": "`AbstractFileService`"
					},
					{
						"kind": "text",
						"text": " class imported from the "
					},
					{
						"kind": "code",
						"text": "`@medusajs/medusa`"
					},
					{
						"kind": "text",
						"text": " package.\n\nBased on services’ naming conventions, the file’s name should be the slug version of the file service’s name\nwithout "
					},
					{
						"kind": "code",
						"text": "`service`"
					},
					{
						"kind": "text",
						"text": ", and the class’s name should be the pascal case of the file service’s name following by "
					},
					{
						"kind": "code",
						"text": "`Service`"
					},
					{
						"kind": "text",
						"text": ".\n\nFor example, create the file "
					},
					{
						"kind": "code",
						"text": "`src/services/local-file.ts`"
					},
					{
						"kind": "text",
						"text": " with the following content:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/services/local-file.ts\"\nimport { AbstractFileService } from \"@medusajs/medusa\"\nimport {\n  DeleteFileType,\n  FileServiceGetUploadStreamResult,\n  FileServiceUploadResult,\n  GetUploadedFileType,\n  UploadStreamDescriptorType,\n} from \"@medusajs/types\"\n\nclass LocalFileService extends AbstractFileService {\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async delete(fileData: DeleteFileType): Promise<void> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getUploadStreamDescriptor(\n    fileData: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getDownloadStream(\n    fileData: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getPresignedDownloadUrl(\n    fileData: GetUploadedFileType\n  ): Promise<string> {\n    throw new Error(\"Method not implemented.\")\n  }\n}\n\nexport default LocalFileService\n```"
					},
					{
						"kind": "text",
						"text": "\n\n:::note[Multer Typing]\n\nThe examples implement a file service supporting local uploads.\n\nIf you’re using TypeScript and you're following along with the implementation,\nyou should install the Multer types package in the root of your Medusa backend to resolve errors within your file service types:\n\n"
					},
					{
						"kind": "code",
						"text": "```bash npm2yarn\nnpm install @types/multer\n```"
					},
					{
						"kind": "text",
						"text": "\n\n:::\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 10902,
					"name": "upload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10903,
							"name": "upload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.publicPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath,\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10904,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10905,
					"name": "uploadProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10906,
							"name": "uploadProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend, but to a protected storage. Typically, this would be used to store files that\nshouldn’t be accessible by using the file’s URL or should only be accessible by authenticated users. For example, exported or imported\nCSV files."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.protectedPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10907,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10908,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10909,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a file from storage."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the file is deleted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async delete(\n    fileData: DeleteFileType\n  ): Promise<void> {\n    fs.rmSync(fileData.fileKey)\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10910,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "DeleteFileType"
										},
										"name": "DeleteFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10911,
					"name": "getUploadStreamDescriptor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10912,
							"name": "getUploadStreamDescriptor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a write stream to be used to upload a file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the file-stream upload."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Stream } from \"stream\"\n\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async getUploadStreamDescriptor({\n      name,\n      ext,\n      isPrivate = true,\n    }: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${name}.${ext}`\n\n    const pass = new Stream.PassThrough()\n    const writeStream = fs.createWriteStream(filePath)\n\n    pass.pipe(writeStream)\n\n    return {\n      writeStream: pass,\n      promise: Promise.resolve(),\n      url: `${this.serverUrl}/${filePath}`,\n      fileKey: filePath,\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10913,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file being uploaded."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "UploadStreamDescriptorType"
										},
										"name": "UploadStreamDescriptorType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceGetUploadStreamResult"
										},
										"name": "FileServiceGetUploadStreamResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10914,
					"name": "getDownloadStream",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10915,
							"name": "getDownloadStream",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a read stream for a file, which can then be used to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The [read stream](https://nodejs.org/api/webstreams.html#class-readablestream) to read and download the file."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getDownloadStream({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    const readStream = fs.createReadStream(filePath)\n\n    return readStream\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10916,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
											"qualifiedName": "NodeJS.ReadableStream"
										},
										"name": "ReadableStream",
										"package": "@types/node",
										"qualifiedName": "NodeJS.ReadableStream"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10917,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10918,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a download URL of the file. For some file services, such as S3, a presigned URL indicates a temporary URL to get access to a file.\n\nIf your file service doesn’t perform or offer a similar functionality, you can just return the URL to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The presigned URL to download the file"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getPresignedDownloadUrl({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<string> {\n    // Local upload doesn't provide\n    // support for presigned URLs,\n    // so just return the file's URL.\n\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    return `${this.serverUrl}/${filePath}`\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10919,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10920,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					}
				},
				{
					"id": 10921,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					}
				},
				{
					"id": 10922,
					"name": "activeManager_",
					"variant": "declaration",
					"kind": 262144,
					"flags": {
						"isProtected": true
					},
					"getSignature": {
						"id": 10923,
						"name": "activeManager_",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
								"qualifiedName": "EntityManager"
							},
							"name": "EntityManager",
							"package": "typeorm"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "TransactionBaseService.activeManager_"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.activeManager_"
					}
				},
				{
					"id": 10924,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					}
				},
				{
					"id": 10925,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					}
				},
				{
					"id": 10926,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					}
				},
				{
					"id": 10927,
					"name": "withTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 10928,
							"name": "withTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 10929,
									"name": "transactionManager",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
											"qualifiedName": "EntityManager"
										},
										"name": "EntityManager",
										"package": "typeorm"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.withTransaction"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.withTransaction"
					}
				},
				{
					"id": 10930,
					"name": "shouldRetryTransaction_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 10931,
							"name": "shouldRetryTransaction_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 10932,
									"name": "err",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 10933,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 10934,
															"name": "code",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																10934
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.shouldRetryTransaction_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.shouldRetryTransaction_"
					}
				},
				{
					"id": 10935,
					"name": "atomicPhase_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 10936,
							"name": "atomicPhase_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Wraps some work within a transactional block. If the service already has\na transaction manager attached this will be reused, otherwise a new\ntransaction manager is created."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the result of the transactional work"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 10937,
									"name": "TResult",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								},
								{
									"id": 10938,
									"name": "TError",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 10939,
									"name": "work",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the transactional work to be done"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 10940,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 10941,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 10942,
															"name": "transactionManager",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
																	"qualifiedName": "EntityManager"
																},
																"name": "EntityManager",
																"package": "typeorm"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 10937,
																"name": "TResult",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 10943,
									"name": "isolationOrErrorHandler",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the isolation level to be used for the work."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../node_modules/typeorm/driver/types/IsolationLevel.d.ts",
													"qualifiedName": "IsolationLevel"
												},
												"name": "IsolationLevel",
												"package": "typeorm"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 10944,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"signatures": [
														{
															"id": 10945,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 10946,
																	"name": "error",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 10938,
																		"name": "TError",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "void"
																			},
																			{
																				"type": "reference",
																				"target": 10937,
																				"name": "TResult",
																				"package": "@medusajs/medusa",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 10947,
									"name": "maybeErrorHandlerOrDontFail",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Potential error handler"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 10948,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 10949,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 10950,
															"name": "error",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 10938,
																"name": "TError",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	},
																	{
																		"type": "reference",
																		"target": 10937,
																		"name": "TResult",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																]
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 10937,
										"name": "TResult",
										"package": "@medusajs/medusa",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.atomicPhase_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.atomicPhase_"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						10920,
						10921,
						10924,
						10925,
						10926
					]
				},
				{
					"title": "Accessors",
					"children": [
						10922
					]
				},
				{
					"title": "Methods",
					"children": [
						10902,
						10905,
						10908,
						10911,
						10914,
						10917,
						10927,
						10930,
						10935
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 10951,
					"name": "AbstractFileService"
				}
			]
		},
		{
			"id": 10951,
			"name": "AbstractFileService",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 10956,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 10957,
							"name": "new AbstractFileService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your file service to access the different services in Medusa through dependency injection.\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party provider’s APIs,\nyou can initialize it in the constructor and use it in other methods in the service.\n\nAdditionally, if you’re creating your file service as an external plugin to be installed on any Medusa backend and you want to access the options added for the plugin,\nyou can access them in the constructor."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Logger } from \"@medusajs/medusa\"\nimport * as fs from \"fs\"\n\nclass LocalFileService extends AbstractFileService {\n  // can also be replaced by an environment variable\n  // or a plugin option\n  protected serverUrl = \"http://localhost:9000\"\n  protected publicPath = \"uploads\"\n  protected protectedPath = \"protected-uploads\"\n  protected logger_: Logger\n\n  constructor({ logger }: InjectedDependencies) {\n    // @ts-ignore\n    super(...arguments)\n    this.logger_ = logger\n\n    // for public uploads\n    if (!fs.existsSync(this.publicPath)) {\n      fs.mkdirSync(this.publicPath)\n    }\n\n    // for protected uploads\n    if (!fs.existsSync(this.protectedPath)) {\n      fs.mkdirSync(this.protectedPath)\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10958,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources, such as services, in your Medusa backend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 10959,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this file service is created in a plugin, the plugin's options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 10951,
								"name": "AbstractFileService",
								"package": "@medusajs/medusa"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.constructor"
					}
				},
				{
					"id": 10960,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources, such as services, in your Medusa backend."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 10961,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this file service is created in a plugin, the plugin's options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 10962,
					"name": "upload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10963,
							"name": "upload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.publicPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath,\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10964,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10903,
								"name": "IFileService.upload"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10902,
						"name": "IFileService.upload"
					}
				},
				{
					"id": 10965,
					"name": "uploadProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10966,
							"name": "uploadProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend, but to a protected storage. Typically, this would be used to store files that\nshouldn’t be accessible by using the file’s URL or should only be accessible by authenticated users. For example, exported or imported\nCSV files."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.protectedPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10967,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10906,
								"name": "IFileService.uploadProtected"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10905,
						"name": "IFileService.uploadProtected"
					}
				},
				{
					"id": 10968,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10969,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a file from storage."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the file is deleted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async delete(\n    fileData: DeleteFileType\n  ): Promise<void> {\n    fs.rmSync(fileData.fileKey)\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10970,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "DeleteFileType"
										},
										"name": "DeleteFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10909,
								"name": "IFileService.delete"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10908,
						"name": "IFileService.delete"
					}
				},
				{
					"id": 10971,
					"name": "getUploadStreamDescriptor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10972,
							"name": "getUploadStreamDescriptor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a write stream to be used to upload a file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the file-stream upload."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Stream } from \"stream\"\n\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async getUploadStreamDescriptor({\n      name,\n      ext,\n      isPrivate = true,\n    }: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${name}.${ext}`\n\n    const pass = new Stream.PassThrough()\n    const writeStream = fs.createWriteStream(filePath)\n\n    pass.pipe(writeStream)\n\n    return {\n      writeStream: pass,\n      promise: Promise.resolve(),\n      url: `${this.serverUrl}/${filePath}`,\n      fileKey: filePath,\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10973,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file being uploaded."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "UploadStreamDescriptorType"
										},
										"name": "UploadStreamDescriptorType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceGetUploadStreamResult"
										},
										"name": "FileServiceGetUploadStreamResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10912,
								"name": "IFileService.getUploadStreamDescriptor"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10911,
						"name": "IFileService.getUploadStreamDescriptor"
					}
				},
				{
					"id": 10974,
					"name": "getDownloadStream",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10975,
							"name": "getDownloadStream",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a read stream for a file, which can then be used to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The [read stream](https://nodejs.org/api/webstreams.html#class-readablestream) to read and download the file."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getDownloadStream({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    const readStream = fs.createReadStream(filePath)\n\n    return readStream\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10976,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
											"qualifiedName": "NodeJS.ReadableStream"
										},
										"name": "ReadableStream",
										"package": "@types/node",
										"qualifiedName": "NodeJS.ReadableStream"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10915,
								"name": "IFileService.getDownloadStream"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10914,
						"name": "IFileService.getDownloadStream"
					}
				},
				{
					"id": 10977,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 10978,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a download URL of the file. For some file services, such as S3, a presigned URL indicates a temporary URL to get access to a file.\n\nIf your file service doesn’t perform or offer a similar functionality, you can just return the URL to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The presigned URL to download the file"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getPresignedDownloadUrl({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<string> {\n    // Local upload doesn't provide\n    // support for presigned URLs,\n    // so just return the file's URL.\n\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    return `${this.serverUrl}/${filePath}`\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 10979,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 10918,
								"name": "IFileService.getPresignedDownloadUrl"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 10917,
						"name": "IFileService.getPresignedDownloadUrl"
					}
				},
				{
					"id": 10980,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 10920,
						"name": "IFileService.manager_"
					}
				},
				{
					"id": 10981,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 10921,
						"name": "IFileService.transactionManager_"
					}
				},
				{
					"id": 10984,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 10924,
						"name": "IFileService.__container__"
					}
				},
				{
					"id": 10985,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 10925,
						"name": "IFileService.__configModule__"
					}
				},
				{
					"id": 10986,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 10926,
						"name": "IFileService.__moduleDeclaration__"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						10956
					]
				},
				{
					"title": "Properties",
					"children": [
						10960,
						10961,
						10980,
						10981,
						10984,
						10985,
						10986
					]
				},
				{
					"title": "Methods",
					"children": [
						10962,
						10965,
						10968,
						10971,
						10974,
						10977
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 10901,
					"name": "IFileService",
					"package": "@medusajs/medusa"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				10951
			]
		},
		{
			"title": "Interfaces",
			"children": [
				10901
			]
		}
	],
	"packageName": "@medusajs/medusa",
	"symbolIdMap": {
		"10900": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": ""
		},
		"10901": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService"
		},
		"10902": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.upload"
		},
		"10903": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.upload"
		},
		"10904": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "file"
		},
		"10905": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.uploadProtected"
		},
		"10906": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.uploadProtected"
		},
		"10907": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "file"
		},
		"10908": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.delete"
		},
		"10909": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.delete"
		},
		"10910": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10911": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getUploadStreamDescriptor"
		},
		"10912": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getUploadStreamDescriptor"
		},
		"10913": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10914": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getDownloadStream"
		},
		"10915": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getDownloadStream"
		},
		"10916": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10917": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getPresignedDownloadUrl"
		},
		"10918": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getPresignedDownloadUrl"
		},
		"10919": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10920": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"10921": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"10922": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"10923": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"10924": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"10925": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"10926": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"10927": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"10928": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"10929": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"10930": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"10931": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"10932": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"10933": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10934": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"10935": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"10936": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"10937": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"10938": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"10939": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"10940": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10941": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10942": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"10943": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"10944": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10945": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10946": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"10947": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"10948": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10949": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10950": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"10951": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService"
		},
		"10956": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.__constructor"
		},
		"10957": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService"
		},
		"10958": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "container"
		},
		"10959": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "config"
		},
		"10960": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.container"
		},
		"10961": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.config"
		},
		"10962": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.upload"
		},
		"10963": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.upload"
		},
		"10964": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10965": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.uploadProtected"
		},
		"10966": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.uploadProtected"
		},
		"10967": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10968": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.delete"
		},
		"10969": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.delete"
		},
		"10970": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10971": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getUploadStreamDescriptor"
		},
		"10972": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getUploadStreamDescriptor"
		},
		"10973": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10974": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getDownloadStream"
		},
		"10975": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getDownloadStream"
		},
		"10976": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10977": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getPresignedDownloadUrl"
		},
		"10978": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getPresignedDownloadUrl"
		},
		"10979": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"10980": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"10981": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"10982": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"10983": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"10984": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"10985": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"10986": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"10987": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"10988": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"10989": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"10990": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"10991": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"10992": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"10993": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"10994": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"10995": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"10996": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"10997": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"10998": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"10999": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"11000": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11001": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11002": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"11003": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"11004": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11005": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11006": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"11007": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"11008": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11009": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"11010": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		}
	}
}