{
	"id": 13992,
	"name": "js-client",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 13993,
			"name": "AddressesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Address API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.addresses`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 14014
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 13997,
					"name": "addAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13998,
							"name": "addAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add an address to the logged-in customer's saved addresses."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.addAddress({\n  address: {\n    first_name: \"Celia\",\n    last_name: \"Schumm\",\n    address_1: \"225 Bednar Curve\",\n    city: \"Danielville\",\n    country_code: \"US\",\n    postal_code: \"85137\",\n    phone: \"981-596-6748 x90188\",\n    company: \"Wyman LLC\",\n    province: \"Georgia\",\n  }\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13999,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesReq"
										},
										"name": "StorePostCustomersCustomerAddressesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14000,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14001,
					"name": "deleteAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14002,
							"name": "deleteAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.deleteAddress(addressId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14003,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the address to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14004,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14005,
					"name": "updateAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14006,
							"name": "updateAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.updateAddress(addressId, {\n  first_name: \"Gina\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14007,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14008,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the address."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesAddressReq"
										},
										"name": "StorePostCustomersCustomerAddressesAddressReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14009,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13994,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13995,
							"name": "new AddressesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13996,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13993,
								"name": "AddressesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13994
					]
				},
				{
					"title": "Methods",
					"children": [
						13997,
						14001,
						14005
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14420,
			"name": "AdminAuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth_getauth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allow admin users to manage their session, such as login or log out.\nYou can send authenticated requests for an admin user either using the Cookie header, their API token, or the JWT Token.\nWhen you log the admin user in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createSession",
						"target": 14430,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement user profiles](https://docs.medusajs.com/modules/users/admin/manage-profile)."
					}
				]
			},
			"children": [
				{
					"id": 14424,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14425,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the currently logged in user's details. Can also be used to check if there is an authenticated user."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.auth.getSession()\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14426,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14427,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14428,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the user and remove their authentication session. This will only work if you're using Cookie session for authentication. If the API token is still passed in the header,\nthe user is still authorized to perform admin functionalities in other API Routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when user is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in\nmedusa.admin.auth.deleteSession()\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14429,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14430,
					"name": "createSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14431,
							"name": "createSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log a User in using their credentials. If the user is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.AdminAuthResource.createSession({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14432,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14433,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14434,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14435,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the user and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the user, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14436,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14437,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminBearerAuthRes"
										},
										"name": "AdminBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14421,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14422,
							"name": "new AdminAuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14423,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14420,
								"name": "AdminAuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14421
					]
				},
				{
					"title": "Methods",
					"children": [
						14424,
						14427,
						14430,
						14434
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14438,
			"name": "AdminBatchJobsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.batchJobs`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA batch job is a task that is performed by the Medusa backend asynchronusly. For example, the Import Product feature is implemented using batch jobs.\nThe methods in this class allow admins to manage the batch jobs and their state.\n\nRelated Guide: [How to import products](https://docs.medusajs.com/modules/products/admin/import-products)."
					}
				]
			},
			"children": [
				{
					"id": 14442,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14443,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Batch Job to be executed asynchronously in the Medusa backend. If "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ", the batch job will not be executed until the it is confirmed,\nwhich can be done using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirm",
										"target": 14454,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.create({\n  type: 'product-export',\n  context: {},\n  dry_run: false\n}).then((({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14444,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the batch job to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/create-batch-job.d.ts",
											"qualifiedName": "AdminPostBatchesReq"
										},
										"name": "AdminPostBatchesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14445,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14446,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14447,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Batch Jobs. The batch jobs can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`confirmed_at`"
									},
									{
										"kind": "text",
										"text": ". The batch jobs can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of batch jobs with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list()\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\"\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\",\n  limit,\n  offset\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14448,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved batch jobs."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/list-batch-jobs.d.ts",
											"qualifiedName": "AdminGetBatchParams"
										},
										"name": "AdminGetBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14449,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobListRes"
										},
										"name": "AdminBatchJobListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14450,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14451,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a batch job as canceled. When a batch job is canceled, the processing of the batch job doesn’t automatically stop."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.cancel(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14452,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14453,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14454,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14455,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When a batch job is created, it's not executed automatically if "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ". This method confirms that the batch job should be executed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.confirm(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14456,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14457,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14458,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14459,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a batch job."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.retrieve(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14460,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14461,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14439,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14440,
							"name": "new AdminBatchJobsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14441,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14438,
								"name": "AdminBatchJobsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14439
					]
				},
				{
					"title": "Methods",
					"children": [
						14442,
						14446,
						14450,
						14454,
						14458
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14462,
			"name": "AdminCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection."
					}
				]
			},
			"children": [
				{
					"id": 14466,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14467,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.create({\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14468,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the product collection to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/create-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsReq"
										},
										"name": "AdminPostCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14469,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14470,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14471,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.update(collectionId, {\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14472,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14473,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/update-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsCollectionReq"
										},
										"name": "AdminPostCollectionsCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14474,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14475,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14476,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product collection. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.delete(collectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14477,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14478,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14479,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14480,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection by its ID. The products associated with it are expanded and returned as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14481,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14482,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14483,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14484,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": ". The collections can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14485,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/list-collections.d.ts",
											"qualifiedName": "AdminGetCollectionsParams"
										},
										"name": "AdminGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14486,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsListRes"
										},
										"name": "AdminCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14487,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14488,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.addProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ collection }) => {\n  console.log(collection.products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14489,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14490,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/add-products.d.ts",
											"qualifiedName": "AdminPostProductsToCollectionReq"
										},
										"name": "AdminPostProductsToCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14491,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14492,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14493,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a collection. This would not delete the product, only the association between the product and the collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.removeProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ id, object, removed_products }) => {\n  console.log(removed_products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14494,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the product collection"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14495,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/remove-products.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionReq"
										},
										"name": "AdminDeleteProductsFromCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14496,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionRes"
										},
										"name": "AdminDeleteProductsFromCollectionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14463,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14464,
							"name": "new AdminCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14465,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14462,
								"name": "AdminCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14463
					]
				},
				{
					"title": "Methods",
					"children": [
						14466,
						14470,
						14475,
						14479,
						14483,
						14487,
						14492
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14497,
			"name": "AdminCurrenciesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.currencies`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA store can use unlimited currencies, and each region must be associated with at least one currency.\nCurrencies are defined within the Medusa backend. The methods in this class allow admins to list and update currencies.\n\nRelated Guide: [How to manage currencies](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-currencies)."
					}
				]
			},
			"children": [
				{
					"id": 14501,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14502,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of currencies. The currencies can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`code`"
									},
									{
										"kind": "text",
										"text": ". The currencies can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of currencies with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list currencies:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list()\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list({\n  limit,\n  offset\n})\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14503,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved currencies."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/list-currencies.d.ts",
											"qualifiedName": "AdminGetCurrenciesParams"
										},
										"name": "AdminGetCurrenciesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14504,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesListRes"
										},
										"name": "AdminCurrenciesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14505,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14506,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Currency's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the currency's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.update(code, {\n  includes_tax: true\n})\n.then(({ currency }) => {\n  console.log(currency.code);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14507,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14508,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the currency."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/update-currency.d.ts",
											"qualifiedName": "AdminPostCurrenciesCurrencyReq"
										},
										"name": "AdminPostCurrenciesCurrencyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14509,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesRes"
										},
										"name": "AdminCurrenciesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14498,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14499,
							"name": "new AdminCurrenciesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14500,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14497,
								"name": "AdminCurrenciesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14498
					]
				},
				{
					"title": "Methods",
					"children": [
						14501,
						14505
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14394,
			"name": "AdminCustomResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests custom API Routes. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.custom`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 14398,
					"name": "get",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14399,
							"name": "get",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`GET`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TQuery`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted query parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostsResponse = {\nposts: Post[]\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.get<Record<string, any>, PostsResponse>(\n  \"/blog/posts\"\n)\n.then(({ posts }) => {\n  console.log(posts.length);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 14400,
									"name": "TQuery",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 14401,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 14402,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14403,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Query path parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 14400,
										"name": "TQuery",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 14404,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 14405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 14401,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14406,
					"name": "post",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14407,
							"name": "post",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`POST`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TPayload`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted body parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostRequest = {\n  title: string\n}\ntype PostResponse = {\n  post: Post\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.post<PostRequest, PostResponse>(\n  \"/blog/posts\",\n  {\n    title: \"My post\",\n  }\n)\n.then(({ post }) => {\n  console.log(post.id);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 14408,
									"name": "TPayload",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 14409,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 14410,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14411,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Body parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 14408,
										"name": "TPayload",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 14412,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 14413,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 14409,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14414,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14415,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`DELETE`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a type parameters "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " indicating the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.custom.delete(\n  `/blog/posts/${postId}`\n)\n.then(() => {\n  // deleted successfully\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 14416,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 14417,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14418,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 14419,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 14416,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14395,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14396,
							"name": "new AdminCustomResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14397,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14394,
								"name": "AdminCustomResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14395
					]
				},
				{
					"title": "Methods",
					"children": [
						14398,
						14406,
						14414
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14510,
			"name": "AdminCustomerGroupsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customerGroups`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nCustomer Groups can be used to organize customers that share similar data or attributes into dedicated groups.\nThis can be useful for different purposes such as setting a different price for a specific customer group.\n\nRelated Guide: [How to manage customer groups](https://docs.medusajs.com/modules/customers/admin/manage-customer-groups)."
					}
				]
			},
			"children": [
				{
					"id": 14514,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14515,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.create({\n  name: \"VIP\"\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14516,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the customer group to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/create-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsReq"
										},
										"name": "AdminPostCustomerGroupsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14517,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14518,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14519,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.retrieve(customerGroupId)\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14520,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14521,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/get-customer-group.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsGroupParams"
										},
										"name": "AdminGetCustomerGroupsGroupParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14522,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14523,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14524,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer group's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14525,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14526,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/update-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupReq"
										},
										"name": "AdminPostCustomerGroupsGroupReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14527,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14528,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14529,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a customer group. This doesn't delete the customers associated with the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.delete(customerGroupId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14530,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14531,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14532,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14533,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customer groups. The customer groups can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": ". The customer groups can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customer groups with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list()\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  expand: \"customers\"\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  \"expand\": \"customers\",\n  limit,\n  offset\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14534,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customer groups."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/list-customer-groups.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsParams"
										},
										"name": "AdminGetCustomerGroupsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14535,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsListRes"
										},
										"name": "AdminCustomerGroupsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14536,
					"name": "addCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14537,
							"name": "addCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of customers to a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14538,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14539,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to add to the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/add-customers-batch.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupCustomersBatchReq"
										},
										"name": "AdminPostCustomerGroupsGroupCustomersBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14540,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14541,
					"name": "removeCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14542,
							"name": "removeCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of customers from a customer group. This doesn't delete the customer, only the association between the customer and the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.removeCustomers(customerGroupId, {\n  customer_ids: [\n    {\n      id: customerId\n    }\n  ]\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14543,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14544,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to remove from the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/delete-customers-batch.d.ts",
											"qualifiedName": "AdminDeleteCustomerGroupsGroupCustomerBatchReq"
										},
										"name": "AdminDeleteCustomerGroupsGroupCustomerBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14545,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14546,
					"name": "listCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14547,
							"name": "listCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customers in a customer group. The customers can be filtered by the "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " field. The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.listCustomers(customerGroupId)\n.then(({ customers }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14548,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14549,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14550,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14511,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14512,
							"name": "new AdminCustomerGroupsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14513,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14510,
								"name": "AdminCustomerGroupsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14511
					]
				},
				{
					"title": "Methods",
					"children": [
						14514,
						14518,
						14523,
						14528,
						14532,
						14536,
						14541,
						14546
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14551,
			"name": "AdminCustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nCustomers can either be created when they register through the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CustomersResource.create",
						"target": 14107
					},
					{
						"kind": "text",
						"text": " method, or created by the admin using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "create",
						"target": 14555,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method.\n\nRelated Guide: [How to manage customers](https://docs.medusajs.com/modules/customers/admin/manage-customers)."
					}
				]
			},
			"children": [
				{
					"id": 14555,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14556,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer as an admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.create({\n  email: \"user@example.com\",\n  first_name: \"Caterina\",\n  last_name: \"Yost\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14557,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/create-customer.d.ts",
											"qualifiedName": "AdminPostCustomersReq"
										},
										"name": "AdminPostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14558,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14559,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14560,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.update(customerId, {\n  first_name: \"Dolly\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14561,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14562,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/update-customer.d.ts",
											"qualifiedName": "AdminPostCustomersCustomerReq"
										},
										"name": "AdminPostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14563,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14564,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14565,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.retrieve(customerId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14566,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14567,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14568,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14569,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Customers. The customers can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`groups`"
									},
									{
										"kind": "text",
										"text": ". The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list()\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\"\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\",\n  limit,\n  offset\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14570,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14571,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14552,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14553,
							"name": "new AdminCustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14554,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14551,
								"name": "AdminCustomersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14552
					]
				},
				{
					"title": "Methods",
					"children": [
						14555,
						14559,
						14564,
						14568
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14572,
			"name": "AdminDiscountsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.discounts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create discounts with conditions and rules, providing them with advanced settings for variety of cases.\nThe methods in this class can be used to manage discounts, their conditions, resources, and more.\n\nRelated Guide: [How to manage discounts](https://docs.medusajs.com/modules/discounts/admin/manage-discounts)."
					}
				]
			},
			"children": [
				{
					"id": 14576,
					"name": "addRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14577,
							"name": "addRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a Region to the list of Regions a Discount can be used in."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14578,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14579,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to add."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14580,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14581,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14582,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount with a given set of rules that defines how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.create({\n  code: \"TEST\",\n  rule: {\n    type: DiscountRuleType.FIXED,\n    value: 10,\n    allocation: AllocationType.ITEM\n  },\n  regions: [\"reg_XXXXXXXX\"],\n  is_dynamic: false,\n  is_disabled: false\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14583,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsReq"
										},
										"name": "AdminPostDiscountsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14584,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14585,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14586,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount with a given set of rules that define how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.update(discountId, {\n  code: \"TEST\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14587,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14588,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountReq"
										},
										"name": "AdminPostDiscountsDiscountReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14589,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14590,
					"name": "createDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14591,
							"name": "createDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a dynamic unique code that can map to a parent discount. This is useful if you want to automatically generate codes with the same rules and conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createDynamicCode(discountId, {\n  code: \"TEST\",\n  usage_limit: 1\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14592,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14593,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The dynamic code to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-dynamic-code.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountDynamicCodesReq"
										},
										"name": "AdminPostDiscountsDiscountDynamicCodesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14594,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14595,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14596,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount. Deleting the discount will make it unavailable for customers to use."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.delete(discountId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14597,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14598,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14599,
					"name": "deleteDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14600,
							"name": "deleteDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a dynamic code from a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteDynamicCode(discountId, code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14601,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14602,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the dynamic code to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14603,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14604,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14605,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieve(discountId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14606,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14607,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-discount.d.ts",
											"qualifiedName": "AdminGetDiscountParams"
										},
										"name": "AdminGetDiscountParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14608,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14609,
					"name": "retrieveByCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14610,
							"name": "retrieveByCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount's details by its discount code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieveByCode(code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14611,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14612,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14613,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14614,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Discounts. The discounts can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`rule`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_dynamic`"
									},
									{
										"kind": "text",
										"text": ". The discounts can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of discounts with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list()\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\"\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\",\n  limit,\n  offset\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14615,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved discounts."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/list-discounts.d.ts",
											"qualifiedName": "AdminGetDiscountsParams"
										},
										"name": "AdminGetDiscountsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14616,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsListRes"
										},
										"name": "AdminDiscountsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14617,
					"name": "removeRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14618,
							"name": "removeRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Region from the list of Regions that a Discount can be used in. This does not delete a region, only the association between it and the discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.removeRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14619,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14620,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14621,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14622,
					"name": "createCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14623,
							"name": "createCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14624,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14625,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount condition to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditions"
										},
										"name": "AdminPostDiscountsDiscountConditions",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14626,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 14627,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14628,
					"name": "updateCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14629,
							"name": "updateCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To update a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14630,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14631,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14632,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsCondition"
										},
										"name": "AdminPostDiscountsDiscountConditionsCondition",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14633,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 14634,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14635,
					"name": "deleteCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14636,
							"name": "deleteCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount condition. This doesn't delete resources associated to the discount condition."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteCondition(discountId, conditionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14637,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14638,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14639,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14640,
					"name": "getCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14641,
							"name": "getCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Discount Condition's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount condition details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a discount condition by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId)\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId, {\n  expand: \"discount_rule\"\n})\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14642,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount that the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14643,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14644,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-condition.d.ts",
											"qualifiedName": "AdminGetDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminGetDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14645,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountConditionsRes"
										},
										"name": "AdminDiscountConditionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14646,
					"name": "addConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14647,
							"name": "addConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a batch of resources to a discount condition. The type of resource depends on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ",\nthe resources being added should be products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add resources to a discount condition:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations to include in the returned discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14648,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14649,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14650,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to add to the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14651,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14652,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14653,
					"name": "deleteConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14654,
							"name": "deleteConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a batch of resources from a discount condition. This will only remove the association between the resource and the discount condition, not the resource itself."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14655,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14656,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14657,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/delete-resources-from-condition-batch.d.ts",
											"qualifiedName": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14658,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14573,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14574,
							"name": "new AdminDiscountsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14575,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14572,
								"name": "AdminDiscountsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14573
					]
				},
				{
					"title": "Methods",
					"children": [
						14576,
						14581,
						14585,
						14590,
						14595,
						14599,
						14604,
						14609,
						14613,
						14617,
						14622,
						14628,
						14635,
						14640,
						14646,
						14653
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14659,
			"name": "AdminDraftOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.draftOrders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA draft order is an order created manually by the admin. It allows admins to create orders without direct involvement from the customer.\n\nRelated Guide: [How to manage draft orders](https://docs.medusajs.com/modules/orders/admin/manage-draft-orders)."
					}
				]
			},
			"children": [
				{
					"id": 14663,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14664,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Draft Order. A draft order is not transformed into an order until payment is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.create({\n  email: \"user@example.com\",\n  region_id,\n  items: [\n    {\n      quantity: 1\n    }\n  ],\n  shipping_methods: [\n    {\n      option_id\n    }\n  ],\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14665,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The draft order to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersReq"
										},
										"name": "AdminPostDraftOrdersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14666,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14667,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14668,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Line Item in the Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.addLineItem(draftOrderId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14669,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14670,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14671,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14672,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14673,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.delete(draftOrderId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14674,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14675,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14676,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14677,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Line Item from a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.removeLineItem(draftOrderId, itemId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14678,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14679,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete from the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14680,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14681,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14682,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.retrieve(draftOrderId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14683,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14684,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14685,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14686,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an list of Draft Orders. The draft orders can be filtered by parameters such as "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The draft orders can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of draft orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list draft orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list()\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list({\n  limit,\n  offset\n})\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14687,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved draft orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/list-draft-orders.d.ts",
											"qualifiedName": "AdminGetDraftOrdersParams"
										},
										"name": "AdminGetDraftOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14688,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersListRes"
										},
										"name": "AdminDraftOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14689,
					"name": "markPaid",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14690,
							"name": "markPaid",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture the draft order's payment. This will also set the draft order's status to "
									},
									{
										"kind": "code",
										"text": "`completed`"
									},
									{
										"kind": "text",
										"text": " and create an order from the draft order. The payment is captured through Medusa's system payment,\nwhich is manual payment that isn't integrated with any third-party payment provider. It is assumed that the payment capturing is handled manually by the admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.markPaid(draftOrderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14691,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14692,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes"
										},
										"name": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14693,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14694,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.update(draftOrderId, {\n  email: \"user@example.com\"\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14695,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14696,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the draft order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14697,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14698,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14699,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Line Item in a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.updateLineItem(draftOrderId, lineId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14700,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14701,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14702,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsItemReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14703,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14660,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14661,
							"name": "new AdminDraftOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14662,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14659,
								"name": "AdminDraftOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14660
					]
				},
				{
					"title": "Methods",
					"children": [
						14663,
						14667,
						14672,
						14676,
						14681,
						14685,
						14689,
						14693,
						14698
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14704,
			"name": "AdminGiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create gift cards and send them directly to customers, specifying options like their balance, region, and more.\nThese gift cards are different than the saleable gift cards in a store, which are created and managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 15101
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-custom-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 14708,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14709,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a gift card that can redeemed by its unique code. The Gift Card is only valid within one region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.create({\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14710,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The gift card to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/create-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsReq"
										},
										"name": "AdminPostGiftCardsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14711,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14712,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14713,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.update(giftCardId, {\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14714,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14715,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the gift card."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/update-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsGiftCardReq"
										},
										"name": "AdminPostGiftCardsGiftCardReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14716,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14717,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14718,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a gift card. Once deleted, it can't be used by customers."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.delete(giftCardId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14719,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14720,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14721,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14722,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.retrieve(giftCardId)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14723,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14724,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14725,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14726,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of gift cards. The gift cards can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The gift cards can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of gift cards with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list gift cards:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list()\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list({\n  limit,\n  offset\n})\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14727,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved gift cards."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/list-gift-cards.d.ts",
											"qualifiedName": "AdminGetGiftCardsParams"
										},
										"name": "AdminGetGiftCardsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14728,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsListRes"
										},
										"name": "AdminGiftCardsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14705,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14706,
							"name": "new AdminGiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14707,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14704,
								"name": "AdminGiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14705
					]
				},
				{
					"title": "Methods",
					"children": [
						14708,
						14712,
						14717,
						14721,
						14725
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14352,
			"name": "Admin",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class includes properties used to send requests to the [Admin API Routes](https://docs.medusajs.com/api/admin). All its properties\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 14356,
					"name": "auth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminAuthResource",
								"target": 14420,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14420,
						"name": "AdminAuthResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14357,
					"name": "batchJobs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminBatchJobsResource",
								"target": 14438,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14438,
						"name": "AdminBatchJobsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14358,
					"name": "customers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomersResource",
								"target": 14551,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14551,
						"name": "AdminCustomersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14359,
					"name": "customerGroups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomerGroupsResource",
								"target": 14510,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14510,
						"name": "AdminCustomerGroupsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14360,
					"name": "discounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDiscountsResource",
								"target": 14572,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14572,
						"name": "AdminDiscountsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14361,
					"name": "currencies",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCurrenciesResource",
								"target": 14497,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies_getcurrencies)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14497,
						"name": "AdminCurrenciesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14362,
					"name": "collections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCollectionsResource",
								"target": 14462,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14462,
						"name": "AdminCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14363,
					"name": "draftOrders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDraftOrdersResource",
								"target": 14659,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14659,
						"name": "AdminDraftOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14364,
					"name": "giftCards",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminGiftCardsResource",
								"target": 14704,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14704,
						"name": "AdminGiftCardsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14365,
					"name": "invites",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInvitesResource",
								"target": 14780,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14780,
						"name": "AdminInvitesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14366,
					"name": "inventoryItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInventoryItemsResource",
								"target": 14729,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14729,
						"name": "AdminInventoryItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14367,
					"name": "notes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotesResource",
								"target": 14803,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14803,
						"name": "AdminNotesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14368,
					"name": "priceLists",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPriceListResource",
								"target": 15031,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15031,
						"name": "AdminPriceListResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14369,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductsResource",
								"target": 15101,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15101,
						"name": "AdminProductsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14370,
					"name": "productTags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTagsResource",
								"target": 15086,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15086,
						"name": "AdminProductTagsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14371,
					"name": "productTypes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTypesResource",
								"target": 15093,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15093,
						"name": "AdminProductTypesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14372,
					"name": "users",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUsersResource",
								"target": 15588,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15588,
						"name": "AdminUsersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14373,
					"name": "returns",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnsResource",
								"target": 15327,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15327,
						"name": "AdminReturnsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14374,
					"name": "orders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrdersResource",
								"target": 14841,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14841,
						"name": "AdminOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14375,
					"name": "orderEdits",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrderEditsResource",
								"target": 14972,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14972,
						"name": "AdminOrderEditsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14376,
					"name": "publishableApiKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPublishableApiKeyResource",
								"target": 15174,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15174,
						"name": "AdminPublishableApiKeyResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14377,
					"name": "returnReasons",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnReasonsResource",
								"target": 15303,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15303,
						"name": "AdminReturnReasonsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14378,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@props",
								"content": [
									{
										"kind": "text",
										"text": "variants - An instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "AdminVariantsResource",
										"target": 15621,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants)."
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15621,
						"name": "AdminVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14379,
					"name": "salesChannels",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSalesChannelsResource",
								"target": 15344,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15344,
						"name": "AdminSalesChannelsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14380,
					"name": "swaps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSwapsResource",
								"target": 15488,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15488,
						"name": "AdminSwapsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14381,
					"name": "shippingProfiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingProfilesResource",
								"target": 15414,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15414,
						"name": "AdminShippingProfilesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14382,
					"name": "stockLocations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStockLocationsResource",
								"target": 15438,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15438,
						"name": "AdminStockLocationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14383,
					"name": "store",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStoresResource",
								"target": 15463,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15463,
						"name": "AdminStoresResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14384,
					"name": "shippingOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingOptionsResource",
								"target": 15389,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15389,
						"name": "AdminShippingOptionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14385,
					"name": "regions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminRegionsResource",
								"target": 15218,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15218,
						"name": "AdminRegionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14386,
					"name": "reservations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReservationsResource",
								"target": 15278,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15278,
						"name": "AdminReservationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14387,
					"name": "notifications",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotificationsResource",
								"target": 14828,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14828,
						"name": "AdminNotificationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14388,
					"name": "taxRates",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminTaxRatesResource",
								"target": 15500,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15500,
						"name": "AdminTaxRatesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14389,
					"name": "uploads",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUploadsResource",
								"target": 15564,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15564,
						"name": "AdminUploadsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14390,
					"name": "paymentCollections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentCollectionsResource",
								"target": 15638,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15638,
						"name": "AdminPaymentCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14391,
					"name": "payments",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentsResource",
								"target": 15660,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15660,
						"name": "AdminPaymentsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14392,
					"name": "productCategories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductCategoriesResource",
								"target": 15678,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 15678,
						"name": "AdminProductCategoriesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14393,
					"name": "custom",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomResource",
								"target": 14394,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to custom API Routes."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14394,
						"name": "AdminCustomResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14353,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14354,
							"name": "new Admin",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14355,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14352,
								"name": "Admin",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14353
					]
				},
				{
					"title": "Properties",
					"children": [
						14356,
						14357,
						14358,
						14359,
						14360,
						14361,
						14362,
						14363,
						14364,
						14365,
						14366,
						14367,
						14368,
						14369,
						14370,
						14371,
						14372,
						14373,
						14374,
						14375,
						14376,
						14377,
						14378,
						14379,
						14380,
						14381,
						14382,
						14383,
						14384,
						14385,
						14386,
						14387,
						14388,
						14389,
						14390,
						14391,
						14392,
						14393
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14729,
			"name": "AdminInventoryItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.inventoryItems`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nInventory items, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), can be used to manage the inventory of saleable items in your store.\n\nRelated Guide: [How to manage inventory items](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-inventory-items)."
					}
				]
			},
			"children": [
				{
					"id": 14733,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14734,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.retrieve(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14735,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14736,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations applied on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/get-inventory-item.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemParams"
										},
										"name": "AdminGetInventoryItemsItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14737,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14738,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14739,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.update(inventoryItemId, {\n  origin_country: \"US\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14740,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14741,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemReq"
										},
										"name": "AdminPostInventoryItemsInventoryItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14742,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemParams"
										},
										"name": "AdminPostInventoryItemsInventoryItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14743,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14744,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14745,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an Inventory Item. This does not delete the associated product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.delete(inventoryItemId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14746,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14747,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14748,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14749,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an Inventory Item for a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.create({\n  variant_id: \"variant_123\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14750,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The inventory item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsReq"
										},
										"name": "AdminPostInventoryItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14751,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsParams"
										},
										"name": "AdminPostInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14752,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14753,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14754,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory items. The inventory items can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe inventory items can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of inventory items with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list inventory items:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list()\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list({\n  limit,\n  offset\n})\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14755,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved inventory items."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-inventory-items.d.ts",
											"qualifiedName": "AdminGetInventoryItemsParams"
										},
										"name": "AdminGetInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14756,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes"
										},
										"name": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14757,
					"name": "updateLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14758,
							"name": "updateLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a location level's details for a given inventory item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.updateLocationLevel(inventoryItemId, locationId, {\n  stocked_quantity: 15,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14759,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14760,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14761,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the location level."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14762,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14763,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14764,
					"name": "createLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14765,
							"name": "createLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Location Level for a given Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.createLocationLevel(inventoryItemId, {\n  location_id: \"sloc_123\",\n  stocked_quantity: 10,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14766,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14767,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The location level to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14768,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14769,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14770,
					"name": "deleteLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14771,
							"name": "deleteLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a location level of an Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.deleteLocationLevel(inventoryItemId, locationId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14772,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14773,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14774,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14775,
					"name": "listLocationLevels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14776,
							"name": "listLocationLevels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory levels of an inventory item. The inventory levels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details and list of location levels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.listLocationLevels(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.location_levels);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14777,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location levels belong to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14778,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved location levels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-location-levels.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminGetInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14779,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsLocationLevelsRes"
										},
										"name": "AdminInventoryItemsLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14730,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14731,
							"name": "new AdminInventoryItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14732,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14729,
								"name": "AdminInventoryItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14730
					]
				},
				{
					"title": "Methods",
					"children": [
						14733,
						14738,
						14744,
						14748,
						14753,
						14757,
						14764,
						14770,
						14775
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14780,
			"name": "AdminInvitesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.invites`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can invite new users to manage their team. This would allow new users to authenticate as admins and perform admin functionalities.\n\nRelated Guide: [How to manage invites](https://docs.medusajs.com/modules/users/admin/manage-invites)."
					}
				]
			},
			"children": [
				{
					"id": 14784,
					"name": "accept",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14785,
							"name": "accept",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Accept an Invite. This will also delete the invite and create a new user that can log in and perform admin functionalities. \nThe user will have the email associated with the invite, and the password provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is accepted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.accept({\n  token,\n  user: {\n    first_name: \"Brigitte\",\n    last_name: \"Collier\",\n    password: \"supersecret\"\n  }\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14786,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user accepting the invite."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/accept-invite.d.ts",
											"qualifiedName": "AdminPostInvitesInviteAcceptReq"
										},
										"name": "AdminPostInvitesInviteAcceptReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14787,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14788,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14789,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an invite. This will generate a token associated with the invite and trigger an "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event. If you have a Notification Provider installed that handles this\nevent, a notification should be sent to the email associated with the invite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.create({\n  user: \"user@example.com\",\n  role: \"admin\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14790,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminPostInvitesPayload"
										},
										"name": "AdminPostInvitesPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 14791,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14792,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14793,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an invite. Only invites that weren't accepted can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.delete(inviteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14794,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14795,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14796,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14797,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of invites."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of invites."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.list()\n.then(({ invites }) => {\n  console.log(invites.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14798,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/index.d.ts",
											"qualifiedName": "AdminListInvitesRes"
										},
										"name": "AdminListInvitesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14799,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14800,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend an invite. This renews the expiry date by seven days and generates a new token for the invite. It also triggers the "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event, \nso if you have a Notification Provider installed that handles this event, a notification should be sent to the email associated with the \ninvite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is resent successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.resend(inviteId)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14801,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14802,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14781,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14782,
							"name": "new AdminInvitesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14783,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14780,
								"name": "AdminInvitesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14781
					]
				},
				{
					"title": "Methods",
					"children": [
						14784,
						14788,
						14792,
						14796,
						14799
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14803,
			"name": "AdminNotesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nNotes are created by admins and can be associated with any resource. For example, an admin can add a note to an order for additional details or remarks."
					}
				]
			},
			"children": [
				{
					"id": 14807,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14808,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Note which can be associated with any resource."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.create({\n  resource_id,\n  resource_type: \"order\",\n  value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14809,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/create-note.d.ts",
											"qualifiedName": "AdminPostNotesReq"
										},
										"name": "AdminPostNotesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14810,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14811,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14812,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.update(noteId, {\n value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14813,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14814,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the note."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/update-note.d.ts",
											"qualifiedName": "AdminPostNotesNoteReq"
										},
										"name": "AdminPostNotesNoteReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14815,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14816,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14817,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Note."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.delete(noteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14818,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14819,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14820,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14821,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.retrieve(noteId)\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14822,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14823,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14824,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14825,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notes. The notes can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`resource_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The notes can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notes with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notes:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list()\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list({\n  limit,\n  offset\n})\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14826,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on retrieved notes."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/list-notes.d.ts",
											"qualifiedName": "AdminGetNotesParams"
										},
										"name": "AdminGetNotesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14827,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesListRes"
										},
										"name": "AdminNotesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14804,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14805,
							"name": "new AdminNotesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14806,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14803,
								"name": "AdminNotesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14804
					]
				},
				{
					"title": "Methods",
					"children": [
						14807,
						14811,
						14816,
						14820,
						14824
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14828,
			"name": "AdminNotificationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notifications`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nNotifications are sent to customers to inform them of new updates. For example, a notification can be sent to the customer when their order is place or its state is updated.\nThe notification's type, such as an email or SMS, is determined by the notification provider installed on the Medusa backend."
					}
				]
			},
			"children": [
				{
					"id": 14832,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14833,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notifications. The notifications can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`event_name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`resource_type`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe notifications can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notifications with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list()\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\"\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\",\n  limit,\n  offset\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14834,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved notifications."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/list-notifications.d.ts",
											"qualifiedName": "AdminGetNotificationsParams"
										},
										"name": "AdminGetNotificationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14835,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsListRes"
										},
										"name": "AdminNotificationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14836,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14837,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend a previously sent notifications, with the same data but optionally to a different address."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the notification's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.resend(notificationId)\n.then(({ notification }) => {\n  console.log(notification.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14838,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The notification's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14839,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details necessary to resend the notification."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/resend-notification.d.ts",
											"qualifiedName": "AdminPostNotificationsNotificationResendReq"
										},
										"name": "AdminPostNotificationsNotificationResendReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14840,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsRes"
										},
										"name": "AdminNotificationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14829,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14830,
							"name": "new AdminNotificationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14831,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14828,
								"name": "AdminNotificationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14829
					]
				},
				{
					"title": "Methods",
					"children": [
						14832,
						14836
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14972,
			"name": "AdminOrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can edit an order to remove, add, or update an item's quantity. When an admin edits an order, they're stored as an "
					},
					{
						"kind": "code",
						"text": "`OrderEdit`"
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to edit an order](https://docs.medusajs.com/modules/orders/admin/edit-order)."
					}
				]
			},
			"children": [
				{
					"id": 14976,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14977,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order edit by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId, {\n  expand: \"order\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14978,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14979,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/get-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsOrderEditParams"
										},
										"name": "GetOrderEditsOrderEditParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14980,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14981,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14982,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of order edits. The order edits can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`order_id`"
									},
									{
										"kind": "text",
										"text": " passed to the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order edits can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of order edits with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list()\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\"\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\",\n  limit,\n  offset\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14983,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to retrieved order edits."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/list-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsParams"
										},
										"name": "GetOrderEditsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14984,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsListRes"
										},
										"name": "AdminOrderEditsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14985,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14986,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.create({ orderId })\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14987,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order edit to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/create-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsReq"
										},
										"name": "AdminPostOrderEditsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14988,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14989,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14990,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.update(orderEditId, {\n  internal_note: \"internal reason XY\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14991,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14992,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in an order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsOrderEditReq"
										},
										"name": "AdminPostOrderEditsOrderEditReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14993,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14994,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14995,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an order edit. Only order edits that have the status "
									},
									{
										"kind": "code",
										"text": "`created`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.delete(orderEditId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14996,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14997,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14998,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14999,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates adding an item in the original order. The item will not be added to the original order until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.addLineItem(orderEditId, {\n  variant_id,\n  quantity\n})\n.then(({ order_edit }) => {\n   console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15000,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to add the line item change to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15001,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item change to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/add-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15002,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15003,
					"name": "deleteItemChange",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15004,
							"name": "deleteItemChange",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item change that indicates the addition, deletion, or update of a line item in the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.deleteItemChange(orderEdit_id, itemChangeId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15005,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15006,
									"name": "itemChangeId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15007,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditItemChangeDeleteRes"
										},
										"name": "AdminOrderEditItemChangeDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15008,
					"name": "requestConfirmation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15009,
							"name": "requestConfirmation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request customer confirmation of an order edit. This would emit the event "
									},
									{
										"kind": "code",
										"text": "`order-edit.requested`"
									},
									{
										"kind": "text",
										"text": " which Notification Providers listen to and send\na notification to the customer about the order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.requestConfirmation(orderEditId)\n.then({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15010,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15011,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15012,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15013,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.cancel(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15014,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to cancel."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15015,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15016,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15017,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Confirm an order edit. This will reflect the changes in the order edit on the associated order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.confirm(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15018,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to confirm."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15019,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15020,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15021,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create or update a line item change in the order edit that indicates addition, deletion, or update of a line item into an original order. Line item changes\nare only reflected on the original order after the order edit is confirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.updateLineItem(orderEditId, lineItemId, {\n  quantity: 5\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15022,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15023,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to create or update its line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15024,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The creation or update of the line item change."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsLineItemReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsLineItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15025,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15026,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15027,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates deleting an item in the original order. The item in the original order will not be deleted until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.removeLineItem(orderEditId, lineItemId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15028,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item change belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15029,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15030,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14973,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14974,
							"name": "new AdminOrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14975,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14972,
								"name": "AdminOrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14973
					]
				},
				{
					"title": "Methods",
					"children": [
						14976,
						14981,
						14985,
						14989,
						14994,
						14998,
						15003,
						15008,
						15012,
						15016,
						15020,
						15026
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14841,
			"name": "AdminOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nOrders are purchases made by customers, typically through a storefront using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 14032
					},
					{
						"kind": "text",
						"text": ". Draft orders created by the admin are also transformed to an Order once the payment is captured.\nManaging orders include managing fulfillment, payment, claims, reservations, and more.\n\nRelated Guide: [How to manage orders](https://docs.medusajs.com/modules/orders/admin/manage-orders)."
					}
				]
			},
			"children": [
				{
					"id": 14845,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14846,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.update(orderId, {\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14847,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14848,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-order.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReq"
										},
										"name": "AdminPostOrdersOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14849,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14850,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14851,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId, {\n  expand: \"customer\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14852,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14853,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "FindParams"
										},
										"name": "FindParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14854,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14855,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14856,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`display_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\"\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\",\n  limit,\n  offset\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14857,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/list-orders.d.ts",
											"qualifiedName": "AdminGetOrdersParams"
										},
										"name": "AdminGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14858,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersListRes"
										},
										"name": "AdminOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14859,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14860,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete an order and change its status. A canceled order can't be completed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.complete(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14861,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14862,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14863,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14864,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture all the payments associated with an order. The payment of canceled orders can't be captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.capturePayment(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14865,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose payments should be captured."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14866,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14867,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14868,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund an amount for an order. The amount must be less than or equal the "
									},
									{
										"kind": "code",
										"text": "`refundable_amount`"
									},
									{
										"kind": "text",
										"text": " of the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.refundPayment(orderId, {\n  amount: 1000,\n  reason: \"Do not like it\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14869,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose customer should be refunded."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14870,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/refund-payment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderRefundsReq"
										},
										"name": "AdminPostOrdersOrderRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14871,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14872,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14873,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment of an Order using the fulfillment provider, and change the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createFulfillment(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14874,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14875,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-fulfillment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14876,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14877,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14878,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelFulfillment(orderId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14879,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14880,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14881,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14882,
					"name": "cancelSwapFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14883,
							"name": "cancelSwapFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwapFulfillment(orderId, swapId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14884,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14885,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the swap the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14886,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14887,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14888,
					"name": "cancelClaimFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14889,
							"name": "cancelClaimFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaimFulfillment(orderId, claimId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14890,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14891,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14892,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14893,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14894,
					"name": "createShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14895,
							"name": "createShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment and mark a fulfillment as shipped. This changes the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createShipment(order_id, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14896,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14897,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShipmentReq"
										},
										"name": "AdminPostOrdersOrderShipmentReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14898,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14899,
					"name": "requestReturn",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14900,
							"name": "requestReturn",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request and create a return for items in an order. If the return shipping method is specified, it will be automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the return under the "
											},
											{
												"kind": "code",
												"text": "`returns`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.requestReturn(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14901,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14902,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/request-return.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReturnsReq"
										},
										"name": "AdminPostOrdersOrderReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14903,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14904,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14905,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order and change its status. This will also cancel any associated fulfillments and payments, and it may fail if the payment or fulfillment Provider \nis unable to cancel the payment/fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancel(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14906,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14907,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14908,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14909,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to an order. If another shipping method exists with the same shipping profile, the previous shipping method will be replaced."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.addShippingMethod(orderId, {\n  price: 1000,\n  option_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14910,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14911,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to be added."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/add-shipping-method.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShippingMethodsReq"
										},
										"name": "AdminPostOrdersOrderShippingMethodsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14912,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14913,
					"name": "archive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14914,
							"name": "archive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Archive an order and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.archive(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14915,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14916,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14917,
					"name": "createSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14918,
							"name": "createSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a swap for an order. This includes creating a return that is associated with the swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwap(orderId, {\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.swaps);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14919,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14920,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsReq"
										},
										"name": "AdminPostOrdersOrderSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14921,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14922,
					"name": "cancelSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14923,
							"name": "cancelSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwap(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14924,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14925,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14926,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14927,
					"name": "fulfillSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14928,
							"name": "fulfillSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Swap and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ". If it requires any additional actions,\nits fulfillment status may change to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillSwap(orderId, swapId, {\n  no_notification: true,\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14929,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14930,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14931,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14932,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14933,
					"name": "createSwapShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14934,
							"name": "createSwapShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for a swap and mark its fulfillment as shipped. This changes the swap's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwapShipment(orderId, swapId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14935,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14936,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14937,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapShipmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14938,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14939,
					"name": "processSwapPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14940,
							"name": "processSwapPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Process a swap's payment either by refunding or issuing a payment. This depends on the "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " of the swap. If "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is negative, the amount is refunded.\nIf "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is positive, the amount is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.processSwapPayment(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14941,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14942,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14943,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14944,
					"name": "createClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14945,
							"name": "createClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a claim for an order. If a return shipping method is specified, a return will also be created and associated with the claim. If the claim's type is "
									},
									{
										"kind": "code",
										"text": "`refund`"
									},
									{
										"kind": "text",
										"text": ",\nthe refund is processed as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claim under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaim(orderId, {\n  type: 'refund',\n  claim_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14946,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14947,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsReq"
										},
										"name": "AdminPostOrdersOrderClaimsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14948,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14949,
					"name": "cancelClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14950,
							"name": "cancelClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim and change its status. A claim can't be canceled if it has a refund, if its fulfillments haven't been canceled, of if its associated return hasn't been canceled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaim(orderId, claimId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14951,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14952,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14953,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14954,
					"name": "updateClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14955,
							"name": "updateClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a claim's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claims under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.updateClaim(orderId, claimId, {\n  no_notification: true\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14956,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14957,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14958,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14959,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14960,
					"name": "fulfillClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14961,
							"name": "fulfillClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Claim, and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": " depending on whether all the items were fulfilled.\nIt may also change the status to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": " if any actions are required."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillClaim(orderId, claimId, {\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14962,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14963,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14964,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14965,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14966,
					"name": "createClaimShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14967,
							"name": "createClaimShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for the claim and mark its fulfillment as shipped. If the shipment is created successfully, this changes the claim's fulfillment status\nto either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on whether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaimShipment(orderId, claimId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14968,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14969,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14970,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimShipmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14971,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14842,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14843,
							"name": "new AdminOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14844,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14841,
								"name": "AdminOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14842
					]
				},
				{
					"title": "Methods",
					"children": [
						14845,
						14850,
						14855,
						14859,
						14863,
						14867,
						14872,
						14877,
						14882,
						14888,
						14894,
						14899,
						14904,
						14908,
						14913,
						14917,
						14922,
						14927,
						14933,
						14939,
						14944,
						14949,
						14954,
						14960,
						14966
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15638,
			"name": "AdminPaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 15642,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15643,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n    console.log(payment_collection.id)\n  })\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"currency\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15644,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15645,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "AdminGetPaymentCollectionsParams"
										},
										"name": "AdminGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15646,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15647,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15648,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.update(paymentCollectionId, {\n  description\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15649,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15650,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/update-payment-collection.d.ts",
											"qualifiedName": "AdminUpdatePaymentCollectionsReq"
										},
										"name": "AdminUpdatePaymentCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15651,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15652,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15653,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment collection. Only payment collections with the statuses "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`not_paid`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.delete(paymentCollectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15654,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15655,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionDeleteRes"
										},
										"name": "AdminPaymentCollectionDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15656,
					"name": "markAsAuthorized",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15657,
							"name": "markAsAuthorized",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the status of a payment collection as "
									},
									{
										"kind": "code",
										"text": "`authorized`"
									},
									{
										"kind": "text",
										"text": ". This will also change the "
									},
									{
										"kind": "code",
										"text": "`authorized_amount`"
									},
									{
										"kind": "text",
										"text": " of the payment collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.markAsAuthorized(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15658,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15659,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15639,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15640,
							"name": "new AdminPaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15641,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15638,
								"name": "AdminPaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15639
					]
				},
				{
					"title": "Methods",
					"children": [
						15642,
						15647,
						15652,
						15656
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15660,
			"name": "AdminPaymentsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.payments`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA payment can be related to an order, swap, return, or more. It can be captured or refunded."
					}
				]
			},
			"children": [
				{
					"id": 15664,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15665,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a payment's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.retrieve(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15666,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15667,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/get-payment.d.ts",
											"qualifiedName": "GetPaymentsParams"
										},
										"name": "GetPaymentsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15668,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15669,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15670,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.capturePayment(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15671,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15672,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15673,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15674,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund a payment. The payment must be captured first."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refund's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { RefundReason } from \"@medusajs/medusa\";\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.refundPayment(paymentId, {\n  amount: 1000,\n  reason: RefundReason.RETURN,\n  note: \"Do not like it\",\n})\n.then(({ refund }) => {\n  console.log(refund.amount);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15675,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15676,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/refund-payment.d.ts",
											"qualifiedName": "AdminPostPaymentRefundsReq"
										},
										"name": "AdminPostPaymentRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15677,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminRefundRes"
										},
										"name": "AdminRefundRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15661,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15662,
							"name": "new AdminPaymentsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15663,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15660,
								"name": "AdminPaymentsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15661
					]
				},
				{
					"title": "Methods",
					"children": [
						15664,
						15669,
						15673
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15031,
			"name": "AdminPriceListResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.priceLists`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA price list are special prices applied to products based on a set of conditions, such as customer group.\n\nRelated Guide: [How to manage price lists](https://docs.medusajs.com/modules/price-lists/admin/manage-price-lists)."
					}
				]
			},
			"children": [
				{
					"id": 15035,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15036,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nmedusa.admin.priceLists.create({\n  name: \"New Price List\",\n  description: \"A new price list\",\n  type: PriceListType.SALE,\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15037,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price list to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/create-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15038,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15039,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15040,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.update(priceListId, {\n  name: \"New Price List\"\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15041,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15042,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/update-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15043,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15044,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15045,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a price list and its associated prices."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.delete(priceListId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15046,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15047,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15048,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15049,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.retrieve(priceListId)\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15050,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15051,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15052,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15053,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of price lists. The price lists can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The price lists can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of price lists with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list()\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\"\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\",\n  limit,\n  offset\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15054,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-lists.d.ts",
											"qualifiedName": "AdminGetPriceListPaginationParams"
										},
										"name": "AdminGetPriceListPaginationParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15055,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsListRes"
										},
										"name": "AdminPriceListsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15056,
					"name": "listProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15057,
							"name": "listProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products in a price list:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId)\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15058,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15059,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-list-products.d.ts",
											"qualifiedName": "AdminGetPriceListsPriceListProductsParams"
										},
										"name": "AdminGetPriceListsPriceListProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15060,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsProductsListRes"
										},
										"name": "AdminPriceListsProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15061,
					"name": "addPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15062,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add or update a list of prices in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.addPrices(priceListId, {\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15063,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15064,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of prices to add or update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/add-prices-batch.d.ts",
											"qualifiedName": "AdminPostPriceListPricesPricesReq"
										},
										"name": "AdminPostPriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15065,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15066,
					"name": "deletePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15067,
							"name": "deletePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a list of prices in a price list"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deletePrices(priceListId, {\n  price_ids: [\n    price_id\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15068,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15069,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The prices to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListPricesPricesReq"
										},
										"name": "AdminDeletePriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15070,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15071,
					"name": "deleteProductPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15072,
							"name": "deleteProductPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductPrices(priceListId, productId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15073,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15074,
									"name": "productId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15075,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15076,
					"name": "deleteVariantPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15077,
							"name": "deleteVariantPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product variant in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteVariantPrices(priceListId, variantId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15078,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15079,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15080,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15081,
					"name": "deleteProductsPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15082,
							"name": "deleteProductsPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices associated with multiple products in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductsPrices(priceListId, {\n  product_ids: [\n    productId1,\n    productId2,\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15083,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15084,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products whose prices should be deleted."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-products-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListsPriceListProductsPricesBatchReq"
										},
										"name": "AdminDeletePriceListsPriceListProductsPricesBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15085,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15032,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15033,
							"name": "new AdminPriceListResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15034,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15031,
								"name": "AdminPriceListResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15032
					]
				},
				{
					"title": "Methods",
					"children": [
						15035,
						15039,
						15044,
						15048,
						15052,
						15056,
						15061,
						15066,
						15071,
						15076,
						15081
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15678,
			"name": "AdminProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nProducts can be categoriezed into categories. A product can be added into more than one category.\n\nRelated Guide: [How to manage product categories](https://docs.medusajs.com/modules/products/admin/manage-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 15682,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15683,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId, {\n  expand: \"category_children\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15684,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15685,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/get-product-category.d.ts",
											"qualifiedName": "AdminGetProductCategoryParams"
										},
										"name": "AdminGetProductCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15686,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15687,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15688,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.create({\n  name: \"Skinny Jeans\",\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15689,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product category's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/create-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesReq"
										},
										"name": "AdminPostProductCategoriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15690,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15691,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15692,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Updates a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.update(productCategoryId, {\n  name: \"Skinny Jeans\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15693,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15694,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/update-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryReq"
										},
										"name": "AdminPostProductCategoriesCategoryReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15695,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15696,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15697,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product category:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15698,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/list-product-categories.d.ts",
											"qualifiedName": "AdminGetProductCategoriesParams"
										},
										"name": "AdminGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15699,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesListRes"
										},
										"name": "AdminProductCategoriesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15700,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15701,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product category. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.delete(productCategoryId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15702,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15703,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15704,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15705,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.removeProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15706,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15707,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminDeleteProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15708,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15709,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15710,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.addProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15711,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15712,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/add-products-batch.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminPostProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15713,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15679,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15680,
							"name": "new AdminProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15681,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15678,
								"name": "AdminProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15679
					]
				},
				{
					"title": "Methods",
					"children": [
						15682,
						15687,
						15691,
						15696,
						15700,
						15704,
						15709
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15086,
			"name": "AdminProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nProduct tags are string values created when you create or update a product with a new tag.\nProducts can have more than one tag, and products can share tags. This allows admins to associate products to similar tags that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 15090,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15091,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15092,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/list-product-tags.d.ts",
											"qualifiedName": "AdminGetProductTagsParams"
										},
										"name": "AdminGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/index.d.ts",
											"qualifiedName": "AdminProductTagsListRes"
										},
										"name": "AdminProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15087,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15088,
							"name": "new AdminProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15089,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15086,
								"name": "AdminProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15087
					]
				},
				{
					"title": "Methods",
					"children": [
						15090
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15093,
			"name": "AdminProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nProduct types are string values created when you create or update a product with a new type.\nProducts can have one type, and products can share types. This allows admins to associate products with a type that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 15097,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15098,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15099,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/list-product-types.d.ts",
											"qualifiedName": "AdminGetProductTypesParams"
										},
										"name": "AdminGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15100,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/index.d.ts",
											"qualifiedName": "AdminProductTypesListRes"
										},
										"name": "AdminProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15094,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15095,
							"name": "new AdminProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15096,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15093,
								"name": "AdminProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15094
					]
				},
				{
					"title": "Methods",
					"children": [
						15097
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15101,
			"name": "AdminProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-gift-card-product) in a store.\n\nRelated Guide: [How to manage products](https://docs.medusajs.com/modules/products/admin/manage-products)."
					}
				]
			},
			"children": [
				{
					"id": 15105,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15106,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a new Product. This API Route can also be used to create a gift card if the "
									},
									{
										"kind": "code",
										"text": "`is_giftcard`"
									},
									{
										"kind": "text",
										"text": " field is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.create({\n  title: \"Shirt\",\n  is_giftcard: false,\n  discountable: true\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15107,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-product.d.ts",
											"qualifiedName": "AdminPostProductsReq"
										},
										"name": "AdminPostProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15108,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15109,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15110,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15111,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15112,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15113,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15114,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.update(productId, {\n  title: \"Shirt\",\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15115,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15116,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-product.d.ts",
											"qualifiedName": "AdminPostProductsProductReq"
										},
										"name": "AdminPostProductsProductReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15117,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15118,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15119,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product and its associated product variants and options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.delete(productId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15120,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15121,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteRes"
										},
										"name": "AdminProductsDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15122,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15123,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15124,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-products.d.ts",
											"qualifiedName": "AdminGetProductsParams"
										},
										"name": "AdminGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15125,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListRes"
										},
										"name": "AdminProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15129,
					"name": "listTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15130,
							"name": "listTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Product Tags with how many times each is used in products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listTags()\n.then(({ tags }) => {\n  console.log(tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15131,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListTagsRes"
										},
										"name": "AdminProductsListTagsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15132,
					"name": "setMetadata",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15133,
							"name": "setMetadata",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the metadata of a product. It can be any key-value pair, which allows adding custom data to a product. Learn about how you can update and delete the metadata attribute\n[here](https://docs.medusajs.com/development/entities/overview#metadata-attribute)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.setMetadata(productId, {\n  key: \"test\",\n  value: \"true\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15134,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15135,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The metadata details to add, update, or delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/set-metadata.d.ts",
											"qualifiedName": "AdminPostProductsProductMetadataReq"
										},
										"name": "AdminPostProductsProductMetadataReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15136,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15137,
					"name": "createVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15138,
							"name": "createVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product variant associated with a product. Each product variant must have a unique combination of product option values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.createVariant(productId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15139,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15140,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsReq"
										},
										"name": "AdminPostProductsProductVariantsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15141,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15142,
					"name": "updateVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15143,
							"name": "updateVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateVariant(productId, variantId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15144,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15145,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15146,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsVariantReq"
										},
										"name": "AdminPostProductsProductVariantsVariantReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15147,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15148,
					"name": "deleteVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15149,
							"name": "deleteVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.deleteVariant(productId, variantId)\n.then(({ variant_id, object, deleted, product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15150,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15151,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15152,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteVariantRes"
										},
										"name": "AdminProductsDeleteVariantRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15153,
					"name": "listVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15154,
							"name": "listVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the product variants associated with a product. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`manage_inventory`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listVariants(productId, {\n  limit: 10,\n})\n.then(({ variants, limit, offset, count }) => {\n console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15155,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variants belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15156,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants. If undefined, the first 100 records are retrieved."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-variants.d.ts",
											"qualifiedName": "AdminGetProductsVariantsParams"
										},
										"name": "AdminGetProductsVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15157,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListVariantsRes"
										},
										"name": "AdminProductsListVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15158,
					"name": "addOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15159,
							"name": "addOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a product option to a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.addOption(productId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15160,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15161,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The option to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/add-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsReq"
										},
										"name": "AdminPostProductsProductOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15162,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15163,
					"name": "updateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15164,
							"name": "updateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateOption(productId, optionId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15165,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15166,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15167,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsOption"
										},
										"name": "AdminPostProductsProductOptionsOption",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15168,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15169,
					"name": "deleteOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15170,
							"name": "deleteOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product option. If there are product variants that use this product option, they must be deleted before deleting the product option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15171,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15172,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15173,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteOptionRes"
										},
										"name": "AdminProductsDeleteOptionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15102,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15103,
							"name": "new AdminProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15104,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15101,
								"name": "AdminProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15102
					]
				},
				{
					"title": "Methods",
					"children": [
						15105,
						15109,
						15113,
						15118,
						15122,
						15129,
						15132,
						15137,
						15142,
						15148,
						15153,
						15158,
						15163,
						15169
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15174,
			"name": "AdminPublishableApiKeyResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.publishableApiKeys`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nPublishable API Keys can be used to scope Store API calls with an API key, determining what resources are retrieved when querying the API.\nFor example, a publishable API key can be associated with one or more sales channels. When it is passed in the header of a request to the List Product store API Route,\nthe sales channels are inferred from the key and only products associated with those sales channels are retrieved.\nAdmins can manage publishable API keys and their associated resources. Currently, only Sales Channels are supported as a resource.\n\nRelated Guide: [How to manage publishable API keys](https://docs.medusajs.com/development/publishable-api-keys/admin/manage-publishable-api-keys)."
					}
				]
			},
			"children": [
				{
					"id": 15178,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15179,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishable API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.retrieve(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15180,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15181,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15182,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15183,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of publishable API keys. The publishable API keys can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The publishable API keys can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of publishable API keys with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list publishable API keys:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list()\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list({\n  limit,\n  offset\n})\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15184,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved publishable API keys."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-keys.d.ts",
											"qualifiedName": "GetPublishableApiKeysParams"
										},
										"name": "GetPublishableApiKeysParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15185,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListRes"
										},
										"name": "AdminPublishableApiKeysListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15186,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15187,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.create({\n title\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15188,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The publishable API key to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/create-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysReq"
										},
										"name": "AdminPostPublishableApiKeysReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15189,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15190,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15191,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.update(publishableApiKeyId, {\n  title: \"new title\"\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15192,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15193,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/update-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysPublishableApiKeyReq"
										},
										"name": "AdminPostPublishableApiKeysPublishableApiKeyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15194,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15195,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15196,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a publishable API key. Associated resources, such as sales channels, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.delete(publishableApiKeyId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15197,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15198,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15199,
					"name": "revoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15200,
							"name": "revoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Revoke a publishable API key. Revoking the publishable API Key can't be undone, and the key can't be used in future requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.revoke(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15201,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15202,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15203,
					"name": "addSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15204,
							"name": "addSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of sales channels to a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.addSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15205,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15206,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/add-channels-batch.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminPostPublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15207,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15208,
					"name": "deleteSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15209,
							"name": "deleteSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of sales channels from a publishable API key. This doesn't delete the sales channels and only removes the association between them and the publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.deleteSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15210,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15211,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to delete from the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/delete-channels-batch.d.ts",
											"qualifiedName": "AdminDeletePublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminDeletePublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15212,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15213,
					"name": "listSalesChannels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15214,
							"name": "listSalesChannels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the sales channels associated with a publishable API key. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.listSalesChannels()\n.then(({ sales_channels }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15215,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15216,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-key-sales-channels.d.ts",
											"qualifiedName": "GetPublishableApiKeySalesChannelsParams"
										},
										"name": "GetPublishableApiKeySalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15217,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListSalesChannelsRes"
										},
										"name": "AdminPublishableApiKeysListSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15175,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15176,
							"name": "new AdminPublishableApiKeyResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15177,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15174,
								"name": "AdminPublishableApiKeyResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15175
					]
				},
				{
					"title": "Methods",
					"children": [
						15178,
						15182,
						15186,
						15190,
						15195,
						15199,
						15203,
						15208,
						15213
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15218,
			"name": "AdminRegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nAdmins can manage these regions, their providers, and more.\n\nRelated Guide: [How to manage regions](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-regions)."
					}
				]
			},
			"children": [
				{
					"id": 15222,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15223,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.create({\n  name: \"Europe\",\n  currency_code: \"eur\",\n  tax_rate: 0,\n  payment_providers: [\n    \"manual\"\n  ],\n  fulfillment_providers: [\n    \"manual\"\n  ],\n  countries: [\n    \"DK\"\n  ]\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15224,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/create-region.d.ts",
											"qualifiedName": "AdminPostRegionsReq"
										},
										"name": "AdminPostRegionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15225,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15226,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15227,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.update(regionId, {\n  name: \"Europe\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15228,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15229,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the region."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/update-region.d.ts",
											"qualifiedName": "AdminPostRegionsRegionReq"
										},
										"name": "AdminPostRegionsRegionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15230,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15231,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15232,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a region. Associated resources, such as providers or currencies are not deleted. Associated tax rates are deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.delete(regionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15233,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15234,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15235,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15236,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15237,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15238,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Query params"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/get-region.d.ts",
											"qualifiedName": "AdminGetRegionsRegionParams"
										},
										"name": "AdminGetRegionsRegionParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15239,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15240,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15241,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Regions. The regions can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The regions can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list regions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list()\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list({\n  limit,\n  offset\n})\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15242,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved regions."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/list-regions.d.ts",
											"qualifiedName": "AdminGetRegionsParams"
										},
										"name": "AdminGetRegionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15243,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsListRes"
										},
										"name": "AdminRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15244,
					"name": "addCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15245,
							"name": "addCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a country to the list of countries in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addCountry(regionId, {\n  country_code: \"dk\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15246,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15247,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The country to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-country.d.ts",
											"qualifiedName": "AdminPostRegionsRegionCountriesReq"
										},
										"name": "AdminPostRegionsRegionCountriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15248,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15249,
					"name": "deleteCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15250,
							"name": "deleteCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a country from the list of countries in a region. The country will still be available in the system, and it can be used in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteCountry(regionId, \"dk\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15251,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15252,
									"name": "country_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the country to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15253,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15254,
					"name": "addFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15255,
							"name": "addFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a fulfillment provider to the list of fulfullment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addFulfillmentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15256,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15257,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-fulfillment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionFulfillmentProvidersReq"
										},
										"name": "AdminPostRegionsRegionFulfillmentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15258,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15259,
					"name": "deleteFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15260,
							"name": "deleteFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a fulfillment provider from a region. The fulfillment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteFulfillmentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15261,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15262,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the fulfillment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15263,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15264,
					"name": "retrieveFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15265,
							"name": "retrieveFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of fulfillment options available in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of fulfillment options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieveFulfillmentOptions(regionId)\n.then(({ fulfillment_options }) => {\n  console.log(fulfillment_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15266,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15267,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminGetRegionsRegionFulfillmentOptionsRes"
										},
										"name": "AdminGetRegionsRegionFulfillmentOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15268,
					"name": "addPaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15269,
							"name": "addPaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a payment provider to the list of payment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addPaymentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15270,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15271,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-payment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionPaymentProvidersReq"
										},
										"name": "AdminPostRegionsRegionPaymentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15272,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15273,
					"name": "deletePaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15274,
							"name": "deletePaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment provider from a region. The payment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deletePaymentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15275,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15276,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15277,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15219,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15220,
							"name": "new AdminRegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15221,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15218,
								"name": "AdminRegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15219
					]
				},
				{
					"title": "Methods",
					"children": [
						15222,
						15226,
						15231,
						15235,
						15240,
						15244,
						15249,
						15254,
						15259,
						15264,
						15268,
						15273
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15278,
			"name": "AdminReservationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.reservations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReservations, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), are quantities of an item that are reserved, typically when an order is placed but not yet fulfilled.\nReservations can be associated with any resources, but commonly with line items of an order.\n\nRelated Guide: [How to manage item allocations in orders](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-item-allocations-in-orders)."
					}
				]
			},
			"children": [
				{
					"id": 15282,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15283,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.retrieve(reservationId)\n.then(({ reservation }) => {\n  console.log(reservation.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15284,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15285,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15286,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15287,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of reservations. The reservations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The reservations can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of reservations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list()\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\"\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\",\n  limit,\n  offset\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15288,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination parameters to apply on the retrieved reservations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/list-reservations.d.ts",
											"qualifiedName": "AdminGetReservationsParams"
										},
										"name": "AdminGetReservationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15289,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsListRes"
										},
										"name": "AdminReservationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15290,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15291,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reservation which can be associated with any resource, such as an order's line item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.create({\n  line_item_id: \"item_123\",\n  location_id: \"loc_123\",\n  inventory_item_id: \"iitem_123\",\n  quantity: 1\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15292,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/create-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReq"
										},
										"name": "AdminPostReservationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15293,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15294,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15295,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.update(reservationId, {\n  quantity: 3\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15296,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15297,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the reservation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/update-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReservationReq"
										},
										"name": "AdminPostReservationsReservationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15298,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15299,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15300,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a reservation. Associated resources, such as the line item, will not be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.delete(reservationId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15301,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15302,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15279,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15280,
							"name": "new AdminReservationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15281,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15278,
								"name": "AdminReservationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15279
					]
				},
				{
					"title": "Methods",
					"children": [
						15282,
						15286,
						15290,
						15294,
						15299
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15303,
			"name": "AdminReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created.\nAdmins can manage available return reasons, and they can be used by both admins and customers when creating a return.\n\nRelated Guide: [How to manage return reasons](https://docs.medusajs.com/modules/orders/admin/manage-returns#manage-return-reasons)."
					}
				]
			},
			"children": [
				{
					"id": 15307,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15308,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.create({\n  label: \"Damaged\",\n  value: \"damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15309,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/create-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReq"
										},
										"name": "AdminPostReturnReasonsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15310,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15311,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15312,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.update(returnReasonId, {\n  label: \"Damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15313,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15314,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the return reason."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/update-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReasonReq"
										},
										"name": "AdminPostReturnReasonsReasonReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15315,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15316,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15317,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.delete(returnReasonId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15318,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15319,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15320,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15321,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.retrieve(returnReasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15322,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15323,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15324,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15325,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of return reasons."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15326,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsListRes"
										},
										"name": "AdminReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15304,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15305,
							"name": "new AdminReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15306,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15303,
								"name": "AdminReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15304
					]
				},
				{
					"title": "Methods",
					"children": [
						15307,
						15311,
						15316,
						15320,
						15324
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15327,
			"name": "AdminReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA return can be created by a customer or an admin to return items in an order.\nAdmins can manage these returns and change their state.\n\nRelated Guide: [How to manage returns](https://docs.medusajs.com/modules/orders/admin/manage-returns)."
					}
				]
			},
			"children": [
				{
					"id": 15331,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15332,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a return as canceled. The return can be associated with an order, claim, or swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order associated with the return. If the return is associated with a claim or a swap, then it'll be the order\nthat the claim or swap belongs to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.cancel(returnId)\n.then(({ order }) => {\n  console.log(order.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15333,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15334,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsCancelRes"
										},
										"name": "AdminReturnsCancelRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15335,
					"name": "receive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15336,
							"name": "receive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a return as received. This also updates the status of associated order, claim, or swap accordingly."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.receive(returnId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15337,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15338,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The received return."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/receive-return.d.ts",
											"qualifiedName": "AdminPostReturnsReturnReceiveReq"
										},
										"name": "AdminPostReturnsReturnReceiveReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15339,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsRes"
										},
										"name": "AdminReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15340,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15341,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Returns. The returns can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of returns with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list returns:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list()\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list({\n  limit,\n  offset\n})\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15342,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Paignation configurations to be applied on the retrieved returns."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/list-returns.d.ts",
											"qualifiedName": "AdminGetReturnsParams"
										},
										"name": "AdminGetReturnsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15343,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsListRes"
										},
										"name": "AdminReturnsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15328,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15329,
							"name": "new AdminReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15330,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15327,
								"name": "AdminReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15328
					]
				},
				{
					"title": "Methods",
					"children": [
						15331,
						15335,
						15340
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15344,
			"name": "AdminSalesChannelsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.salesChannels`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA sales channel indicates a channel where products can be sold in. For example, a webshop or a mobile app.\nAdmins can manage sales channels and the products available in them.\n\nRelated Guide: [How to manage sales channels](https://docs.medusajs.com/modules/sales-channels/admin/manage)."
					}
				]
			},
			"children": [
				{
					"id": 15348,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15349,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.retrieve(salesChannelId)\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15350,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15351,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15352,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15353,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.create({\n  name: \"App\",\n  description: \"Mobile app\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15354,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/create-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsReq"
										},
										"name": "AdminPostSalesChannelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15355,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15356,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15357,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.update(salesChannelId, {\n  name: \"App\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15358,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15359,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/update-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsSalesChannelReq"
										},
										"name": "AdminPostSalesChannelsSalesChannelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15360,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15361,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15362,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of sales channels. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The sales channels can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list()\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\"\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\",\n  limit,\n  offset\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15363,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/list-sales-channels.d.ts",
											"qualifiedName": "AdminGetSalesChannelsParams"
										},
										"name": "AdminGetSalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15364,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsListRes"
										},
										"name": "AdminSalesChannelsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15365,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15366,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a sales channel. Associated products, stock locations, and other resources are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.delete(salesChannelId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15367,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15368,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15369,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15370,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a sales channel. This doesn't delete the product. It only removes the association between the product and the sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15371,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15372,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminDeleteSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15373,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15374,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15375,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15376,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15377,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/add-product-batch.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminPostSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15378,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15379,
					"name": "addLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15380,
							"name": "addLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Associate a stock location with a sales channel. It requires the \n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module to be installed in\nyour Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addLocation(salesChannelId, {\n  location_id: \"loc_123\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15381,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15382,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to associate with the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/associate-stock-location.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminPostSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15383,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15384,
					"name": "removeLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15385,
							"name": "removeLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a stock location from a sales channel. This only removes the association between the stock location and the sales channel. It does not delete the stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeLocation(salesChannelId, {\n  location_id: \"loc_id\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15386,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15387,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/remove-stock-location.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminDeleteSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15388,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15345,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15346,
							"name": "new AdminSalesChannelsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15347,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15344,
								"name": "AdminSalesChannelsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15345
					]
				},
				{
					"title": "Methods",
					"children": [
						15348,
						15352,
						15356,
						15361,
						15365,
						15369,
						15374,
						15379,
						15384
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15389,
			"name": "AdminShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\nAdmins can create an unlimited number of shipping options, each associated with a shipping profile and fulfillment provider, among other resources.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 15393,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15394,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.create({\n  name: \"PostFake\",\n  region_id,\n  provider_id,\n  data: {\n  },\n  price_type: \"flat_rate\"\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15395,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/create-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsReq"
										},
										"name": "AdminPostShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15396,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15397,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15398,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.update(optionId, {\n  name: \"PostFake\",\n  requirements: [\n    {\n      id,\n      type: \"max_subtotal\",\n      amount: 1000\n    }\n  ]\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15399,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15400,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/update-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsOptionReq"
										},
										"name": "AdminPostShippingOptionsOptionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15401,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15402,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15403,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping option. Once deleted, it can't be used when creating orders or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.delete(optionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15404,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15406,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15407,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.retrieve(optionId)\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15408,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15409,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15410,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15411,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_return`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.list()\n.then(({ shipping_options, count }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15412,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/list-shipping-options.d.ts",
											"qualifiedName": "AdminGetShippingOptionsParams"
										},
										"name": "AdminGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15413,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsListRes"
										},
										"name": "AdminShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15390,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15391,
							"name": "new AdminShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15392,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15389,
								"name": "AdminShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15390
					]
				},
				{
					"title": "Methods",
					"children": [
						15393,
						15397,
						15402,
						15406,
						15410
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15414,
			"name": "AdminShippingProfilesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingProfiles`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping profile is used to group products that can be shipped in the same manner.\nThey are created by the admin and they're not associated with a fulfillment provider.\n\nRelated Guide: [Shipping Profile architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-profile)."
					}
				]
			},
			"children": [
				{
					"id": 15418,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15419,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping profile."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { ShippingProfileType } from \"@medusajs/medusa\"\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.create({\n  name: \"Large Products\",\n  type: ShippingProfileType.DEFAULT\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15420,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/create-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesReq"
										},
										"name": "AdminPostShippingProfilesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15421,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15422,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15423,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.update(shippingProfileId, {\n  name: 'Large Products'\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15424,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15425,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping profile."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/update-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesProfileReq"
										},
										"name": "AdminPostShippingProfilesProfileReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15426,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15427,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15428,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping profile. Associated shipping options are deleted as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.delete(profileId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15429,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15430,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15431,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15432,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.retrieve(profileId)\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15433,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15434,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15435,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15436,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping profiles."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping profiles."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.list()\n.then(({ shipping_profiles }) => {\n  console.log(shipping_profiles.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15437,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesListRes"
										},
										"name": "AdminShippingProfilesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15415,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15416,
							"name": "new AdminShippingProfilesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15417,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15414,
								"name": "AdminShippingProfilesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15415
					]
				},
				{
					"title": "Methods",
					"children": [
						15418,
						15422,
						15427,
						15431,
						15435
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15438,
			"name": "AdminStockLocationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations). To use these API Routes, make sure to install the\n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.stockLocations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA stock location, provided by the [Stock Location module](https://docs.medusajs.com/modules/multiwarehouse/stock-location-module), indicates a physical address that stock-kept items, such as physical products, can be stored in.\nAn admin can create and manage available stock locations.\n\nRelated Guide: [How to manage stock locations](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-stock-locations)."
					}
				]
			},
			"children": [
				{
					"id": 15442,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15443,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.create({\n  name: \"Main Warehouse\",\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15444,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/create-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsReq"
										},
										"name": "AdminPostStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15445,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15446,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15447,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.retrieve(stockLocationId)\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15448,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15449,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15450,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15451,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.update(stockLocationId, {\n  name: 'Main Warehouse'\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15452,
									"name": "stockLocationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15453,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to be updated in the stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/update-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsLocationReq"
										},
										"name": "AdminPostStockLocationsLocationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15454,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15455,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15456,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.delete(stockLocationId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15457,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15458,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/common/common.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15459,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15460,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of stock locations. The stock locations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe stock locations can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of stock locations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list()\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\"\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\",\n  limit,\n  offset\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15461,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/list-stock-locations.d.ts",
											"qualifiedName": "AdminGetStockLocationsParams"
										},
										"name": "AdminGetStockLocationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15462,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsListRes"
										},
										"name": "AdminStockLocationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15439,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15440,
							"name": "new AdminStockLocationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15441,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15438,
								"name": "AdminStockLocationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15439
					]
				},
				{
					"title": "Methods",
					"children": [
						15442,
						15446,
						15450,
						15455,
						15459
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15463,
			"name": "AdminStoresResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.store`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA store indicates the general configurations and details about the commerce store. By default, there's only one store in the Medusa backend.\nAdmins can manage the store and its details or configurations."
					}
				]
			},
			"children": [
				{
					"id": 15467,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15468,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.update({\n  name: \"Medusa Store\"\n})\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15469,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/update-store.d.ts",
											"qualifiedName": "AdminPostStoreReq"
										},
										"name": "AdminPostStoreReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15470,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15471,
					"name": "addCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15472,
							"name": "addCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a currency code to the available currencies in a store. This doesn't create new currencies, as currencies are defined within the Medusa backend. \nTo create a currency, you can [create a migration](https://docs.medusajs.com/development/entities/migrations/create) that inserts the currency into the database."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.addCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15473,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to add to the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15474,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15475,
					"name": "deleteCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15476,
							"name": "deleteCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a currency code from the available currencies in a store. This doesn't completely delete the currency and it can be added again later to the store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.deleteCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15477,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to delete from the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15478,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15479,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15480,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.retrieve()\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15481,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminExtendedStoresRes"
										},
										"name": "AdminExtendedStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15482,
					"name": "listPaymentProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15483,
							"name": "listPaymentProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available payment providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of payment providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listPaymentProviders()\n.then(({ payment_providers }) => {\n  console.log(payment_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15484,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminPaymentProvidersList"
										},
										"name": "AdminPaymentProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15485,
					"name": "listTaxProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15486,
							"name": "listTaxProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available tax providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listTaxProviders()\n.then(({ tax_providers }) => {\n  console.log(tax_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15487,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminTaxProvidersList"
										},
										"name": "AdminTaxProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15464,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15465,
							"name": "new AdminStoresResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15466,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15463,
								"name": "AdminStoresResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15464
					]
				},
				{
					"title": "Methods",
					"children": [
						15467,
						15471,
						15475,
						15479,
						15482,
						15485
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15488,
			"name": "AdminSwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to manage swaps](https://docs.medusajs.com/modules/orders/admin/manage-swaps)"
					}
				]
			},
			"children": [
				{
					"id": 15492,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15493,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a swap's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.retrieve(swapId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15494,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15495,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsRes"
										},
										"name": "AdminSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15496,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15497,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of swaps. The swaps can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of swaps with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list swaps:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list()\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list({\n  limit,\n  offset\n})\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15498,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pagination configurations to apply on the retrieved swaps."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/list-swaps.d.ts",
											"qualifiedName": "AdminGetSwapsParams"
										},
										"name": "AdminGetSwapsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15499,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsListRes"
										},
										"name": "AdminSwapsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15489,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15490,
							"name": "new AdminSwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15491,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15488,
								"name": "AdminSwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15489
					]
				},
				{
					"title": "Methods",
					"children": [
						15492,
						15496
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15500,
			"name": "AdminTaxRatesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.taxRates`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nEach region has at least a default tax rate. Admins can create and manage additional tax rates that can be applied for certain conditions, such as for specific product types.\n\nRelated Guide: [How to manage tax rates](https://docs.medusajs.com/modules/taxes/admin/manage-tax-rates)."
					}
				]
			},
			"children": [
				{
					"id": 15504,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15505,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a tax rate by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId)\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId, {\n  expand: \"shipping_options\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15506,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15507,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15508,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15509,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15510,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of tax rates. The tax rates can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`rate`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The tax rates can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax rates with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list()\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"]\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"],\n  limit,\n  offset\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15511,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/list-tax-rates.d.ts",
											"qualifiedName": "AdminGetTaxRatesParams"
										},
										"name": "AdminGetTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15512,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesListRes"
										},
										"name": "AdminTaxRatesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15513,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15514,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.create({\n  code: \"TEST\",\n  name: \"New Tax Rate\",\n  region_id\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15515,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesReq"
										},
										"name": "AdminPostTaxRatesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15516,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesParams"
										},
										"name": "AdminPostTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15517,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15518,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15519,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.update(taxRateId, {\n  name: \"New Tax Rate\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15520,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15521,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateReq"
										},
										"name": "AdminPostTaxRatesTaxRateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15522,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateParams"
										},
										"name": "AdminPostTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15523,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15524,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15525,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15526,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15527,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15528,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsParams"
										},
										"name": "AdminPostTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15529,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15530,
					"name": "addProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15531,
							"name": "addProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add product types to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15532,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15533,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-product-types.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15534,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15535,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15536,
					"name": "addShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15537,
							"name": "addShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add shipping options to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15538,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15539,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15540,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15541,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15542,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15543,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove products from a tax rate. This only removes the association between the products and the tax rate. It does not delete the products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15544,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15545,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15546,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15547,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15548,
					"name": "removeProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15549,
							"name": "removeProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove product types from a tax rate. This only removes the association between the product types and the tax rate. It does not delete the product types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15550,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15551,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15552,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15553,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15554,
					"name": "removeShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15555,
							"name": "removeShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove shipping options from a tax rate. This only removes the association between the shipping options and the tax rate. It does not delete the shipping options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15556,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15557,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15558,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15559,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15560,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15561,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a tax rate. Resources associated with the tax rate, such as products or product types, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.delete(taxRateId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15562,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15563,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15501,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15502,
							"name": "new AdminTaxRatesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15503,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15500,
								"name": "AdminTaxRatesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15501
					]
				},
				{
					"title": "Methods",
					"children": [
						15504,
						15509,
						15513,
						15518,
						15524,
						15530,
						15536,
						15542,
						15548,
						15554,
						15560
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15564,
			"name": "AdminUploadsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.uploads`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nThe methods in this class are used to upload any type of resources. For example, they can be used to upload CSV files that are used to import products into the store.\n\nRelated Guide: [How to upload CSV file when importing a product](https://docs.medusajs.com/modules/products/admin/import-products#1-upload-csv-file)."
					}
				]
			},
			"children": [
				{
					"id": 15571,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15572,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file or multiple files to a public bucket or storage. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.create(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15573,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file(s) to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15574,
					"name": "createProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15575,
							"name": "createProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file to an ACL or a non-public bucket. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.createProtected(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15576,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15577,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15578,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an uploaded file from storage. The file is deleted using the installed file service on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.delete({\n  file_key\n})\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15579,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/delete-upload.d.ts",
											"qualifiedName": "AdminDeleteUploadsReq"
										},
										"name": "AdminDeleteUploadsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15580,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15581,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15582,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create and retrieve a presigned or public download URL for a file. The URL creation is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the download URL details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.getPresignedDownloadUrl({\n  file_key\n})\n.then(({ download_url }) => {\n  console.log(download_url);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15583,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to get a presigned download URL for."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/get-download-url.d.ts",
											"qualifiedName": "AdminPostUploadsDownloadUrlReq"
										},
										"name": "AdminPostUploadsDownloadUrlReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15584,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsDownloadUrlRes"
										},
										"name": "AdminUploadsDownloadUrlRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15585,
					"name": "_createPayload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 15586,
							"name": "_createPayload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 15587,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "FormData"
								},
								"name": "FormData",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 15565,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15566,
							"name": "new AdminUploadsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15567,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15564,
								"name": "AdminUploadsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15565
					]
				},
				{
					"title": "Methods",
					"children": [
						15571,
						15574,
						15577,
						15581,
						15585
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15588,
			"name": "AdminUsersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.users`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nA store can have more than one user, each having the same privileges. Admins can manage users, their passwords, and more.\n\nRelated Guide: [How to manage users](https://docs.medusajs.com/modules/users/admin/manage-users)."
					}
				]
			},
			"children": [
				{
					"id": 15592,
					"name": "sendResetPasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15593,
							"name": "sendResetPasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a password token for an admin user with a given email. This also triggers the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event. So, if you have a Notification Service installed\nthat can handle this event, a notification, such as an email, will be sent to the user. The token is triggered as part of the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event's payload.\nThat token must be used later to reset the password using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 15596,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the token is generated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.sendResetPasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15594,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password-token.d.ts",
											"qualifiedName": "AdminResetPasswordTokenRequest"
										},
										"name": "AdminResetPasswordTokenRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15595,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15596,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15597,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset the password of an admin user using their reset password token. You must generate a reset password token first for the user using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "sendResetPasswordToken",
										"target": 15592,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method,\nthen use that token to reset the password in this method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.resetPassword({\n  token: \"supersecrettoken\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15598,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password.d.ts",
											"qualifiedName": "AdminResetPasswordRequest"
										},
										"name": "AdminResetPasswordRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15599,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15600,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15601,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.retrieve(userId)\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15602,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15603,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15604,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15605,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an admin user. The user has the same privileges as all admin users, and will be able to authenticate and perform admin functionalities right after creation."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.create({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15606,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUserPayload"
										},
										"name": "AdminCreateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 15607,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15608,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15609,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.update(userId, {\n  first_name: \"Marcellus\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15610,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15611,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminUpdateUserPayload"
										},
										"name": "AdminUpdateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 15612,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15613,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15614,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a user. Once deleted, the user will not be able to authenticate or perform admin functionalities."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.delete(userId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15615,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15616,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15617,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15618,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve all admin users."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of users."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list users:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list()\n.then(({ users }) => {\n  console.log(users.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " users are returned. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list({\n  limit,\n  offset\n})\n.then(({ users, limit, offset, count }) => {\n  console.log(users.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15619,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/list-users.d.ts",
											"qualifiedName": "AdminGetUsersParams"
										},
										"name": "AdminGetUsersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15620,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUsersListRes"
										},
										"name": "AdminUsersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15589,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15590,
							"name": "new AdminUsersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15591,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15588,
								"name": "AdminUsersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15589
					]
				},
				{
					"title": "Methods",
					"children": [
						15592,
						15596,
						15600,
						15604,
						15608,
						15613,
						15617
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 15621,
			"name": "AdminVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 14430
					},
					{
						"kind": "text",
						"text": ".\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\nProduct variants can be managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 15101
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage product variants](https://docs.medusajs.com/modules/products/admin/manage-products#manage-product-variants)."
					}
				]
			},
			"children": [
				{
					"id": 15625,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15626,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product variants. The product variant can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variant can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list()\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\"\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\",\n  limit,\n  offset\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15627,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/list-variants.d.ts",
											"qualifiedName": "AdminGetVariantsParams"
										},
										"name": "AdminGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15628,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsListRes"
										},
										"name": "AdminVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15629,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15630,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product variant by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId, {\n  expand: \"options\"\n})\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15631,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15632,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-variant.d.ts",
											"qualifiedName": "AdminGetVariantParams"
										},
										"name": "AdminGetVariantParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 15633,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsRes"
										},
										"name": "AdminVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15634,
					"name": "getInventory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 15635,
							"name": "getInventory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the available inventory of a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the inventory details of the product variant."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.getInventory(variantId)\n.then(({ variant }) => {\n  console.log(variant.inventory, variant.sales_channel_availability)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15636,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15637,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-inventory.d.ts",
											"qualifiedName": "AdminGetVariantsVariantInventoryRes"
										},
										"name": "AdminGetVariantsVariantInventoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 15622,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 15623,
							"name": "new AdminVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 15624,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 15621,
								"name": "AdminVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						15622
					]
				},
				{
					"title": "Methods",
					"children": [
						15625,
						15629,
						15634
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14010,
			"name": "AuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Auth API Routes](https://docs.medusajs.com/api/store#auth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allows you to manage a customer's session, such as login or log out.\nYou can send authenticated requests for a customer either using the Cookie header or using the JWT Token.\nWhen you log the customer in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "authenticate",
						"target": 14014,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 14014,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14015,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate a customer using their email and password. If the customer is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.authenticate({\n  email: \"user@example.com\",\n  password: \"user@example.com\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14016,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14017,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14018,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14019,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the customer and remove their authentication session. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 14014,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when customer is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.deleteSession()\n.then(() => {\n  // customer logged out successfully\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14020,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14021,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14022,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of the logged-in customer. Can also be used to check if there is an authenticated customer.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 14014,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.auth.getSession()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14023,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14024,
					"name": "exists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14025,
							"name": "exists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Check if the email is already used by another registered customer. Can be used to validate a new customer's email."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the result of the check."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.exists(\"user@example.com\")\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14026,
									"name": "email",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The email to check."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14027,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreGetAuthEmailRes"
										},
										"name": "StoreGetAuthEmailRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14028,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14029,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the customer and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the customer, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14030,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14031,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreBearerAuthRes"
										},
										"name": "StoreBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14011,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14012,
							"name": "new AuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14013,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14010,
								"name": "AuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14011
					]
				},
				{
					"title": "Methods",
					"children": [
						14014,
						14018,
						14021,
						14024,
						14028
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14032,
			"name": "CartsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA cart is a virtual shopping bag that customers can use to add items they want to purchase.\nA cart is then used to checkout and place an order.\n\nRelated Guide: [How to implement cart functionality in your storefront](https://docs.medusajs.com/modules/carts-and-checkout/storefront/implement-cart)."
					}
				]
			},
			"children": [
				{
					"id": 14033,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14034,
							"name": "new CartsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14035,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14032,
								"name": "CartsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14036,
					"name": "lineItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "LineItemsResource",
								"target": 14138,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to line-item-related routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14138,
						"name": "LineItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14037,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14038,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to the cart. The validation of the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " field is handled by the fulfillment provider of the chosen shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.addShippingMethod(cartId, {\n  option_id\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14039,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to add the shipping method to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14040,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/add-shipping-method.d.ts",
											"qualifiedName": "StorePostCartsCartShippingMethodReq"
										},
										"name": "StorePostCartsCartShippingMethodReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14041,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14042,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14043,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete a cart and place an order or create a swap, based on the cart's type. This includes attempting to authorize the cart's payment.\nIf authorizing the payment requires more action, the cart will not be completed and the order will not be placed or the swap will not be created.\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during cart completion or the request is interrupted for any reason, the cart completion can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the completion details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.complete(cartId)\n.then(({ data, type }) => {\n  console.log(data.id, type);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14044,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to complete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14045,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCompleteCartRes"
										},
										"name": "StoreCompleteCartRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14046,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14047,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Cart. Although optional, specifying the cart's region and sales channel can affect the cart's pricing and\nthe products that can be added to the cart respectively. So, make sure to set those early on and change them if necessary, such as when the customer changes their region.\nIf a customer is logged in, make sure to pass its ID or email within the cart's details so that the cart is attached to the customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.create()\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14048,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-cart.d.ts",
											"qualifiedName": "StorePostCartReq"
										},
										"name": "StorePostCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14049,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14050,
					"name": "createPaymentSessions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14051,
							"name": "createPaymentSessions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create Payment Sessions for each of the available Payment Providers in the Cart's Region. If there's only one payment session created,\nit will be selected by default. The creation of the payment session uses the payment provider and may require sending requests to third-party services."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.createPaymentSessions(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14052,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to create the payment sessions for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14053,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14054,
					"name": "deleteDiscount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14055,
							"name": "deleteDiscount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Discount from a Cart. This only removes the application of the discount, and not completely deletes it. The totals will be re-calculated and the payment sessions\nwill be refreshed after the removal."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deleteDiscount(cartId, code)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14056,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the cart to remove the discount from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14057,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount to remove from the cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14058,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14059,
					"name": "deletePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14060,
							"name": "deletePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Payment Session in a Cart. May be useful if a payment has failed. The totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deletePaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14061,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to delete the payment session from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14062,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14063,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14064,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14065,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session to ensure that it is in sync with the Cart. This is usually not necessary, but is provided for edge cases."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.refreshPaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14066,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to refresh its payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14067,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that's associated with the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14068,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14069,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14070,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Cart's details. This includes recalculating its totals."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.retrieve(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14071,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14072,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14073,
					"name": "setPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14074,
							"name": "setPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Select the Payment Session that will be used to complete the cart. This is typically used when the customer chooses their preferred payment method during checkout.\nThe totals of the cart will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.setPaymentSession(cartId, {\n  provider_id: \"manual\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14075,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14076,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The associated payment provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/set-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionReq"
										},
										"name": "StorePostCartsCartPaymentSessionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14077,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14078,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14079,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Cart's details. If the cart has payment sessions and the region was not changed, the payment sessions are updated. The cart's totals are also recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.update(cartId, {\n  email: \"user@example.com\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14080,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14081,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the cart."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-cart.d.ts",
											"qualifiedName": "StorePostCartsCartReq"
										},
										"name": "StorePostCartsCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14082,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14083,
					"name": "updatePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14084,
							"name": "updatePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Payment Session with additional data. This can be useful depending on the payment provider used.\nAll payment sessions are updated and cart totals are recalculated afterwards."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.updatePaymentSession(cartId, \"manual\", {\n  data: {\n\n  }\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14085,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14086,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the payment session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14087,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionUpdateReq"
										},
										"name": "StorePostCartsCartPaymentSessionUpdateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14088,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14033
					]
				},
				{
					"title": "Properties",
					"children": [
						14036
					]
				},
				{
					"title": "Methods",
					"children": [
						14037,
						14042,
						14046,
						14050,
						14054,
						14059,
						14064,
						14069,
						14073,
						14078,
						14083
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14089,
			"name": "CollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Collection API Routes](https://docs.medusajs.com/api/store#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\nUsing the methods in this class, you can list or retrieve a collection's details and products."
					}
				]
			},
			"children": [
				{
					"id": 14090,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14091,
							"name": "new CollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14092,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14089,
								"name": "CollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14093,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14094,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14095,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14096,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsRes"
										},
										"name": "StoreCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14097,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14098,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product collections can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14099,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/list-collections.d.ts",
											"qualifiedName": "StoreGetCollectionsParams"
										},
										"name": "StoreGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14100,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsListRes"
										},
										"name": "StoreCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14090
					]
				},
				{
					"title": "Methods",
					"children": [
						14093,
						14097
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14101,
			"name": "CustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA customer can register and manage their information such as addresses, orders, payment methods, and more.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 14102,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14103,
							"name": "new CustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14104,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14101,
								"name": "CustomerResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14105,
					"name": "paymentMethods",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "PaymentMethodsResource",
								"target": 14233,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to payment-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14233,
						"name": "PaymentMethodsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14106,
					"name": "addresses",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AddressesResource",
								"target": 13993,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to address-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13993,
						"name": "AddressesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14107,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14108,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a new customer. This will also automatically authenticate the customer and set their login session in the response Cookie header.\nSubsequent requests sent with the JS client are sent with the Cookie session automatically."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.create({\n  first_name: \"Alec\",\n  last_name: \"Reynolds\",\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14109,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the customer to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-customer.d.ts",
											"qualifiedName": "StorePostCustomersReq"
										},
										"name": "StorePostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14110,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14111,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14112,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 14014
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.retrieve()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14113,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14114,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14115,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 14014
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.update({\n  first_name: \"Laury\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14116,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the logged-in customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-customer.d.ts",
											"qualifiedName": "StorePostCustomersCustomerReq"
										},
										"name": "StorePostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14117,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14118,
					"name": "listOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14119,
							"name": "listOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of the logged-in customer's orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfillment_status`"
									},
									{
										"kind": "text",
										"text": ". The orders can also be paginated.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 14014
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.listOrders()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14120,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/list-orders.d.ts",
											"qualifiedName": "StoreGetCustomersCustomerOrdersParams"
										},
										"name": "StoreGetCustomersCustomerOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14121,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListOrdersRes"
										},
										"name": "StoreCustomersListOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14122,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14123,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset a customer's password using a password token created by a previous request using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "generatePasswordToken",
										"target": 14126,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. If the password token expired,\nyou must create a new one."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.resetPassword({\n  email: \"user@example.com\",\n  password: \"supersecret\",\n  token: \"supersecrettoken\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14124,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to reset the password."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password.d.ts",
											"qualifiedName": "StorePostCustomersResetPasswordReq"
										},
										"name": "StorePostCustomersResetPasswordReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14125,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14126,
					"name": "generatePasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14127,
							"name": "generatePasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reset password token to be used when sending a request with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 14122,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. This emits the event "
									},
									{
										"kind": "code",
										"text": "`customer.password_reset`"
									},
									{
										"kind": "text",
										"text": ". If a notification provider is\ninstalled in the Medusa backend and is configured to handle this event, a notification to the customer, such as an email, may be sent with reset instructions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when reset password token is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.generatePasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // failed\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14128,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to create the reset password token."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password-token.d.ts",
											"qualifiedName": "StorePostCustomersCustomerPasswordTokenReq"
										},
										"name": "StorePostCustomersCustomerPasswordTokenReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14129,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14102
					]
				},
				{
					"title": "Properties",
					"children": [
						14105,
						14106
					]
				},
				{
					"title": "Methods",
					"children": [
						14107,
						14111,
						14114,
						14118,
						14122,
						14126
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14130,
			"name": "GiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Gift Card API Routes](https://docs.medusajs.com/api/store#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nCustomers can use gift cards during checkout to deduct the gift card's balance from the checkout total.\nThe methods in this class allow retrieving a gift card's details by its code. A gift card can be applied to a cart using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 14032
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to use gift cards in a storefront](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 14131,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14132,
							"name": "new GiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14133,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14130,
								"name": "GiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14134,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14135,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Gift Card's details by its associated unique code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the gift card."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.giftCards.retrieve(code)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14136,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14137,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/gift-cards/index.d.ts",
											"qualifiedName": "StoreGiftCardsRes"
										},
										"name": "StoreGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14131
					]
				},
				{
					"title": "Methods",
					"children": [
						14134
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14138,
			"name": "LineItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Line Item API Routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts.lineItems`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 14139,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14140,
							"name": "new LineItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14141,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14138,
								"name": "LineItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14142,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14143,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a Line Item with a given Product Variant and adds it to the Cart"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.create(cart_id, {\n  variant_id,\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14144,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14145,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-line-item/index.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsReq"
										},
										"name": "StorePostCartsCartLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14146,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14147,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14148,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a line item's data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.update(cartId, lineId, {\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14149,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14150,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14151,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-line-item.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsItemReq"
										},
										"name": "StorePostCartsCartLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14152,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14153,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14154,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item from a cart. The payment sessions will be updated and the totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.delete(cartId, lineId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14155,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14156,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14157,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14139
					]
				},
				{
					"title": "Methods",
					"children": [
						14142,
						14147,
						14153
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14158,
			"name": "OrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order Edits API Routes](https://docs.medusajs.com/api/store#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrder edits are changes made to items in an order such as adding, updating their quantity, or deleting them. Order edits are created by the admin.\nA customer can review order edit requests created by an admin and confirm or decline them.\n\nRelated Guide: [How to handle order edits in a storefront](https://docs.medusajs.com/modules/orders/storefront/handle-order-edits)."
					}
				]
			},
			"children": [
				{
					"id": 14159,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14160,
							"name": "new OrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14161,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14158,
								"name": "OrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14162,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14163,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14164,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14165,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14166,
					"name": "decline",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14167,
							"name": "decline",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decline an Order Edit. The changes are not reflected on the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.decline(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14168,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14169,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decline details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/decline-order-edit.d.ts",
											"qualifiedName": "StorePostOrderEditsOrderEditDecline"
										},
										"name": "StorePostOrderEditsOrderEditDecline",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14170,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14171,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14172,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete and confirm an Order Edit and reflect its changes on the original order. Any additional payment required must be authorized first using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "PaymentCollectionsResource",
										"target": 14199
									},
									{
										"kind": "text",
										"text": " routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.complete(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14173,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14174,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14159
					]
				},
				{
					"title": "Methods",
					"children": [
						14162,
						14166,
						14171
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14175,
			"name": "OrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order API Routes](https://docs.medusajs.com/api/store#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrders are purchases made by customers, typically through a storefront.\nOrders are placed and created using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 14032
					},
					{
						"kind": "text",
						"text": ". The methods in this class allow retrieving and claiming orders.\n\nRelated Guide: [How to retrieve order details in a storefront](https://docs.medusajs.com/modules/orders/storefront/retrieve-order-details)."
					}
				]
			},
			"children": [
				{
					"id": 14176,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14177,
							"name": "new OrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14178,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14175,
								"name": "OrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14179,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14180,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14181,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14182,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14183,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14184,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details by the ID of the cart that was used to create the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieveByCartId(cartId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14185,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14186,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14187,
					"name": "lookupOrder",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14188,
							"name": "lookupOrder",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Look up an order using filters. If the filters don't narrow down the results to a single order, a "
									},
									{
										"kind": "code",
										"text": "`404`"
									},
									{
										"kind": "text",
										"text": " response is returned with no orders."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.lookupOrder({\n  display_id: 1,\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14189,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters used to retrieve the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/lookup-order.d.ts",
											"qualifiedName": "StoreGetOrdersParams"
										},
										"name": "StoreGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14190,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14191,
					"name": "requestCustomerOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14192,
							"name": "requestCustomerOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allow the logged-in customer to claim ownership of one or more orders. This generates a token that can be used later on to verify the claim using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirmRequest",
										"target": 14195,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method.\nThis also emits the event "
									},
									{
										"kind": "code",
										"text": "`order-update-token.created`"
									},
									{
										"kind": "text",
										"text": ". So, if you have a notification provider installed that handles this event and sends the customer a notification, such as an email,\nthe customer should receive instructions on how to finalize their claim ownership."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the request is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.requestCustomerOrders({\n  order_ids,\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14193,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The orders to claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/request-order.d.ts",
											"qualifiedName": "StorePostCustomersCustomerOrderClaimReq"
										},
										"name": "StorePostCustomersCustomerOrderClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14194,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14195,
					"name": "confirmRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14196,
							"name": "confirmRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Verify the claim order token provided to the customer when they request ownership of an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the claim order is verified successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.confirmRequest(\n  token,\n)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14197,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim order to verify."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/confirm-order-request.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAcceptClaimReq"
										},
										"name": "StorePostCustomersCustomerAcceptClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14198,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14176
					]
				},
				{
					"title": "Methods",
					"children": [
						14179,
						14183,
						14187,
						14191,
						14195
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14199,
			"name": "PaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Payment Collection API Routes](https://docs.medusajs.com/api/store#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 14200,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14201,
							"name": "new PaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14202,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14199,
								"name": "PaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14203,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14204,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"region\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14205,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14206,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "StoreGetPaymentCollectionsParams"
										},
										"name": "StoreGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14207,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14208,
					"name": "authorizePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14209,
							"name": "authorizePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize a Payment Session of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorize(paymentId, sessionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14210,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14211,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14212,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14213,
					"name": "authorizePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14214,
							"name": "authorizePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize the Payment Sessions of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorizePaymentSessionsBatch(paymentCollectionId, {\n session_ids: [\"ps_123456\"]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14215,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14216,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of payment session IDs to authorize."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/authorize-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14217,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14218,
					"name": "managePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14219,
							"name": "managePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create, update, or delete a list of payment sessions of a Payment Collections. If a payment session is not provided in the "
									},
									{
										"kind": "code",
										"text": "`sessions`"
									},
									{
										"kind": "text",
										"text": " array, it's deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add two new payment sessions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\n\n// Total amount = 10000\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 5000,\n    },\n    {\n      provider_id: \"manual\",\n      amount: 5000,\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo update a payment session and another one by not including it in the payload:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 10000,\n      session_id: \"ps_123456\"\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14220,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14221,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes of each session to update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14222,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14223,
					"name": "managePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14224,
							"name": "managePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Payment Session for a payment provider in a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.managePaymentSession(payment_id, { provider_id: \"stripe\" })\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14225,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14226,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment session to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-payment-session.d.ts",
											"qualifiedName": "StorePaymentCollectionSessionsReq"
										},
										"name": "StorePaymentCollectionSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14227,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14228,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14229,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session's data to ensure that it is in sync with the Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refreshed payment session's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.paymentCollections.refreshPaymentSession(paymentCollectionId, sessionId)\n.then(({ payment_session }) => {\n  console.log(payment_session.status);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14230,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14231,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14232,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsSessionRes"
										},
										"name": "StorePaymentCollectionsSessionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14200
					]
				},
				{
					"title": "Methods",
					"children": [
						14203,
						14208,
						14213,
						14218,
						14223,
						14228
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14233,
			"name": "PaymentMethodsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Payment Method API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.paymentMethods`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 14014
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 14234,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14235,
							"name": "new PaymentMethodsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14236,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14233,
								"name": "PaymentMethodsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14237,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14238,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's saved payment methods. This method only works with payment providers created with the deprecated Payment Service interface.\nThe payment methods are saved using the Payment Service's third-party service, and not on the Medusa backend. So, they're retrieved from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's payment methods."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.paymentMethods.list()\n.then(({ payment_methods }) => {\n  console.log(payment_methods.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14239,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListPaymentMethodsRes"
										},
										"name": "StoreCustomersListPaymentMethodsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14234
					]
				},
				{
					"title": "Methods",
					"children": [
						14237
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14240,
			"name": "ProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Category API Routes](https://docs.medusajs.com/api/store#product-categories_getproductcategories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts can be categoriezed into categories. A product can be associated more than one category.\nUsing the methods in this class, you can list or retrieve a category's details and products.\n\nRelated Guide: [How to use product categories in a storefront](https://docs.medusajs.com/modules/products/storefront/use-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 14241,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14242,
							"name": "new ProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14243,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14240,
								"name": "ProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14244,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14245,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product category by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId, {\n  expand: \"products\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14246,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14247,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/get-product-category.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryParams"
										},
										"name": "StoreGetProductCategoriesCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14248,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryRes"
										},
										"name": "StoreGetProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14249,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14250,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated. This method can also be used to retrieve a product category by its handle."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo retrieve a product category by its handle:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  handle: \"women\",\n})\n.then(({ product_categories, limit, offset, count }) => {\n  if (!product_categories.length) {\n    // category does not exist\n  }\n  const category = product_categories[0]\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14251,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/list-product-categories.d.ts",
											"qualifiedName": "StoreGetProductCategoriesParams"
										},
										"name": "StoreGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14252,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesRes"
										},
										"name": "StoreGetProductCategoriesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14241
					]
				},
				{
					"title": "Methods",
					"children": [
						14244,
						14249
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14253,
			"name": "ProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Tag API Routes](https://docs.medusajs.com/api/store#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct tags are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share tags."
					}
				]
			},
			"children": [
				{
					"id": 14254,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14255,
							"name": "new ProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14256,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14253,
								"name": "ProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14257,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14258,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14259,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/list-product-tags.d.ts",
											"qualifiedName": "StoreGetProductTagsParams"
										},
										"name": "StoreGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14260,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/index.d.ts",
											"qualifiedName": "StoreProductTagsListRes"
										},
										"name": "StoreProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14254
					]
				},
				{
					"title": "Methods",
					"children": [
						14257
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14261,
			"name": "ProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Type API Routes](https://docs.medusajs.com/api/store#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct types are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share types."
					}
				]
			},
			"children": [
				{
					"id": 14262,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14263,
							"name": "new ProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14264,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14261,
								"name": "ProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14265,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14266,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14267,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/list-product-types.d.ts",
											"qualifiedName": "StoreGetProductTypesParams"
										},
										"name": "StoreGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14268,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/index.d.ts",
											"qualifiedName": "StoreProductTypesListRes"
										},
										"name": "StoreProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14262
					]
				},
				{
					"title": "Methods",
					"children": [
						14265
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14269,
			"name": "ProductVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.product.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product."
					}
				]
			},
			"children": [
				{
					"id": 14270,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14271,
							"name": "new ProductVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14272,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14269,
								"name": "ProductVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14273,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14274,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Variant's details. For accurate and correct pricing of the product variant based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.retrieve(productVariantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14275,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14276,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsRes"
										},
										"name": "StoreVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14277,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14278,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves a list of product variants. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be paginated.\n\nFor accurate and correct pricing of the product variants based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list()\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\"\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\",\n  limit,\n  offset\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14279,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/list-variants.d.ts",
											"qualifiedName": "StoreGetVariantsParams"
										},
										"name": "StoreGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14280,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsListRes"
										},
										"name": "StoreVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14270
					]
				},
				{
					"title": "Methods",
					"children": [
						14273,
						14277
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14281,
			"name": "ProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product API Routes](https://docs.medusajs.com/api/store#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards) in a store.\nUsing the methods in this class, you can filter products by categories, collections, sales channels, and more.\n\nRelated Guide: [How to show products in a storefront](https://docs.medusajs.com/modules/products/storefront/show-products)."
					}
				]
			},
			"children": [
				{
					"id": 14282,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14283,
							"name": "new ProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14284,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14281,
								"name": "ProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14285,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ProductVariantsResource",
								"target": 14269,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants_getvariants)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 14269,
						"name": "ProductVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 14286,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14287,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product's details. For accurate and correct pricing of the product based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14288,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14289,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsRes"
										},
										"name": "StoreProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14290,
					"name": "search",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14291,
							"name": "search",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Run a search query on products using the search service installed on the Medusa backend. The searching is handled through the search service, so the returned data's\nformat depends on the search service you're using."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of search results. The format of the items depends on the search engine installed on the Medusa backend."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.search({\n  q: \"Shirt\"\n})\n.then(({ hits }) => {\n  console.log(hits.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14292,
									"name": "searchOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fields to search products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/search.d.ts",
											"qualifiedName": "StorePostSearchReq"
										},
										"name": "StorePostSearchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14293,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StorePostSearchRes"
										},
										"name": "StorePostSearchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14294,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14295,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated.\nThis method can also be used to retrieve a product by its handle.\n\nFor accurate and correct pricing of the products based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14296,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/list-products.d.ts",
											"qualifiedName": "StoreGetProductsParams"
										},
										"name": "StoreGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14297,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsListRes"
										},
										"name": "StoreProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14282
					]
				},
				{
					"title": "Properties",
					"children": [
						14285
					]
				},
				{
					"title": "Methods",
					"children": [
						14286,
						14290,
						14294
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14298,
			"name": "RegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Region API Routes](https://docs.medusajs.com/api/store#regions_getregions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nCustomers can choose what region they're in, which can be used to change the prices shown based on the region and its currency.\n\nRelated Guide: [How to use regions in a storefront](https://docs.medusajs.com/modules/regions-and-currencies/storefront/use-regions)."
					}
				]
			},
			"children": [
				{
					"id": 14299,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14300,
							"name": "new RegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14301,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14298,
								"name": "RegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14302,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14303,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of regions. This method is useful to show the customer all available regions to choose from."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.list()\n.then(({ regions, count, limit, offset }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14304,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsListRes"
										},
										"name": "StoreRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14305,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14306,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14307,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14308,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsRes"
										},
										"name": "StoreRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14299
					]
				},
				{
					"title": "Methods",
					"children": [
						14302,
						14305
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14309,
			"name": "ReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return Reason API Routes](https://docs.medusajs.com/api/store#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created."
					}
				]
			},
			"children": [
				{
					"id": 14310,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14311,
							"name": "new ReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14312,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14309,
								"name": "ReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14313,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14314,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Return Reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.retrieve(reasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14315,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14316,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsRes"
										},
										"name": "StoreReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14317,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14318,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Return Reasons. This is useful when implementing a Create Return flow in the storefront."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14319,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsListRes"
										},
										"name": "StoreReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14310
					]
				},
				{
					"title": "Methods",
					"children": [
						14313,
						14317
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14320,
			"name": "ReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return API Routes](https://docs.medusajs.com/api/store#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA return can be created by a customer to return items in an order.\n\nRelated Guide: [How to create a return in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-return)."
					}
				]
			},
			"children": [
				{
					"id": 14321,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14322,
							"name": "new ReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14323,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14320,
								"name": "ReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14324,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14325,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return for an order. If a return shipping method is specified, the return is automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returns.create({\n  order_id,\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14326,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/create-return.d.ts",
											"qualifiedName": "StorePostReturnsReq"
										},
										"name": "StorePostReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14327,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/index.d.ts",
											"qualifiedName": "StoreReturnsRes"
										},
										"name": "StoreReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14321
					]
				},
				{
					"title": "Methods",
					"children": [
						14324
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14328,
			"name": "ShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Shipping Option API Routes](https://docs.medusajs.com/api/store#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 14329,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14330,
							"name": "new ShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14331,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14328,
								"name": "ShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14332,
					"name": "listCartOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14333,
							"name": "listCartOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options available for a cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.listCartOptions(cartId)\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14334,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14335,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14336,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14337,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered using the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.list()\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14338,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/list-options.d.ts",
											"qualifiedName": "StoreGetShippingOptionsParams"
										},
										"name": "StoreGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14339,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14329
					]
				},
				{
					"title": "Methods",
					"children": [
						14332,
						14336
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 14340,
			"name": "SwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Swap API Routes](https://docs.medusajs.com/api/store#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to create a swap in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-swap)"
					}
				]
			},
			"children": [
				{
					"id": 14341,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 14342,
							"name": "new SwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 14343,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 14340,
								"name": "SwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 14344,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14345,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Swap for an Order. This will also create a return and associate it with the swap. If a return shipping option is specified, the return will automatically be fulfilled.\nTo complete the swap, you must use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "CartsResource.complete",
										"target": 14042
									},
									{
										"kind": "text",
										"text": " method passing it the ID of the swap's cart.\n\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during swap creation or the request is interrupted for any reason, the swap creation can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.create({\n  order_id,\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ],\n  additional_items: [\n    {\n      variant_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14346,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/create-swap.d.ts",
											"qualifiedName": "StorePostSwapsReq"
										},
										"name": "StorePostSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 14347,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 14348,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 14349,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Swap's details by the ID of its cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.retrieveByCartId(cartId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14350,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 14351,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						14341
					]
				},
				{
					"title": "Methods",
					"children": [
						14344,
						14348
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				13993,
				14420,
				14438,
				14462,
				14497,
				14394,
				14510,
				14551,
				14572,
				14659,
				14704,
				14352,
				14729,
				14780,
				14803,
				14828,
				14972,
				14841,
				15638,
				15660,
				15031,
				15678,
				15086,
				15093,
				15101,
				15174,
				15218,
				15278,
				15303,
				15327,
				15344,
				15389,
				15414,
				15438,
				15463,
				15488,
				15500,
				15564,
				15588,
				15621,
				14010,
				14032,
				14089,
				14101,
				14130,
				14138,
				14158,
				14175,
				14199,
				14233,
				14240,
				14253,
				14261,
				14269,
				14281,
				14298,
				14309,
				14320,
				14328,
				14340
			]
		}
	],
	"packageName": "@medusajs/medusa-js",
	"symbolIdMap": {
		"13992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/index.ts",
			"qualifiedName": ""
		},
		"13993": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource"
		},
		"13994": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13995": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AddressesResource"
		},
		"13996": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13997": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"13998": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"13999": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"14000": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"14001": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"14002": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"14003": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"14004": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"14005": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"14006": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"14007": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"14008": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"14009": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"14010": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource"
		},
		"14011": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14012": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AuthResource"
		},
		"14013": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14014": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"14015": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"14016": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"14017": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14018": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"14019": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"14020": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14021": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"14022": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"14023": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14024": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"14025": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"14026": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "email"
		},
		"14027": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14028": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"14029": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"14030": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"14031": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14032": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource"
		},
		"14033": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14034": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CartsResource"
		},
		"14035": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14036": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.lineItems"
		},
		"14037": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"14038": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"14039": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14040": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"14041": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14042": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"14043": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"14044": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14045": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14046": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"14047": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"14048": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"14049": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14050": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"14051": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"14052": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14053": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14054": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"14055": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"14056": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14057": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "code"
		},
		"14058": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14059": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"14060": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"14061": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14062": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"14063": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14064": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"14065": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"14066": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14067": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"14068": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14069": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"14070": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"14071": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14072": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14073": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"14074": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"14075": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14076": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"14077": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14078": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"14079": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"14080": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14081": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"14082": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14083": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"14084": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"14085": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"14086": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"14087": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"14088": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"14089": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource"
		},
		"14090": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14091": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CollectionsResource"
		},
		"14092": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14093": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"14094": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"14095": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "id"
		},
		"14096": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14097": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"14098": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"14099": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "query"
		},
		"14100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource"
		},
		"14102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CustomerResource"
		},
		"14104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.paymentMethods"
		},
		"14106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.addresses"
		},
		"14107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"14108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"14109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"14110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"14112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"14113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"14115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"14116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"14117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"14119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"14120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "params"
		},
		"14121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"14123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"14124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"14125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14126": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"14127": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"14128": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"14129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"14131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"14133": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14134": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"14135": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"14136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "code"
		},
		"14137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource"
		},
		"14139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "LineItemsResource"
		},
		"14141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"14143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"14144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"14145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"14146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"14147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"14148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"14149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"14150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"14151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"14152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"14153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"14154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"14155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"14156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"14157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"14158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"14159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"14161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"14163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"14164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"14165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"14167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"14168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"14169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "payload"
		},
		"14170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"14172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"14173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"14174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource"
		},
		"14176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrdersResource"
		},
		"14178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"14180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"14181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "id"
		},
		"14182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"14184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"14185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "cart_id"
		},
		"14186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"14188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"14189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"14190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"14192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"14193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"14194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"14196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"14197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"14198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"14200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"14202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"14204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"14205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "query"
		},
		"14207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"14209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"14210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"14212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"14214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"14215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"14217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"14219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"14220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"14222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"14224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"14225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"14227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"14229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"14230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"14231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"14232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"14234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"14236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"14238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"14239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "customHeaders"
		},
		"14240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"14241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"14243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"14245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"14246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "id"
		},
		"14247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"14248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"14249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"14250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"14251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"14252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"14253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"14254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"14256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"14258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"14259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "query"
		},
		"14260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "customHeaders"
		},
		"14261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"14262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"14264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"14266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"14267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "query"
		},
		"14268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"14269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"14270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"14272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"14274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"14275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "id"
		},
		"14276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"14277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"14278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"14279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "query"
		},
		"14280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"14281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource"
		},
		"14282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductsResource"
		},
		"14284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.variants"
		},
		"14286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"14287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"14288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "id"
		},
		"14289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"14290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"14291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"14292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "searchOptions"
		},
		"14293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"14294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"14295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"14296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "query"
		},
		"14297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"14298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource"
		},
		"14299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "RegionsResource"
		},
		"14301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"14303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"14304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"14305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"14306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"14307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "id"
		},
		"14308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"14309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"14310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"14312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"14314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"14315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "id"
		},
		"14316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"14317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"14318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"14319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"14320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource"
		},
		"14321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnsResource"
		},
		"14323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"14325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"14326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "payload"
		},
		"14327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"14328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"14329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"14331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"14333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"14334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "cart_id"
		},
		"14335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"14336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"14337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"14338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "query"
		},
		"14339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"14340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource"
		},
		"14341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "SwapsResource"
		},
		"14343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"14345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"14346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "payload"
		},
		"14347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"14348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"14349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"14350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "cart_id"
		},
		"14351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"14352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin"
		},
		"14353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "Admin"
		},
		"14355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.auth"
		},
		"14357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.batchJobs"
		},
		"14358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customers"
		},
		"14359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customerGroups"
		},
		"14360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.discounts"
		},
		"14361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.currencies"
		},
		"14362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.collections"
		},
		"14363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.draftOrders"
		},
		"14364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.giftCards"
		},
		"14365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.invites"
		},
		"14366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.inventoryItems"
		},
		"14367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notes"
		},
		"14368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.priceLists"
		},
		"14369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.products"
		},
		"14370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTags"
		},
		"14371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTypes"
		},
		"14372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.users"
		},
		"14373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returns"
		},
		"14374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orders"
		},
		"14375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orderEdits"
		},
		"14376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.publishableApiKeys"
		},
		"14377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returnReasons"
		},
		"14378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.variants"
		},
		"14379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.salesChannels"
		},
		"14380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.swaps"
		},
		"14381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingProfiles"
		},
		"14382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.stockLocations"
		},
		"14383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.store"
		},
		"14384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingOptions"
		},
		"14385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.regions"
		},
		"14386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.reservations"
		},
		"14387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notifications"
		},
		"14388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.taxRates"
		},
		"14389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.uploads"
		},
		"14390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.paymentCollections"
		},
		"14391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.payments"
		},
		"14392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productCategories"
		},
		"14393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.custom"
		},
		"14394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"14395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"14397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"14399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"14400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TQuery"
		},
		"14401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"14402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"14403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "query"
		},
		"14404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"14405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"14406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"14407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"14408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TPayload"
		},
		"14409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"14410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"14411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "payload"
		},
		"14412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"14413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"14414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"14415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"14416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"14417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"14418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"14419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"14420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"14421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"14423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"14425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"14426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"14428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"14429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"14431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"14432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"14433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"14435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"14436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"14437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"14438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"14439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"14441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"14443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"14444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "payload"
		},
		"14445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"14446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"14447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"14448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "query"
		},
		"14449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"14450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"14451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"14452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"14453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"14454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"14455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"14456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"14457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"14458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"14459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"14460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"14461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"14462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"14463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"14465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"14467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"14468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"14469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"14471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"14472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"14473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"14474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"14476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"14477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"14478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"14480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"14481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"14482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"14484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"14485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "query"
		},
		"14486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"14488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"14489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"14490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"14491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"14493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"14494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"14495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"14496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"14497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"14498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"14500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"14502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"14503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "query"
		},
		"14504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"14505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"14506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"14507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "code"
		},
		"14508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "payload"
		},
		"14509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"14510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"14511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"14513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"14515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"14516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"14517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"14519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"14520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"14522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"14524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"14525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"14527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"14529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"14530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"14533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"14534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"14535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"14537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"14538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"14540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"14542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"14543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"14545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"14547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"14548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"14549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"14550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"14551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"14552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"14554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"14556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"14557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"14558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"14560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"14561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"14562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"14563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"14565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"14566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"14567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"14569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"14570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "query"
		},
		"14571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"14572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"14573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"14575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"14577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"14578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"14580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"14582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"14583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"14586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"14587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"14591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"14592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"14596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"14597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"14600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"14601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"14603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"14605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"14606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"14610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"14611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"14612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"14614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"14615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"14618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"14619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"14620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"14621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"14623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"14624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"14629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"14630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"14632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"14636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"14637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"14639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"14641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"14642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"14644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"14647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"14648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"14650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"14652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"14654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"14655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"14656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"14657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"14658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"14659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"14660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"14662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"14664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"14665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"14666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"14668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"14669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"14671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"14673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"14674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"14677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"14678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"14680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"14682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"14683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"14686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"14687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "query"
		},
		"14688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"14690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"14691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"14694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"14695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"14697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"14699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"14700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"14701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"14702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"14703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"14705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"14707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"14709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"14710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"14711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"14713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"14714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"14715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"14716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"14718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"14719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"14720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"14722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"14723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"14724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"14726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"14727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "query"
		},
		"14728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"14729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"14730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"14732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"14734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"14735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"14739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"14740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"14742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"14745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"14746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"14749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"14750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"14751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"14754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"14755": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14756": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14757": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"14758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"14759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"14761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"14762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"14765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"14766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"14768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"14771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"14772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"14774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"14776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"14777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"14778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"14779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"14780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"14781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"14783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"14785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"14786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"14787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"14788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"14789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"14790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"14791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"14792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"14793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"14794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"14795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"14796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"14797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"14798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"14799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"14800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"14801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"14802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"14803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"14804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"14806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"14808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"14809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"14810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"14811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"14812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"14813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"14814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"14815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"14816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"14817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"14818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"14819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"14820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"14821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"14822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"14823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"14824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"14825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"14826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "query"
		},
		"14827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"14828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"14829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"14831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"14833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"14834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "query"
		},
		"14835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"14836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"14837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"14838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "id"
		},
		"14839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "payload"
		},
		"14840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"14841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"14842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"14844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"14846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"14847": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14848": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14849": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"14851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"14852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"14854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"14856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"14857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"14858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"14860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"14861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"14864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"14865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"14868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"14869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"14873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"14874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"14878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"14879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"14881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"14883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"14884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"14886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"14887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"14889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"14890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"14892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"14893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"14895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"14896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"14900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"14901": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14902": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14903": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14904": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"14905": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"14906": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14907": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14908": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"14909": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"14910": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14911": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14912": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14913": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"14914": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"14915": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14916": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14917": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"14918": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"14919": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14920": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14921": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14922": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"14923": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"14924": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14925": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"14926": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14927": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"14928": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"14929": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14930": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"14931": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14932": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14933": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"14934": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"14935": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14936": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"14937": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14938": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14939": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"14940": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"14941": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14942": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"14943": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14944": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"14945": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"14946": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14947": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14948": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14949": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"14950": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"14951": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14952": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"14953": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14954": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"14955": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"14956": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14957": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"14958": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14959": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14960": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"14961": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"14962": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14963": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"14964": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14965": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14966": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"14967": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"14968": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"14969": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"14970": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"14971": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"14972": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"14973": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"14974": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"14975": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"14976": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"14977": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"14978": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"14979": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"14980": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14981": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"14982": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"14983": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"14984": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14985": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"14986": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"14987": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"14988": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14989": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"14990": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"14991": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"14992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"14993": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14994": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"14995": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"14996": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"14997": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"14998": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"14999": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"15000": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"15001": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"15002": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15003": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"15004": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"15005": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"15006": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemChangeId"
		},
		"15007": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15008": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"15009": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"15010": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"15011": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15012": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"15013": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"15014": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"15015": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15016": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"15017": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"15018": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"15019": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15020": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"15021": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"15022": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"15023": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"15024": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"15025": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15026": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"15027": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"15028": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"15029": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"15030": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"15031": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"15032": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15033": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"15034": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15035": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"15036": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"15037": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"15038": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15039": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"15040": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"15041": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15042": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"15043": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15044": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"15045": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"15046": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15047": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15048": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"15049": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"15050": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15051": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15052": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"15053": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"15054": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"15055": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15056": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"15057": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"15058": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15059": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"15060": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15061": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"15062": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"15063": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15064": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"15065": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15066": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"15067": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"15068": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"15069": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"15070": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15071": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"15072": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"15073": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"15074": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "productId"
		},
		"15075": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15076": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"15077": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"15078": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"15079": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "variantId"
		},
		"15080": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15081": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"15082": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"15083": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"15084": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"15085": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"15086": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"15087": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15088": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"15089": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15090": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"15091": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"15092": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "query"
		},
		"15093": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"15094": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15095": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"15096": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15097": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"15098": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"15099": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "query"
		},
		"15100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"15101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"15102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"15104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"15106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"15107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"15110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"15111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"15114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"15115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"15119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"15120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"15123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"15124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"15125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"15130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"15131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"15133": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"15134": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15135": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"15138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"15139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"15143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"15144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"15146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"15149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"15150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"15152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"15154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"15155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"15157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"15159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"15160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"15164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"15165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"15167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"15168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"15170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"15171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"15172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"15173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"15174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"15175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"15177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"15179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"15180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"15183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"15184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"15185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"15187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"15188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"15189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"15191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"15192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"15194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"15196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"15197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"15200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"15201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"15204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"15205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"15207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"15209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"15210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"15212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"15214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"15215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"15216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"15217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"15218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"15219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"15221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"15223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"15224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"15225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"15227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"15228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"15230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"15232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"15233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"15236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"15237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "query"
		},
		"15239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"15241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"15242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "query"
		},
		"15243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"15245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"15246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"15248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"15250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"15251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "country_code"
		},
		"15253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"15255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"15256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"15258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"15260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"15261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"15263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"15265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"15266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"15269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"15270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"15272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"15274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"15275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"15276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"15277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"15278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"15279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"15281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"15283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"15284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"15285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"15286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"15287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"15288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "query"
		},
		"15289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"15290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"15291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"15292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"15293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"15294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"15295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"15296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"15297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"15298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"15299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"15300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"15301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"15302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"15303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"15304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"15306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"15308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"15309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"15310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"15311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"15312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"15313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"15314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"15315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"15316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"15317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"15318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"15319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"15320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"15321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"15322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"15323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"15324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"15325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"15326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"15327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"15328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"15330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"15332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"15333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"15334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"15335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"15336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"15337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"15338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "payload"
		},
		"15339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"15340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"15341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"15342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "query"
		},
		"15343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"15344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"15345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"15347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"15349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"15350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"15353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"15354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"15357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"15358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"15362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"15363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "query"
		},
		"15364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"15366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"15367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"15370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"15371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"15375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"15376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"15380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"15381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"15385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"15386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"15387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"15388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"15389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"15390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"15392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"15394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"15395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"15396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"15397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"15398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"15399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"15400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"15401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"15402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"15403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"15404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"15405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"15406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"15407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"15408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"15409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"15410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"15411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"15412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "query"
		},
		"15413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"15414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"15415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"15417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"15419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"15420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"15421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"15422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"15423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"15424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"15425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"15426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"15427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"15428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"15429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"15430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"15431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"15432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"15433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"15434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"15435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"15436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"15437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"15438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"15439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"15441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"15443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"15444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"15445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"15446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"15447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"15448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "itemId"
		},
		"15449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"15450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"15451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"15452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "stockLocationId"
		},
		"15453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"15454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"15455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"15456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"15457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "id"
		},
		"15458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"15459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"15460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"15461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "query"
		},
		"15462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"15463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"15464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"15466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"15468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"15469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "payload"
		},
		"15470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"15472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"15473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"15474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"15476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"15477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"15478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"15480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"15481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"15483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"15484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"15486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"15487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"15488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"15489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"15491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"15493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"15494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "id"
		},
		"15495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"15496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"15497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"15498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "query"
		},
		"15499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"15500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"15501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"15503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"15505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"15506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"15510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"15511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"15514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"15515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"15519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"15520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"15525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"15526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"15531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"15532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"15537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"15538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"15543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"15544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"15549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"15550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"15555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"15556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"15558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"15559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"15561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"15562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"15563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"15564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"15565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"15567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"15572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"15573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"15574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"15575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"15576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"15577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"15578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"15579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"15580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"15581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"15582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"15583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"15584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"15585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"15586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"15587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"15588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"15589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"15591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"15593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"15594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"15595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"15597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"15598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"15599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"15601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"15602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"15603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"15605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"15606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"15607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"15609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"15610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"15611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"15612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"15614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"15615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"15616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"15618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"15619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "query"
		},
		"15620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"15621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"15622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"15624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"15626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"15627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"15628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"15629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"15630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"15631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "id"
		},
		"15632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"15633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"15634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"15635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"15636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "variantId"
		},
		"15637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"15638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"15639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"15641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"15643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"15644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"15645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "query"
		},
		"15646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"15647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"15648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"15649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"15650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"15651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"15652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"15653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"15654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"15655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"15656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"15657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"15658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"15659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"15660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"15661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"15663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"15665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"15666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"15667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "query"
		},
		"15668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"15669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"15670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"15671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"15672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"15673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"15674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"15675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"15676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "payload"
		},
		"15677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"15678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"15679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"15680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"15681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"15682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"15683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"15684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"15685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"15686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"15688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"15689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"15690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"15692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"15693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"15694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"15695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"15697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"15698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"15699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"15701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"15702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"15703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"15705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"15706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"15707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"15708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"15709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"15710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"15711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"15712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"15713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		}
	}
}