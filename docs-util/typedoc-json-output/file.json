{
	"id": 13748,
	"name": "file",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 13749,
			"name": "IFileService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\nA file service class is defined in a TypeScript or JavaScript file that’s created in the "
					},
					{
						"kind": "code",
						"text": "`src/services`"
					},
					{
						"kind": "text",
						"text": " directory.\nThe class must extend the "
					},
					{
						"kind": "code",
						"text": "`AbstractFileService`"
					},
					{
						"kind": "text",
						"text": " class imported from the "
					},
					{
						"kind": "code",
						"text": "`@medusajs/medusa`"
					},
					{
						"kind": "text",
						"text": " package.\n\nBased on services’ naming conventions, the file’s name should be the slug version of the file service’s name\nwithout "
					},
					{
						"kind": "code",
						"text": "`service`"
					},
					{
						"kind": "text",
						"text": ", and the class’s name should be the pascal case of the file service’s name following by "
					},
					{
						"kind": "code",
						"text": "`Service`"
					},
					{
						"kind": "text",
						"text": ".\n\nFor example, create the file "
					},
					{
						"kind": "code",
						"text": "`src/services/local-file.ts`"
					},
					{
						"kind": "text",
						"text": " with the following content:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/services/local-file.ts\"\nimport { AbstractFileService } from \"@medusajs/medusa\"\nimport {\n  DeleteFileType,\n  FileServiceGetUploadStreamResult,\n  FileServiceUploadResult,\n  GetUploadedFileType,\n  UploadStreamDescriptorType,\n} from \"@medusajs/types\"\n\nclass LocalFileService extends AbstractFileService {\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async delete(fileData: DeleteFileType): Promise<void> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getUploadStreamDescriptor(\n    fileData: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getDownloadStream(\n    fileData: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    throw new Error(\"Method not implemented.\")\n  }\n  async getPresignedDownloadUrl(\n    fileData: GetUploadedFileType\n  ): Promise<string> {\n    throw new Error(\"Method not implemented.\")\n  }\n}\n\nexport default LocalFileService\n```"
					},
					{
						"kind": "text",
						"text": "\n\n:::note[Multer Typing]\n\nThe examples implement a file service supporting local uploads.\n\nIf you’re using TypeScript and you're following along with the implementation,\nyou should install the Multer types package in the root of your Medusa backend to resolve errors within your file service types:\n\n"
					},
					{
						"kind": "code",
						"text": "```bash npm2yarn\nnpm install @types/multer\n```"
					},
					{
						"kind": "text",
						"text": "\n\n:::\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 13750,
					"name": "upload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13751,
							"name": "upload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.publicPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath,\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13752,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13753,
					"name": "uploadProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13754,
							"name": "uploadProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend, but to a protected storage. Typically, this would be used to store files that\nshouldn’t be accessible by using the file’s URL or should only be accessible by authenticated users. For example, exported or imported\nCSV files."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.protectedPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13755,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13756,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13757,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a file from storage."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the file is deleted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async delete(\n    fileData: DeleteFileType\n  ): Promise<void> {\n    fs.rmSync(fileData.fileKey)\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13758,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "DeleteFileType"
										},
										"name": "DeleteFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13759,
					"name": "getUploadStreamDescriptor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13760,
							"name": "getUploadStreamDescriptor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a write stream to be used to upload a file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the file-stream upload."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Stream } from \"stream\"\n\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async getUploadStreamDescriptor({\n      name,\n      ext,\n      isPrivate = true,\n    }: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${name}.${ext}`\n\n    const pass = new Stream.PassThrough()\n    const writeStream = fs.createWriteStream(filePath)\n\n    pass.pipe(writeStream)\n\n    return {\n      writeStream: pass,\n      promise: Promise.resolve(),\n      url: `${this.serverUrl}/${filePath}`,\n      fileKey: filePath,\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13761,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file being uploaded."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "UploadStreamDescriptorType"
										},
										"name": "UploadStreamDescriptorType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceGetUploadStreamResult"
										},
										"name": "FileServiceGetUploadStreamResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13762,
					"name": "getDownloadStream",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13763,
							"name": "getDownloadStream",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a read stream for a file, which can then be used to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The [read stream](https://nodejs.org/api/webstreams.html#class-readablestream) to read and download the file."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getDownloadStream({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    const readStream = fs.createReadStream(filePath)\n\n    return readStream\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13764,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
											"qualifiedName": "NodeJS.ReadableStream"
										},
										"name": "ReadableStream",
										"package": "@types/node",
										"qualifiedName": "NodeJS.ReadableStream"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13765,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13766,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a download URL of the file. For some file services, such as S3, a presigned URL indicates a temporary URL to get access to a file.\n\nIf your file service doesn’t perform or offer a similar functionality, you can just return the URL to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The presigned URL to download the file"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getPresignedDownloadUrl({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<string> {\n    // Local upload doesn't provide\n    // support for presigned URLs,\n    // so just return the file's URL.\n\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    return `${this.serverUrl}/${filePath}`\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13767,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13768,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					}
				},
				{
					"id": 13769,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					}
				},
				{
					"id": 13770,
					"name": "activeManager_",
					"variant": "declaration",
					"kind": 262144,
					"flags": {
						"isProtected": true
					},
					"getSignature": {
						"id": 13771,
						"name": "activeManager_",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
								"qualifiedName": "EntityManager"
							},
							"name": "EntityManager",
							"package": "typeorm"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "TransactionBaseService.activeManager_"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.activeManager_"
					}
				},
				{
					"id": 13772,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					}
				},
				{
					"id": 13773,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					}
				},
				{
					"id": 13774,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					}
				},
				{
					"id": 13775,
					"name": "withTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13776,
							"name": "withTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 13777,
									"name": "transactionManager",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
											"qualifiedName": "EntityManager"
										},
										"name": "EntityManager",
										"package": "typeorm"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.withTransaction"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.withTransaction"
					}
				},
				{
					"id": 13778,
					"name": "shouldRetryTransaction_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 13779,
							"name": "shouldRetryTransaction_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 13780,
									"name": "err",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 13781,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 13782,
															"name": "code",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																13782
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.shouldRetryTransaction_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.shouldRetryTransaction_"
					}
				},
				{
					"id": 13783,
					"name": "atomicPhase_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 13784,
							"name": "atomicPhase_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Wraps some work within a transactional block. If the service already has\na transaction manager attached this will be reused, otherwise a new\ntransaction manager is created."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the result of the transactional work"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 13785,
									"name": "TResult",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								},
								{
									"id": 13786,
									"name": "TError",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 13787,
									"name": "work",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the transactional work to be done"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 13788,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 13789,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 13790,
															"name": "transactionManager",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
																	"qualifiedName": "EntityManager"
																},
																"name": "EntityManager",
																"package": "typeorm"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 13785,
																"name": "TResult",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 13791,
									"name": "isolationOrErrorHandler",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the isolation level to be used for the work."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../node_modules/typeorm/driver/types/IsolationLevel.d.ts",
													"qualifiedName": "IsolationLevel"
												},
												"name": "IsolationLevel",
												"package": "typeorm"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 13792,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"signatures": [
														{
															"id": 13793,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 13794,
																	"name": "error",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 13786,
																		"name": "TError",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "void"
																			},
																			{
																				"type": "reference",
																				"target": 13785,
																				"name": "TResult",
																				"package": "@medusajs/medusa",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 13795,
									"name": "maybeErrorHandlerOrDontFail",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Potential error handler"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 13796,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 13797,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 13798,
															"name": "error",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 13786,
																"name": "TError",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	},
																	{
																		"type": "reference",
																		"target": 13785,
																		"name": "TResult",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																]
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 13785,
										"name": "TResult",
										"package": "@medusajs/medusa",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.atomicPhase_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.atomicPhase_"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						13768,
						13769,
						13772,
						13773,
						13774
					]
				},
				{
					"title": "Accessors",
					"children": [
						13770
					]
				},
				{
					"title": "Methods",
					"children": [
						13750,
						13753,
						13756,
						13759,
						13762,
						13765,
						13775,
						13778,
						13783
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 13799,
					"name": "AbstractFileService"
				}
			]
		},
		{
			"id": 13799,
			"name": "AbstractFileService",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 13804,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 13805,
							"name": "new AbstractFileService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your file service to access the different services in Medusa through dependency injection.\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party provider’s APIs,\nyou can initialize it in the constructor and use it in other methods in the service.\n\nAdditionally, if you’re creating your file service as an external plugin to be installed on any Medusa backend and you want to access the options added for the plugin,\nyou can access them in the constructor."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Logger } from \"@medusajs/medusa\"\nimport * as fs from \"fs\"\n\nclass LocalFileService extends AbstractFileService {\n  // can also be replaced by an environment variable\n  // or a plugin option\n  protected serverUrl = \"http://localhost:9000\"\n  protected publicPath = \"uploads\"\n  protected protectedPath = \"protected-uploads\"\n  protected logger_: Logger\n\n  constructor({ logger }: InjectedDependencies) {\n    // @ts-ignore\n    super(...arguments)\n    this.logger_ = logger\n\n    // for public uploads\n    if (!fs.existsSync(this.publicPath)) {\n      fs.mkdirSync(this.publicPath)\n    }\n\n    // for protected uploads\n    if (!fs.existsSync(this.protectedPath)) {\n      fs.mkdirSync(this.protectedPath)\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13806,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources, such as services, in your Medusa backend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 13807,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this file service is created in a plugin, the plugin's options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13799,
								"name": "AbstractFileService",
								"package": "@medusajs/medusa"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.constructor"
					}
				},
				{
					"id": 13808,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources, such as services, in your Medusa backend."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 13809,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this file service is created in a plugin, the plugin's options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 13810,
					"name": "upload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13811,
							"name": "upload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async upload(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.publicPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath,\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13812,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13751,
								"name": "IFileService.upload"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13750,
						"name": "IFileService.upload"
					}
				},
				{
					"id": 13813,
					"name": "uploadProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13814,
							"name": "uploadProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to upload a file to the Medusa backend, but to a protected storage. Typically, this would be used to store files that\nshouldn’t be accessible by using the file’s URL or should only be accessible by authenticated users. For example, exported or imported\nCSV files."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The details of the upload's result."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async uploadProtected(\n    fileData: Express.Multer.File\n  ): Promise<FileServiceUploadResult> {\n    const filePath =\n      `${this.protectedPath}/${fileData.originalname}`\n    fs.copyFileSync(fileData.path, filePath)\n    return {\n      url: `${this.serverUrl}/${filePath}`,\n      key: filePath\n    }\n  }\n  // ...\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\n:::tip\n\nThis example does not account for duplicate names to maintain simplicity in this guide. So, an uploaded file can replace another existing file that has the same name.\n\n:::"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13815,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A [multer file object](http://expressjs.com/en/resources/middleware/multer.html#file-information).\nThe file is uploaded to a temporary directory by default. Among the file’s details, you can access the file’s path in the "
											},
											{
												"kind": "code",
												"text": "`path`"
											},
											{
												"kind": "text",
												"text": " property of the file object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/@types/multer/index.d.ts",
											"qualifiedName": "__global.Express.Multer.File"
										},
										"name": "File",
										"package": "@types/multer",
										"qualifiedName": "__global.Express.Multer.File"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceUploadResult"
										},
										"name": "FileServiceUploadResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13754,
								"name": "IFileService.uploadProtected"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13753,
						"name": "IFileService.uploadProtected"
					}
				},
				{
					"id": 13816,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13817,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a file from storage."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the file is deleted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async delete(\n    fileData: DeleteFileType\n  ): Promise<void> {\n    fs.rmSync(fileData.fileKey)\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13818,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "DeleteFileType"
										},
										"name": "DeleteFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13757,
								"name": "IFileService.delete"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13756,
						"name": "IFileService.delete"
					}
				},
				{
					"id": 13819,
					"name": "getUploadStreamDescriptor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13820,
							"name": "getUploadStreamDescriptor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a write stream to be used to upload a file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The result of the file-stream upload."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { Stream } from \"stream\"\n\nclass LocalFileService extends AbstractFileService {\n  // ...\n  async getUploadStreamDescriptor({\n      name,\n      ext,\n      isPrivate = true,\n    }: UploadStreamDescriptorType\n  ): Promise<FileServiceGetUploadStreamResult> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${name}.${ext}`\n\n    const pass = new Stream.PassThrough()\n    const writeStream = fs.createWriteStream(filePath)\n\n    pass.pipe(writeStream)\n\n    return {\n      writeStream: pass,\n      promise: Promise.resolve(),\n      url: `${this.serverUrl}/${filePath}`,\n      fileKey: filePath,\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13821,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file being uploaded."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "UploadStreamDescriptorType"
										},
										"name": "UploadStreamDescriptorType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "FileServiceGetUploadStreamResult"
										},
										"name": "FileServiceGetUploadStreamResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13760,
								"name": "IFileService.getUploadStreamDescriptor"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13759,
						"name": "IFileService.getUploadStreamDescriptor"
					}
				},
				{
					"id": 13822,
					"name": "getDownloadStream",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13823,
							"name": "getDownloadStream",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a read stream for a file, which can then be used to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The [read stream](https://nodejs.org/api/webstreams.html#class-readablestream) to read and download the file."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getDownloadStream({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<NodeJS.ReadableStream> {\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    const readStream = fs.createReadStream(filePath)\n\n    return readStream\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13824,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/globals.d.ts",
											"qualifiedName": "NodeJS.ReadableStream"
										},
										"name": "ReadableStream",
										"package": "@types/node",
										"qualifiedName": "NodeJS.ReadableStream"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13763,
								"name": "IFileService.getDownloadStream"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13762,
						"name": "IFileService.getDownloadStream"
					}
				},
				{
					"id": 13825,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13826,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a download URL of the file. For some file services, such as S3, a presigned URL indicates a temporary URL to get access to a file.\n\nIf your file service doesn’t perform or offer a similar functionality, you can just return the URL to download the file."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The presigned URL to download the file"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass LocalFileService extends AbstractFileService {\n\n  async getPresignedDownloadUrl({\n      fileKey,\n      isPrivate = true,\n    }: GetUploadedFileType\n  ): Promise<string> {\n    // Local upload doesn't provide\n    // support for presigned URLs,\n    // so just return the file's URL.\n\n    const filePath = `${isPrivate ?\n      this.publicPath : this.protectedPath\n    }/${fileKey}`\n    return `${this.serverUrl}/${filePath}`\n  }\n\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13827,
									"name": "fileData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the file."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/file-service/index.ts",
											"qualifiedName": "GetUploadedFileType"
										},
										"name": "GetUploadedFileType",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 13766,
								"name": "IFileService.getPresignedDownloadUrl"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 13765,
						"name": "IFileService.getPresignedDownloadUrl"
					}
				},
				{
					"id": 13828,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 13768,
						"name": "IFileService.manager_"
					}
				},
				{
					"id": 13829,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 13769,
						"name": "IFileService.transactionManager_"
					}
				},
				{
					"id": 13832,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 13772,
						"name": "IFileService.__container__"
					}
				},
				{
					"id": 13833,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 13773,
						"name": "IFileService.__configModule__"
					}
				},
				{
					"id": 13834,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 13774,
						"name": "IFileService.__moduleDeclaration__"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13804
					]
				},
				{
					"title": "Properties",
					"children": [
						13808,
						13809,
						13828,
						13829,
						13832,
						13833,
						13834
					]
				},
				{
					"title": "Methods",
					"children": [
						13810,
						13813,
						13816,
						13819,
						13822,
						13825
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 13749,
					"name": "IFileService",
					"package": "@medusajs/medusa"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				13799
			]
		},
		{
			"title": "Interfaces",
			"children": [
				13749
			]
		}
	],
	"packageName": "@medusajs/medusa",
	"symbolIdMap": {
		"13748": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": ""
		},
		"13749": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService"
		},
		"13750": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.upload"
		},
		"13751": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.upload"
		},
		"13752": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "file"
		},
		"13753": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.uploadProtected"
		},
		"13754": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.uploadProtected"
		},
		"13755": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "file"
		},
		"13756": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.delete"
		},
		"13757": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.delete"
		},
		"13758": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13759": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getUploadStreamDescriptor"
		},
		"13760": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getUploadStreamDescriptor"
		},
		"13761": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13762": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getDownloadStream"
		},
		"13763": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getDownloadStream"
		},
		"13764": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13765": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getPresignedDownloadUrl"
		},
		"13766": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "IFileService.getPresignedDownloadUrl"
		},
		"13767": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13768": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"13769": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"13770": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"13771": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"13772": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"13773": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"13774": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"13775": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"13776": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"13777": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"13778": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"13779": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"13780": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"13781": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13782": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"13783": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"13784": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"13785": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"13786": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"13787": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"13788": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13789": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13790": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"13791": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"13792": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13793": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13794": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"13795": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"13796": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13797": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13798": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"13799": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService"
		},
		"13804": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.__constructor"
		},
		"13805": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService"
		},
		"13806": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "container"
		},
		"13807": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "config"
		},
		"13808": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.container"
		},
		"13809": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.config"
		},
		"13810": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.upload"
		},
		"13811": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.upload"
		},
		"13812": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13813": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.uploadProtected"
		},
		"13814": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.uploadProtected"
		},
		"13815": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13816": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.delete"
		},
		"13817": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.delete"
		},
		"13818": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13819": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getUploadStreamDescriptor"
		},
		"13820": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getUploadStreamDescriptor"
		},
		"13821": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13822": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getDownloadStream"
		},
		"13823": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getDownloadStream"
		},
		"13824": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13825": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getPresignedDownloadUrl"
		},
		"13826": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "AbstractFileService.getPresignedDownloadUrl"
		},
		"13827": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/file-service.ts",
			"qualifiedName": "fileData"
		},
		"13828": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"13829": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"13830": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"13831": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"13832": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"13833": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"13834": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"13835": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"13836": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"13837": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"13838": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"13839": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"13840": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"13841": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13842": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"13843": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"13844": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"13845": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"13846": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"13847": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"13848": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13849": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13850": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"13851": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"13852": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13853": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13854": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"13855": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"13856": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13857": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"13858": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		}
	}
}