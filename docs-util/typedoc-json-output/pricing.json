{
	"id": 0,
	"name": "pricing",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 268,
			"name": "FindConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to configure how an entity is retrieved from the database. It accepts as a typed parameter an "
					},
					{
						"kind": "code",
						"text": "`Entity`"
					},
					{
						"kind": "text",
						"text": " class,\nwhich provides correct typing of field names in its properties."
					}
				]
			},
			"children": [
				{
					"id": 269,
					"name": "select",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being attribute names of the entity to retrieve in the result."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"target": 279,
										"name": "Entity",
										"package": "@medusajs/types",
										"qualifiedName": "FindConfig.Entity",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				},
				{
					"id": 270,
					"name": "skip",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to skip before retrieving the results."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 271,
					"name": "take",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to return in the result."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 272,
					"name": "relations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being relation names of the entity to retrieve in the result."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 273,
					"name": "order",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object used to specify how to sort the returned records. Its keys are the names of attributes of the entity, and a key's value can either be "
							},
							{
								"kind": "code",
								"text": "`ASC`"
							},
							{
								"kind": "text",
								"text": "\nto sort retrieved records in an ascending order, or "
							},
							{
								"kind": "code",
								"text": "`DESC`"
							},
							{
								"kind": "text",
								"text": " to sort retrieved records in a descending order."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 274,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"indexSignature": {
								"id": 275,
								"name": "__index",
								"variant": "signature",
								"kind": 8192,
								"flags": {},
								"parameters": [
									{
										"id": 276,
										"name": "K",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "ASC"
										},
										{
											"type": "literal",
											"value": "DESC"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 277,
					"name": "withDeleted",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean indicating whether deleted records should also be retrieved as part of the result. This only works if the entity extends the\n"
							},
							{
								"kind": "code",
								"text": "`SoftDeletableEntity`"
							},
							{
								"kind": "text",
								"text": " class."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 278,
					"name": "filters",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Enable ORM specific defined filters"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						269,
						270,
						271,
						272,
						273,
						277,
						278
					]
				}
			],
			"typeParameters": [
				{
					"id": 279,
					"name": "Entity",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 516,
			"name": "BaseFilterable",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object used to allow specifying flexible queries with and/or conditions."
					}
				]
			},
			"children": [
				{
					"id": 517,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 519,
											"name": "T",
											"package": "@medusajs/types",
											"qualifiedName": "BaseFilterable.T",
											"refersToTypeParameter": true
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 519,
									"name": "T",
									"package": "@medusajs/types",
									"qualifiedName": "BaseFilterable.T",
									"refersToTypeParameter": true
								}
							]
						}
					}
				},
				{
					"id": 518,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 519,
											"name": "T",
											"package": "@medusajs/types",
											"qualifiedName": "BaseFilterable.T",
											"refersToTypeParameter": true
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 519,
									"name": "T",
									"package": "@medusajs/types",
									"qualifiedName": "BaseFilterable.T",
									"refersToTypeParameter": true
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						517,
						518
					]
				}
			],
			"typeParameters": [
				{
					"id": 519,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 284,
					"name": "FilterablePriceSetProps"
				},
				{
					"type": "reference",
					"target": 314,
					"name": "FilterableRuleTypeProps"
				},
				{
					"type": "reference",
					"target": 330,
					"name": "FilterablePriceProps"
				},
				{
					"type": "reference",
					"target": 370,
					"name": "FilterablePriceRuleProps"
				},
				{
					"type": "reference",
					"target": 403,
					"name": "FilterablePriceListProps"
				},
				{
					"type": "reference",
					"target": 436,
					"name": "FilterablePriceListRuleProps"
				},
				{
					"type": "reference",
					"target": 520,
					"name": "FilterableMoneyAmountProps"
				}
			]
		},
		{
			"id": 351,
			"name": "SoftDeleteReturn",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to specify an entity's related entities that should be soft-deleted when the main entity is soft-deleted."
					}
				]
			},
			"children": [
				{
					"id": 352,
					"name": "returnLinkableKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being the ID attribute names of the entity's relations."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 353,
							"name": "TReturnableLinkableKeys",
							"package": "@medusajs/types",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						352
					]
				}
			],
			"typeParameters": [
				{
					"id": 353,
					"name": "TReturnableLinkableKeys",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 354,
			"name": "RestoreReturn",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to specify an entity's related entities that should be restored when the main entity is restored."
					}
				]
			},
			"children": [
				{
					"id": 355,
					"name": "returnLinkableKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being the ID attribute names of the entity's relations."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 356,
							"name": "TReturnableLinkableKeys",
							"package": "@medusajs/types",
							"refersToTypeParameter": true
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						355
					]
				}
			],
			"typeParameters": [
				{
					"id": 356,
					"name": "TReturnableLinkableKeys",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 626,
			"name": "MessageBody",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"typeParameters": [
				{
					"id": 635,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 627,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 628,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 629,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 630,
											"name": "service",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 631,
											"name": "action",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 632,
											"name": "object",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 633,
											"name": "eventGroupId",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												630,
												631,
												632,
												633
											]
										}
									]
								}
							}
						},
						{
							"id": 634,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 635,
								"name": "T",
								"package": "@medusajs/types",
								"refersToTypeParameter": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								628,
								634
							]
						}
					]
				}
			}
		},
		{
			"id": 577,
			"name": "Message",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"typeParameters": [
				{
					"id": 582,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 578,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 579,
							"name": "eventName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 580,
							"name": "body",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 626,
								"typeArguments": [
									{
										"type": "reference",
										"target": 582,
										"name": "T",
										"package": "@medusajs/types",
										"refersToTypeParameter": true
									}
								],
								"name": "MessageBody",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 581,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								579,
								580,
								581
							]
						}
					]
				}
			}
		},
		{
			"id": 589,
			"name": "MessageFormat",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"typeParameters": [
				{
					"id": 599,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 590,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 591,
							"name": "eventName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 592,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 593,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 594,
											"name": "service",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 595,
											"name": "action",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 596,
											"name": "object",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 597,
											"name": "eventGroupId",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												594,
												595,
												596,
												597
											]
										}
									]
								}
							}
						},
						{
							"id": 598,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 599,
										"name": "T",
										"package": "@medusajs/types",
										"refersToTypeParameter": true
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 599,
											"name": "T",
											"package": "@medusajs/types",
											"refersToTypeParameter": true
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								591,
								592,
								598
							]
						}
					]
				}
			}
		},
		{
			"id": 616,
			"name": "JoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 617,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 618,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 619,
							"name": "foreignKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 620,
							"name": "primaryKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 621,
							"name": "serviceName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 622,
							"name": "isInternalService",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, the relationship is an internal service from the medusa core\nTODO: Remove when there are no more \"internal\" services"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 623,
							"name": "inverse",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "In an inverted relationship the foreign key is on the other service and the primary key is on the current service"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 624,
							"name": "isList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Force the relationship to return a list"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 625,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extra arguments to pass to the remoteFetchData callback"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								618,
								619,
								620,
								621,
								622,
								623,
								624,
								625
							]
						}
					]
				}
			}
		},
		{
			"id": 613,
			"name": "JoinerServiceConfigAlias",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 614,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 615,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						614,
						615
					]
				}
			]
		},
		{
			"id": 559,
			"name": "JoinerServiceConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 560,
					"name": "serviceName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 561,
					"name": "alias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Property name to use as entrypoint to the service"
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 613,
								"name": "JoinerServiceConfigAlias",
								"package": "@medusajs/types"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 613,
									"name": "JoinerServiceConfigAlias",
									"package": "@medusajs/types"
								}
							}
						]
					}
				},
				{
					"id": 562,
					"name": "fieldAlias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "alias for deeper nested relationships (e.g. { 'price': 'prices.calculated_price_set.amount' })"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 563,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 564,
													"name": "path",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 565,
													"name": "forwardArgumentsOnPath",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														564,
														565
													]
												}
											]
										}
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 566,
					"name": "primaryKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 567,
					"name": "relationships",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 616,
							"name": "JoinerRelationship",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 568,
					"name": "extends",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 569,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 570,
										"name": "serviceName",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 571,
										"name": "relationship",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"type": {
											"type": "reference",
											"target": 616,
											"name": "JoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											570,
											571
										]
									}
								]
							}
						}
					}
				},
				{
					"id": 572,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						560,
						561,
						562,
						566,
						567,
						568,
						572
					]
				}
			]
		},
		{
			"id": 466,
			"name": "ModuleJoinerConfig",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 559,
								"name": "JoinerServiceConfig",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "serviceName"
									},
									{
										"type": "literal",
										"value": "primaryKeys"
									},
									{
										"type": "literal",
										"value": "relationships"
									},
									{
										"type": "literal",
										"value": "extends"
									}
								]
							}
						],
						"name": "Omit",
						"package": "typescript"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 467,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 468,
									"name": "schema",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "GraphQL schema for the all module's available entities and fields"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 469,
									"name": "relationships",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 573,
											"name": "ModuleJoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 470,
									"name": "extends",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 471,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 472,
														"name": "serviceName",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 473,
														"name": "fieldAlias",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"type": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "reflection",
																			"declaration": {
																				"id": 474,
																				"name": "__type",
																				"variant": "declaration",
																				"kind": 65536,
																				"flags": {},
																				"children": [
																					{
																						"id": 475,
																						"name": "path",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					},
																					{
																						"id": 476,
																						"name": "forwardArgumentsOnPath",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"type": {
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"children": [
																							475,
																							476
																						]
																					}
																				]
																			}
																		}
																	]
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													},
													{
														"id": 477,
														"name": "relationship",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"type": {
															"type": "reference",
															"target": 573,
															"name": "ModuleJoinerRelationship",
															"package": "@medusajs/types"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															472,
															473,
															477
														]
													}
												]
											}
										}
									}
								},
								{
									"id": 478,
									"name": "serviceName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 479,
									"name": "primaryKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 480,
									"name": "isLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the module is a link module"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 481,
									"name": "linkableKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Keys that can be used to link to other modules. e.g { product_id: \"Product\" } \"Product\" being the entity it refers to"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 482,
									"name": "isReadOnlyLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true it expands a RemoteQuery property but doesn't create a pivot table"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 483,
									"name": "databaseConfig",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 484,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 485,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Name of the pivot table. If not provided it is auto generated"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 486,
													"name": "idPrefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Prefix for the id column. If not provided it is \"link\""
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 487,
													"name": "extraFields",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 488,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 489,
																			"name": "type",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "literal",
																						"value": "date"
																					},
																					{
																						"type": "literal",
																						"value": "time"
																					},
																					{
																						"type": "literal",
																						"value": "datetime"
																					},
																					{
																						"type": "literal",
																						"value": "bigint"
																					},
																					{
																						"type": "literal",
																						"value": "blob"
																					},
																					{
																						"type": "literal",
																						"value": "uint8array"
																					},
																					{
																						"type": "literal",
																						"value": "array"
																					},
																					{
																						"type": "literal",
																						"value": "enumArray"
																					},
																					{
																						"type": "literal",
																						"value": "enum"
																					},
																					{
																						"type": "literal",
																						"value": "json"
																					},
																					{
																						"type": "literal",
																						"value": "integer"
																					},
																					{
																						"type": "literal",
																						"value": "smallint"
																					},
																					{
																						"type": "literal",
																						"value": "tinyint"
																					},
																					{
																						"type": "literal",
																						"value": "mediumint"
																					},
																					{
																						"type": "literal",
																						"value": "float"
																					},
																					{
																						"type": "literal",
																						"value": "double"
																					},
																					{
																						"type": "literal",
																						"value": "boolean"
																					},
																					{
																						"type": "literal",
																						"value": "decimal"
																					},
																					{
																						"type": "literal",
																						"value": "string"
																					},
																					{
																						"type": "literal",
																						"value": "uuid"
																					},
																					{
																						"type": "literal",
																						"value": "text"
																					}
																				]
																			}
																		},
																		{
																			"id": 490,
																			"name": "defaultValue",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 491,
																			"name": "nullable",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 492,
																			"name": "options",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Mikro-orm options for the column"
																					}
																				]
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																					"qualifiedName": "Record"
																				},
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					},
																					{
																						"type": "intrinsic",
																						"name": "unknown"
																					}
																				],
																				"name": "Record",
																				"package": "typescript"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				489,
																				490,
																				491,
																				492
																			]
																		}
																	]
																}
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														485,
														486,
														487
													]
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										468,
										469,
										470,
										478,
										479,
										480,
										481,
										482,
										483
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 573,
			"name": "ModuleJoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 616,
						"name": "JoinerRelationship",
						"package": "@medusajs/types"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 574,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 575,
									"name": "isInternalService",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the relationship is an internal service from the medusa core TODO: Remove when there are no more \"internal\" services"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 576,
									"name": "deleteCascade",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the link joiner will cascade deleting the relationship"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										575,
										576
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 224,
			"name": "IModuleService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"extendedBy": [
				{
					"type": "reference",
					"target": 1,
					"name": "IPricingModuleService"
				}
			]
		},
		{
			"id": 507,
			"name": "MoneyAmountDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A money amount's data. A money amount represents a price."
					}
				]
			},
			"children": [
				{
					"id": 508,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 509,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 510,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 511,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this price to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 512,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this price to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 513,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the money_amount was created."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 514,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the money_amount was updated."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 515,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the money_amount was deleted."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						508,
						509,
						510,
						511,
						512,
						513,
						514,
						515
					]
				}
			]
		},
		{
			"id": 600,
			"name": "CreateMoneyAmountDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The money amount to create."
					}
				]
			},
			"children": [
				{
					"id": 601,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 602,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 603,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 604,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 605,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						601,
						602,
						603,
						604,
						605
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 525,
					"name": "CreatePricesDTO"
				},
				{
					"type": "reference",
					"target": 539,
					"name": "CreatePriceListPriceDTO"
				}
			]
		},
		{
			"id": 607,
			"name": "UpdateMoneyAmountDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a money amount. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which money amount to update."
					}
				]
			},
			"children": [
				{
					"id": 608,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 609,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The code of the currency to associate with the money amount."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 610,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 611,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 612,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						608,
						609,
						610,
						611,
						612
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 551,
					"name": "UpdatePriceListPriceDTO"
				}
			]
		},
		{
			"id": 520,
			"name": "FilterableMoneyAmountProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on a money amount."
					}
				]
			},
			"children": [
				{
					"id": 523,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 520,
									"name": "FilterableMoneyAmountProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 520,
											"name": "FilterableMoneyAmountProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 524,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 520,
									"name": "FilterableMoneyAmountProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 520,
											"name": "FilterableMoneyAmountProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 521,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "IDs to filter money amounts by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 522,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Currency codes to filter money amounts by."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						523,
						524,
						521,
						522
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 520,
							"name": "FilterableMoneyAmountProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 532,
			"name": "PriceListStatus",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list's status."
					}
				]
			},
			"children": [
				{
					"id": 533,
					"name": "ACTIVE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list is enabled and its prices can be used."
							}
						]
					},
					"type": {
						"type": "literal",
						"value": "active"
					}
				},
				{
					"id": 534,
					"name": "DRAFT",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list is disabled, meaning its prices can't be used yet."
							}
						]
					},
					"type": {
						"type": "literal",
						"value": "draft"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						533,
						534
					]
				}
			]
		},
		{
			"id": 535,
			"name": "PriceListType",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list's type."
					}
				]
			},
			"children": [
				{
					"id": 536,
					"name": "SALE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's prices are used for a sale."
							}
						]
					},
					"type": {
						"type": "literal",
						"value": "sale"
					}
				},
				{
					"id": 537,
					"name": "OVERRIDE",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's prices override original prices. This affects the calculated price of associated price sets."
							}
						]
					},
					"type": {
						"type": "literal",
						"value": "override"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						536,
						537
					]
				}
			]
		},
		{
			"id": 391,
			"name": "PriceListDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price list's details."
					}
				]
			},
			"children": [
				{
					"id": 392,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's ID."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 393,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's title."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 394,
					"name": "starts_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list is enabled starting from this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 395,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's status."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 532,
						"name": "PriceListStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 396,
					"name": "ends_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list expires after this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 397,
					"name": "rules_count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The number of rules associated with this price list."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 398,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated price set money amounts."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 337,
							"name": "PriceDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 399,
					"name": "money_amounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated money amounts."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 507,
							"name": "MoneyAmountDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 400,
					"name": "rule_types",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated rule types."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 307,
							"name": "RuleTypeDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 401,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price set's rules."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 430,
							"name": "PriceListRuleDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 402,
					"name": "price_list_rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price set's rules."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 430,
							"name": "PriceListRuleDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						392,
						393,
						394,
						395,
						396,
						397,
						398,
						399,
						400,
						401,
						402
					]
				}
			]
		},
		{
			"id": 539,
			"name": "CreatePriceListPriceDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The prices associated with a price list."
					}
				]
			},
			"children": [
				{
					"id": 542,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 601,
						"name": "CreateMoneyAmountDTO.id"
					}
				},
				{
					"id": 543,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 602,
						"name": "CreateMoneyAmountDTO.currency_code"
					}
				},
				{
					"id": 544,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 603,
						"name": "CreateMoneyAmountDTO.amount"
					}
				},
				{
					"id": 545,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 604,
						"name": "CreateMoneyAmountDTO.min_quantity"
					}
				},
				{
					"id": 546,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 605,
						"name": "CreateMoneyAmountDTO.max_quantity"
					}
				},
				{
					"id": 540,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 541,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to add to the price. The object's keys are rule types' "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": " attribute, and values are the value of that rule associated with this price."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 606,
						"name": "CreatePriceSetPriceRules",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						542,
						543,
						544,
						545,
						546,
						540,
						541
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 600,
					"name": "CreateMoneyAmountDTO",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 551,
			"name": "UpdatePriceListPriceDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a money amount. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which money amount to update."
					}
				]
			},
			"children": [
				{
					"id": 554,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 608,
						"name": "UpdateMoneyAmountDTO.id"
					}
				},
				{
					"id": 555,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The code of the currency to associate with the money amount."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 609,
						"name": "UpdateMoneyAmountDTO.currency_code"
					}
				},
				{
					"id": 556,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 610,
						"name": "UpdateMoneyAmountDTO.amount"
					}
				},
				{
					"id": 557,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 611,
						"name": "UpdateMoneyAmountDTO.min_quantity"
					}
				},
				{
					"id": 558,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 612,
						"name": "UpdateMoneyAmountDTO.max_quantity"
					}
				},
				{
					"id": 552,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 553,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to add to the price. The object's keys are rule types' "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": " attribute, and values are the value of that rule associated with this price."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 606,
						"name": "CreatePriceSetPriceRules",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						554,
						555,
						556,
						557,
						558,
						552,
						553
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 607,
					"name": "UpdateMoneyAmountDTO",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 606,
			"name": "CreatePriceSetPriceRules",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price rules to be set for each price in the price set.\n\nEach key of the object is a rule type's "
					},
					{
						"kind": "code",
						"text": "`rule_attribute`"
					},
					{
						"kind": "text",
						"text": ", and its value\nis the values of the rule."
					}
				]
			},
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Record"
					},
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "Record",
					"package": "typescript"
				}
			]
		},
		{
			"id": 538,
			"name": "CreatePriceListRules",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list's rules to be set. Each key of the object is a rule type's "
					},
					{
						"kind": "code",
						"text": "`rule_attribute`"
					},
					{
						"kind": "text",
						"text": ", and its value\nis the values of the rule."
					}
				]
			},
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Record"
					},
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"name": "Record",
					"package": "typescript"
				}
			]
		},
		{
			"id": 411,
			"name": "CreatePriceListDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list to create."
					}
				]
			},
			"children": [
				{
					"id": 412,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's title."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 413,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's description."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 414,
					"name": "starts_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list is enabled starting from this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 415,
					"name": "ends_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list expires after this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 416,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's status."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 532,
						"name": "PriceListStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 417,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's type."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 535,
						"name": "PriceListType",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 418,
					"name": "rules_count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The number of rules associated with the price list."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 419,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to be created and associated with the price list."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 538,
						"name": "CreatePriceListRules",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 420,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices associated with the price list."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 539,
							"name": "CreatePriceListPriceDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						412,
						413,
						414,
						415,
						416,
						417,
						418,
						419,
						420
					]
				}
			]
		},
		{
			"id": 421,
			"name": "UpdatePriceListDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The attributes to update in a price list."
					}
				]
			},
			"children": [
				{
					"id": 422,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 423,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's title."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 424,
					"name": "description",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's description."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 425,
					"name": "starts_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list is enabled starting from this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 426,
					"name": "ends_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list expires after this date."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 427,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list's status."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 532,
						"name": "PriceListStatus",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 428,
					"name": "rules_count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The number of rules associated with the price list."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 429,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to be created and associated with the price list."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 538,
						"name": "CreatePriceListRules",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						422,
						423,
						424,
						425,
						426,
						427,
						428,
						429
					]
				}
			]
		},
		{
			"id": 403,
			"name": "FilterablePriceListProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on price lists."
					}
				]
			},
			"children": [
				{
					"id": 409,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 403,
									"name": "FilterablePriceListProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 403,
											"name": "FilterablePriceListProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 410,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 403,
									"name": "FilterablePriceListProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 403,
											"name": "FilterablePriceListProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 404,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter price lists by"
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 405,
					"name": "starts_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The start dates to filter price lists by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 406,
					"name": "ends_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The end dates to filter price lists by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 407,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The statuses to filter price lists by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 532,
							"name": "PriceListStatus",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 408,
					"name": "rules_count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The number of rules to filter price lists by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						409,
						410,
						404,
						405,
						406,
						407,
						408
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 403,
							"name": "FilterablePriceListProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 436,
			"name": "FilterablePriceListRuleProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on price list rules."
					}
				]
			},
			"children": [
				{
					"id": 441,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 436,
									"name": "FilterablePriceListRuleProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 436,
											"name": "FilterablePriceListRuleProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 442,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 436,
									"name": "FilterablePriceListRuleProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 436,
											"name": "FilterablePriceListRuleProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 437,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter price list rules by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 438,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The values to filter price list rules by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 439,
					"name": "rule_type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter price list rules by the ID of their associated rule types."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 440,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filter price list rules by the ID of their associated price lists."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						441,
						442,
						437,
						438,
						439,
						440
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 436,
							"name": "FilterablePriceListRuleProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 430,
			"name": "PriceListRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list rule's details."
					}
				]
			},
			"children": [
				{
					"id": 431,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list rule's ID."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 432,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 433,
					"name": "rule_type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated rule type."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 307,
						"name": "RuleTypeDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 434,
					"name": "price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated price list."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 391,
						"name": "PriceListDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 435,
					"name": "price_list_rule_values",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated rule values."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 547,
							"name": "PriceListRuleValueDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						431,
						432,
						433,
						434,
						435
					]
				}
			]
		},
		{
			"id": 443,
			"name": "CreatePriceListRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list rule to create."
					}
				]
			},
			"children": [
				{
					"id": 444,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a rule type to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 445,
					"name": "rule_type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a rule type or the details of an existing rule type to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": 307,
								"name": "RuleTypeDTO",
								"package": "@medusajs/types"
							}
						]
					}
				},
				{
					"id": 446,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a price list to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 447,
					"name": "price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a price list or the details of an existing price list to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": 391,
								"name": "PriceListDTO",
								"package": "@medusajs/types"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						444,
						445,
						446,
						447
					]
				}
			]
		},
		{
			"id": 448,
			"name": "UpdatePriceListRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The attributes to update in a price list rule."
					}
				]
			},
			"children": [
				{
					"id": 449,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list rule to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 450,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a price list to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 451,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a rule type to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 452,
					"name": "price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a price list to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 453,
					"name": "rule_type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a rule type or the details of an existing rule type to be associated with the price list rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						449,
						450,
						451,
						452,
						453
					]
				}
			]
		},
		{
			"id": 547,
			"name": "PriceListRuleValueDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The price list rule value's details."
					}
				]
			},
			"children": [
				{
					"id": 548,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list rule value's ID."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 549,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rule's value."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 550,
					"name": "price_list_rule",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated price list rule."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 430,
						"name": "PriceListRuleDTO",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						548,
						549,
						550
					]
				}
			]
		},
		{
			"id": 454,
			"name": "AddPriceListPricesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The prices to be added to a price list."
					}
				]
			},
			"children": [
				{
					"id": 455,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list to add prices to."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 456,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices to add."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 539,
							"name": "CreatePriceListPriceDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						455,
						456
					]
				}
			]
		},
		{
			"id": 457,
			"name": "UpdatePriceListPricesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The prices to be added to a price list."
					}
				]
			},
			"children": [
				{
					"id": 458,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list to add prices to."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 459,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices to add."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 551,
							"name": "UpdatePriceListPriceDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						458,
						459
					]
				}
			]
		},
		{
			"id": 460,
			"name": "SetPriceListRulesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rules to add to a price list."
					}
				]
			},
			"children": [
				{
					"id": 461,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list to add rules to."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 462,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to add to the price list. Each key of the object is a rule type's "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": ", and its value\nis the value(s) of the rule."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						461,
						462
					]
				}
			]
		},
		{
			"id": 463,
			"name": "RemovePriceListRulesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rules to remove from a price list."
					}
				]
			},
			"children": [
				{
					"id": 464,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price list to remove rules from."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 465,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to remove from the price list. Each item being a rule type's "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						464,
						465
					]
				}
			]
		},
		{
			"id": 357,
			"name": "PriceRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price rule's data."
					}
				]
			},
			"children": [
				{
					"id": 358,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 359,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 360,
					"name": "price_set",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated price set."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 280,
						"name": "PriceSetDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 361,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 362,
					"name": "rule_type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The associated rule type."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 307,
						"name": "RuleTypeDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 363,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the price rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 364,
					"name": "priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the price rule in comparison to other applicable price rules."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 365,
					"name": "price_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 366,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price list."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 367,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price_rule was created."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 368,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price_rule was updated."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 369,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price_rule was deleted."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						358,
						359,
						360,
						361,
						362,
						363,
						364,
						365,
						366,
						367,
						368,
						369
					]
				}
			]
		},
		{
			"id": 377,
			"name": "CreatePriceRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price rule to create."
					}
				]
			},
			"children": [
				{
					"id": 378,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 379,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 380,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the price rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 381,
					"name": "priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the price rule in comparison to other applicable price rules."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 382,
					"name": "price_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						378,
						379,
						380,
						381,
						382
					]
				}
			]
		},
		{
			"id": 383,
			"name": "UpdatePriceRuleDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a price rule. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which price rule to update."
					}
				]
			},
			"children": [
				{
					"id": 384,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 385,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 386,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 387,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the price rule."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 388,
					"name": "priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the price rule in comparison to other applicable price rules."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 389,
					"name": "price_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 390,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price list."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						384,
						385,
						386,
						387,
						388,
						389,
						390
					]
				}
			]
		},
		{
			"id": 370,
			"name": "FilterablePriceRuleProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on price rules."
					}
				]
			},
			"children": [
				{
					"id": 375,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 370,
									"name": "FilterablePriceRuleProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 370,
											"name": "FilterablePriceRuleProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 376,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 370,
									"name": "FilterablePriceRuleProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 370,
											"name": "FilterablePriceRuleProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 371,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter price rules by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 372,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The names to filter price rules by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 373,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter the price rule's associated price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 374,
					"name": "rule_type_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter the price rule's associated rule type."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						375,
						376,
						371,
						372,
						373,
						374
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 370,
							"name": "FilterablePriceRuleProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 234,
			"name": "PricingContext",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The context to calculate prices. For example, you can specify the currency code to calculate prices in."
					}
				]
			},
			"children": [
				{
					"id": 235,
					"name": "context",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "an object whose keys are the name of the context attribute. Its value can be a string or a number. For example, you can pass the "
							},
							{
								"kind": "code",
								"text": "`currency_code`"
							},
							{
								"kind": "text",
								"text": " property with its value being the currency code to calculate the price in.\nAnother example is passing the "
							},
							{
								"kind": "code",
								"text": "`quantity`"
							},
							{
								"kind": "text",
								"text": " property to calculate the price for that specified quantity, which finds a price set whose "
							},
							{
								"kind": "code",
								"text": "`min_quantity`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`max_quantity`"
							},
							{
								"kind": "text",
								"text": " conditions match the specified quantity."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						235
					]
				}
			]
		},
		{
			"id": 232,
			"name": "PricingFilters",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on prices."
					}
				]
			},
			"children": [
				{
					"id": 233,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "IDs to filter prices."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						233
					]
				}
			]
		},
		{
			"id": 280,
			"name": "PriceSetDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price set's data."
					}
				]
			},
			"children": [
				{
					"id": 281,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 282,
					"name": "money_amounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices that belong to this price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 507,
							"name": "MoneyAmountDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 283,
					"name": "rule_types",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rule types applied on this price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 307,
							"name": "RuleTypeDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						281,
						282,
						283
					]
				}
			]
		},
		{
			"id": 247,
			"name": "CalculatedPriceSet",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The calculated price for a specific price set and context."
					}
				]
			},
			"children": [
				{
					"id": 248,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 249,
					"name": "is_calculated_price_price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the calculated price is associated with a price list. During the calculation process, if no valid price list is found,\nthe calculated price is set to the original price, which doesn't belong to a price list. In that case, the value of this property is "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 250,
					"name": "calculated_amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of the calculated price, or "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " if there isn't a calculated price."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 251,
					"name": "is_original_price_price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the original price is associated with a price list. During the calculation process, if the price list of the calculated price is of type override,\nthe original price will be the same as the calculated price. In that case, the value of this property is "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 252,
					"name": "original_amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of the original price, or "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " if there isn't a calculated price."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 253,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of the calculated price, or null if there isn't a calculated price."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 254,
					"name": "calculated_price",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The details of the calculated price."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 255,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 256,
									"name": "id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price selected as the calculated price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 257,
									"name": "price_list_id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the associated price list, if any."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 258,
									"name": "price_list_type",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the associated price list, if any."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 259,
									"name": "min_quantity",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`min_quantity`"
											},
											{
												"kind": "text",
												"text": " field defined on a price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 260,
									"name": "max_quantity",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`max_quantity`"
											},
											{
												"kind": "text",
												"text": " field defined on a price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										256,
										257,
										258,
										259,
										260
									]
								}
							]
						}
					}
				},
				{
					"id": 261,
					"name": "original_price",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The details of the original price."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 262,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 263,
									"name": "id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price selected as the original price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 264,
									"name": "price_list_id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the associated price list, if any."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 265,
									"name": "price_list_type",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the associated price list, if any."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 266,
									"name": "min_quantity",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`min_quantity`"
											},
											{
												"kind": "text",
												"text": " field defined on a price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 267,
									"name": "max_quantity",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`max_quantity`"
											},
											{
												"kind": "text",
												"text": " field defined on a price."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										263,
										264,
										265,
										266,
										267
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						248,
						249,
						250,
						251,
						252,
						253,
						254,
						261
					]
				}
			]
		},
		{
			"id": 302,
			"name": "AddRulesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rules to add to a price set."
					}
				]
			},
			"children": [
				{
					"id": 303,
					"name": "priceSetId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price set to add the rules to."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 304,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to add to a price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 305,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 306,
										"name": "attribute",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"comment": {
											"summary": [
												{
													"kind": "text",
													"text": "The value of the rule's "
												},
												{
													"kind": "code",
													"text": "`rule_attribute`"
												},
												{
													"kind": "text",
													"text": " attribute."
												}
											]
										},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											306
										]
									}
								]
							}
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						303,
						304
					]
				}
			]
		},
		{
			"id": 525,
			"name": "CreatePricesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The prices to create part of a price set."
					}
				]
			},
			"children": [
				{
					"id": 527,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 601,
						"name": "CreateMoneyAmountDTO.id"
					}
				},
				{
					"id": 528,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 602,
						"name": "CreateMoneyAmountDTO.currency_code"
					}
				},
				{
					"id": 529,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of this money amount."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 603,
						"name": "CreateMoneyAmountDTO.amount"
					}
				},
				{
					"id": 530,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 604,
						"name": "CreateMoneyAmountDTO.min_quantity"
					}
				},
				{
					"id": 531,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this money amount to be applied."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 605,
						"name": "CreateMoneyAmountDTO.max_quantity"
					}
				},
				{
					"id": 526,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to add to the price. The object's keys are rule types' "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": " attribute, and values are the value of that rule associated with this price."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 606,
						"name": "CreatePriceSetPriceRules",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						527,
						528,
						529,
						530,
						531,
						526
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 600,
					"name": "CreateMoneyAmountDTO",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 299,
			"name": "AddPricesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The prices to add to a price set."
					}
				]
			},
			"children": [
				{
					"id": 300,
					"name": "priceSetId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price set to add prices to."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 301,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices to add to the price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 525,
							"name": "CreatePricesDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						300,
						301
					]
				}
			]
		},
		{
			"id": 296,
			"name": "RemovePriceSetRulesDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rules to remove from a price set."
					}
				]
			},
			"children": [
				{
					"id": 297,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 298,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to remove. Each string is the "
							},
							{
								"kind": "code",
								"text": "`rule_attribute`"
							},
							{
								"kind": "text",
								"text": " of a rule to remove."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						297,
						298
					]
				}
			]
		},
		{
			"id": 289,
			"name": "CreatePriceSetDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price set to create."
					}
				]
			},
			"children": [
				{
					"id": 290,
					"name": "rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rules to associate with the price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 291,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 292,
										"name": "rule_attribute",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"comment": {
											"summary": [
												{
													"kind": "text",
													"text": "the value of the rule's "
												},
												{
													"kind": "code",
													"text": "`rule_attribute`"
												},
												{
													"kind": "text",
													"text": " attribute."
												}
											]
										},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											292
										]
									}
								]
							}
						}
					}
				},
				{
					"id": 293,
					"name": "prices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The prices to create and add to this price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 525,
							"name": "CreatePricesDTO",
							"package": "@medusajs/types"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						290,
						293
					]
				}
			]
		},
		{
			"id": 294,
			"name": "UpdatePriceSetDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a price set. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which price set to update."
					}
				]
			},
			"children": [
				{
					"id": 295,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the price set to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						295
					]
				}
			]
		},
		{
			"id": 284,
			"name": "FilterablePriceSetProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on price sets."
					}
				]
			},
			"children": [
				{
					"id": 287,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 284,
									"name": "FilterablePriceSetProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 284,
											"name": "FilterablePriceSetProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 288,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 284,
									"name": "FilterablePriceSetProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 284,
											"name": "FilterablePriceSetProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 285,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "IDs to filter price sets by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 286,
					"name": "money_amounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters to apply on a price set's associated money amounts."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 520,
						"name": "FilterableMoneyAmountProps",
						"package": "@medusajs/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						287,
						288,
						285,
						286
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 284,
							"name": "FilterablePriceSetProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 337,
			"name": "PriceDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A price's data."
					}
				]
			},
			"children": [
				{
					"id": 338,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of a price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 339,
					"name": "title",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 340,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The currency code of this price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 341,
					"name": "amount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price of this price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 342,
					"name": "min_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum quantity required to be purchased for this price to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 343,
					"name": "max_quantity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The maximum quantity required to be purchased for this price to be applied."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 344,
					"name": "price_set",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price set associated with the price."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 280,
						"name": "PriceSetDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 345,
					"name": "price_list",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price list associated with the price."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "reference",
						"target": 391,
						"name": "PriceListDTO",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 346,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the associated price set."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 347,
					"name": "price_rules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The price rules associated with the price."
							}
						],
						"modifierTags": [
							"@expandable"
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 357,
							"name": "PriceRuleDTO",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 348,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price was created."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 349,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price was updated."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 350,
					"name": "deleted_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "When the price was deleted."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						338,
						339,
						340,
						341,
						342,
						343,
						344,
						345,
						346,
						347,
						348,
						349,
						350
					]
				}
			]
		},
		{
			"id": 330,
			"name": "FilterablePriceProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on prices."
					}
				]
			},
			"children": [
				{
					"id": 335,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 330,
									"name": "FilterablePriceProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 330,
											"name": "FilterablePriceProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 336,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 330,
									"name": "FilterablePriceProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 330,
											"name": "FilterablePriceProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 331,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter the prices by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 332,
					"name": "currency_code",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Currency codes to filter price by."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 333,
					"name": "price_set_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter the price's associated price set."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 334,
					"name": "price_list_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter the price's associated price list."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						335,
						336,
						331,
						332,
						333,
						334
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 330,
							"name": "FilterablePriceProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 307,
			"name": "RuleTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A rule type's data."
					}
				]
			},
			"children": [
				{
					"id": 308,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 309,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The display name of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 310,
					"name": "rule_attribute",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The unique name used to later identify the rule_attribute. For example, it can be used in the "
							},
							{
								"kind": "code",
								"text": "`context`"
							},
							{
								"kind": "text",
								"text": " parameter of\nthe "
							},
							{
								"kind": "code",
								"text": "`calculatePrices`"
							},
							{
								"kind": "text",
								"text": " method to specify a rule for calculating the price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 311,
					"name": "default_priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the rule type. This is useful when calculating the price of a price set, and multiple rules satisfy\nthe provided context. The higher the value, the higher the priority of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 312,
					"name": "created_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The creation date of the rule type."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 313,
					"name": "updated_at",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The update date of the rule type."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						308,
						309,
						310,
						311,
						312,
						313
					]
				}
			]
		},
		{
			"id": 320,
			"name": "CreateRuleTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rule type to create."
					}
				]
			},
			"children": [
				{
					"id": 321,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 322,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The display name of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 323,
					"name": "rule_attribute",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The unique name used to later identify the rule_attribute. For example, it can be used in the "
							},
							{
								"kind": "code",
								"text": "`context`"
							},
							{
								"kind": "text",
								"text": " parameter of the "
							},
							{
								"kind": "code",
								"text": "`calculatePrices`"
							},
							{
								"kind": "text",
								"text": "\nmethod to specify a rule for calculating the price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 324,
					"name": "default_priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the rule type. This is useful when calculating the price of a price set, and multiple rules satisfy the provided context.\nThe higher the value, the higher the priority of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						321,
						322,
						323,
						324
					]
				}
			]
		},
		{
			"id": 325,
			"name": "UpdateRuleTypeDTO",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The data to update in a rule type. The "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " is used to identify which price set to update."
					}
				]
			},
			"children": [
				{
					"id": 326,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the rule type to update."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 327,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The display name of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 328,
					"name": "rule_attribute",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The unique name used to later identify the rule_attribute. For example, it can be used in the "
							},
							{
								"kind": "code",
								"text": "`context`"
							},
							{
								"kind": "text",
								"text": " parameter of the "
							},
							{
								"kind": "code",
								"text": "`calculatePrices`"
							},
							{
								"kind": "text",
								"text": " method to specify a rule for calculating the price."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 329,
					"name": "default_priority",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The priority of the rule type. This is useful when calculating the price of a price set, and multiple rules satisfy the provided context. The higher the value, the higher the priority of the rule type."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						326,
						327,
						328,
						329
					]
				}
			]
		},
		{
			"id": 314,
			"name": "FilterableRuleTypeProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Filters to apply on rule types."
					}
				]
			},
			"children": [
				{
					"id": 318,
					"name": "$and",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"and\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 314,
									"name": "FilterableRuleTypeProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 314,
											"name": "FilterableRuleTypeProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 517,
						"name": "BaseFilterable.$and"
					}
				},
				{
					"id": 319,
					"name": "$or",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of filters to apply on the entity, where each item in the array is joined with an \"or\" condition."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"target": 314,
									"name": "FilterableRuleTypeProps",
									"package": "@medusajs/types"
								},
								{
									"type": "reference",
									"target": 516,
									"typeArguments": [
										{
											"type": "reference",
											"target": 314,
											"name": "FilterableRuleTypeProps",
											"package": "@medusajs/types"
										}
									],
									"name": "BaseFilterable",
									"package": "@medusajs/types"
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 518,
						"name": "BaseFilterable.$or"
					}
				},
				{
					"id": 315,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter rule types by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 316,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The names to filter rule types by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 317,
					"name": "rule_attribute",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rule attributes to filter rule types by."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						318,
						319,
						315,
						316,
						317
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 516,
					"typeArguments": [
						{
							"type": "reference",
							"target": 314,
							"name": "FilterableRuleTypeProps",
							"package": "@medusajs/types"
						}
					],
					"name": "BaseFilterable",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 1,
			"name": "IPricingModuleService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The main service interface for the pricing module."
					}
				]
			},
			"children": [
				{
					"id": 2,
					"name": "calculatePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "calculatePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to calculate prices based on the provided filters and context."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The calculated prices matching the context and filters provided."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "When you calculate prices, you must at least specify the currency code:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\nasync function calculatePrice (priceSetId: string, currencyCode: string) {\n  const pricingService = await initializePricingModule()\n\n  const price = await pricingService.calculatePrices(\n    { id: [priceSetId] },\n    {\n      context: {\n        currency_code: currencyCode\n      }\n    }\n  )\n\n  // do something with the price or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo calculate prices for specific minimum and/or maximum quantity:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\nasync function calculatePrice (priceSetId: string, currencyCode: string) {\n  const pricingService = await initializePricingModule()\n\n  const price = await pricingService.calculatePrices(\n    { id: [priceSetId] },\n    {\n      context: {\n        currency_code: currencyCode,\n        min_quantity: 4\n      }\n    }\n  )\n\n  // do something with the price or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo calculate prices for custom rule types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\nasync function calculatePrice (priceSetId: string, currencyCode: string) {\n  const pricingService = await initializePricingModule()\n\n  const price = await pricingService.calculatePrices(\n    { id: [priceSetId] },\n    {\n      context: {\n        currency_code: currencyCode,\n        region_id: \"US\"\n      }\n    }\n  )\n\n  // do something with the price or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on prices."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 232,
										"name": "PricingFilters",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 5,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context used to select the prices. For example, you can specify the region ID in this context, and only prices having the same value\nwill be retrieved."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 234,
										"name": "PricingContext",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 6,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 247,
											"name": "CalculatedPriceSet",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 7,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 8,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a price set by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved price set."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a price set by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.retrieve(\n    priceSetId\n  )\n\n  // do something with the price set or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.retrieve(\n    priceSetId,\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price set or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 9,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price set to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 10,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price set is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price set."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 280,
												"name": "PriceSetDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 11,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 280,
										"name": "PriceSetDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 12,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price sets based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price sets."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price sets using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.list(\n    {\n      id: priceSetIds\n    },\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price sets:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.list(\n    {\n      id: priceSetIds\n    },\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.list(\n    {\n      id: priceSetIds\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[], priceIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.list(\n    {\n      $and: [\n        {\n          id: priceSetIds\n        },\n        {\n          prices: {\n            id: priceIds\n          }\n        }\n      ]\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 284,
										"name": "FilterablePriceSetProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 15,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price sets are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price set."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 280,
												"name": "PriceSetDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 16,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 280,
											"name": "PriceSetDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 17,
					"name": "listAndCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 18,
							"name": "listAndCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price sets along with the total count of available price sets satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price sets along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of prices sets using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceSets, count] = await pricingService.listAndCount(\n    {\n      id: priceSetIds\n    },\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price sets:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceSets, count] = await pricingService.listAndCount(\n    {\n      id: priceSetIds\n    },\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceSets, count] = await pricingService.listAndCount(\n    {\n      id: priceSetIds\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceSets (priceSetIds: string[], priceIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceSets, count] = await pricingService.listAndCount(\n    {\n      $and: [\n        {\n          id: priceSetIds\n        },\n        {\n          prices: {\n            id: priceIds\n          }\n        }\n      ]\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price sets or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 19,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 284,
										"name": "FilterablePriceSetProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 20,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price sets are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price set."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 280,
												"name": "PriceSetDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 21,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 280,
													"name": "PriceSetDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 22,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 23,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create a new price set."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created price set."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create a default price set, don't pass any rules. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceSet () {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.create(\n    {\n      rules: [],\n      prices: [\n        {\n          amount: 500,\n          currency_code: \"USD\",\n          min_quantity: 0,\n          max_quantity: 4,\n          rules: {},\n        },\n        {\n          amount: 400,\n          currency_code: \"USD\",\n          min_quantity: 5,\n          max_quantity: 10,\n          rules: {},\n        },\n      ],\n    },\n  )\n\n  // do something with the price set or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo create a price set and associate it with rule types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceSet () {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.create(\n    {\n      rules: [{ rule_attribute: \"region_id\" }, { rule_attribute: \"city\" }],\n      prices: [\n        {\n          amount: 300,\n          currency_code: \"EUR\",\n          rules: {\n            region_id: \"PL\",\n            city: \"krakow\"\n          },\n        },\n        {\n          amount: 400,\n          currency_code: \"EUR\",\n          rules: {\n            region_id: \"PL\"\n          },\n        },\n        {\n          amount: 450,\n          currency_code: \"EUR\",\n          rules: {\n            city: \"krakow\"\n          },\n        }\n      ],\n    },\n  )\n\n  // do something with the price set or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 24,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes of the price set to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 289,
										"name": "CreatePriceSetDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 25,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 280,
										"name": "PriceSetDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 26,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create multiple price sets."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created price sets."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create price sets with a default price, don't pass any rules and make sure to pass the "
											},
											{
												"kind": "code",
												"text": "`currency_code`"
											},
											{
												"kind": "text",
												"text": " of the price. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceSets () {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.create([\n    {\n      rules: [],\n      prices: [\n        {\n          amount: 500,\n          currency_code: \"USD\",\n          rules: {},\n        },\n      ],\n    },\n  ])\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo create price sets and associate them with rule types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceSets () {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.create([\n    {\n      rules: [{ rule_attribute: \"region_id\" }, { rule_attribute: \"city\" }],\n      prices: [\n        {\n          amount: 300,\n          currency_code: \"EUR\",\n          rules: {\n            region_id: \"PL\",\n            city: \"krakow\"\n          },\n        },\n        {\n          amount: 400,\n          currency_code: \"EUR\",\n          min_quantity: 0,\n          max_quantity: 4,\n          rules: {\n            region_id: \"PL\"\n          },\n        },\n        {\n          amount: 450,\n          currency_code: \"EUR\",\n          rules: {\n            city: \"krakow\"\n          },\n        }\n      ],\n    },\n  ])\n\n  // do something with the price sets or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 27,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price sets to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 289,
											"name": "CreatePriceSetDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 28,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 280,
											"name": "PriceSetDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "removeRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34,
							"name": "removeRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method remove rules from a price set."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when rules are successfully removed."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function removePriceSetRule (priceSetId: string, ruleAttributes: []) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.removeRules([\n    {\n      id: priceSetId,\n      rules: ruleAttributes\n    },\n  ])\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 35,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The rules to remove per price set."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 296,
											"name": "RemovePriceSetRulesDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 36,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 37,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method deletes price sets by their IDs."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the price sets are successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function removePriceSetRule (priceSetIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.delete(priceSetIds)\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 39,
									"name": "ids",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the price sets to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 40,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 41,
					"name": "addPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 42,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method adds prices to a price set."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The price set that the prices were added to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add a default price to a price set, don't pass it any rules and make sure to pass it the "
											},
											{
												"kind": "code",
												"text": "`currency_code`"
											},
											{
												"kind": "text",
												"text": ":\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addPricesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.addPrices({\n    priceSetId,\n    prices: [\n     {\n        amount: 500,\n        currency_code: \"USD\",\n        rules: {},\n      },\n    ],\n  })\n\n  // do something with the price set or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo add prices with rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addPricesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.addPrices({\n    priceSetId,\n    prices: [\n      {\n        amount: 300,\n        currency_code: \"EUR\",\n        rules: {\n          region_id: \"PL\",\n          city: \"krakow\"\n        },\n      },\n      {\n        amount: 400,\n        currency_code: \"EUR\",\n        min_quantity: 0,\n        max_quantity: 4,\n        rules: {\n          region_id: \"PL\"\n        },\n      },\n      {\n        amount: 450,\n        currency_code: \"EUR\",\n        rules: {\n          city: \"krakow\"\n        },\n      }\n    ],\n  })\n\n  // do something with the price set or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 43,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data defining the price set to add the prices to, along with the prices to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 299,
										"name": "AddPricesDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 44,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 280,
										"name": "PriceSetDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 45,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method adds prices to multiple price sets."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of the price sets that prices were added to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add a default price to a price set, don't pass it any rules and make sure to pass it the "
											},
											{
												"kind": "code",
												"text": "`currency_code`"
											},
											{
												"kind": "text",
												"text": ":\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addPricesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.addPrices([{\n    priceSetId,\n    prices: [\n     {\n        amount: 500,\n        currency_code: \"USD\",\n        rules: {},\n      },\n    ],\n  }])\n\n  // do something with the price sets or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo add prices with rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addPricesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.addPrices([{\n    priceSetId,\n    prices: [\n      {\n        amount: 300,\n        currency_code: \"EUR\",\n        rules: {\n          region_id: \"PL\",\n          city: \"krakow\"\n        },\n      },\n      {\n        amount: 400,\n        currency_code: \"EUR\",\n        min_quantity: 0,\n        max_quantity: 4,\n        rules: {\n          region_id: \"PL\"\n        },\n      },\n      {\n        amount: 450,\n        currency_code: \"EUR\",\n        rules: {\n          city: \"krakow\"\n        },\n      }\n    ],\n  }])\n\n  // do something with the price sets or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 46,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data defining the prices to add per price set."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 299,
											"name": "AddPricesDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 47,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 280,
											"name": "PriceSetDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 48,
					"name": "addRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 49,
							"name": "addRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method adds rules to a price set."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The price set that the rules were added to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addRulesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSet = await pricingService.addRules({\n    priceSetId,\n    rules: [{\n      attribute: \"region_id\"\n    }]\n  })\n\n  // do something with the price set or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 50,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data defining the price set to add the rules to, along with the rules to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 302,
										"name": "AddRulesDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 51,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 280,
										"name": "PriceSetDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 52,
							"name": "addRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method adds rules to multiple price sets."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of the price sets that the rules were added to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addRulesToPriceSet (priceSetId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceSets = await pricingService.addRules([{\n    priceSetId,\n    rules: [{\n      attribute: \"region_id\"\n    }]\n  }])\n\n  // do something with the price sets or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 53,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data defining the rules to add per price set."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 302,
											"name": "AddRulesDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 54,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 280,
											"name": "PriceSetDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55,
					"name": "retrieveRuleType",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 56,
							"name": "retrieveRuleType",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a rule type by its ID and and optionally based on the provided configurations."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved rule type."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a rule type by its code:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleType (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const ruleType = await pricingService.retrieveRuleType(ruleTypeId)\n\n  // do something with the rule type or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleType (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const ruleType = await pricingService.retrieveRuleType(ruleTypeId, {\n    select: [\"name\"]\n  })\n\n  // do something with the rule type or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 57,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the rule type to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 58,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the rule type is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a rule type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 307,
												"name": "RuleTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 59,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 307,
										"name": "RuleTypeDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 60,
					"name": "listRuleTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 61,
							"name": "listRuleTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of rule types based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of rule types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of rule types using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.listRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved within the rule types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.listRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  }, {\n    select: [\"name\"]\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.listRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  }, {\n    select: [\"name\"],\n    skip,\n    take\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string[], name: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.listRuleTypes({\n    $and: [\n      {\n        id: ruleTypeId\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    select: [\"name\"],\n    skip,\n    take\n  })\n\n  // do something with the rule types or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 62,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved rule types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 314,
										"name": "FilterableRuleTypeProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 63,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the rule types are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a rule type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 307,
												"name": "RuleTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 64,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 307,
											"name": "RuleTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 65,
					"name": "listAndCountRuleTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 66,
							"name": "listAndCountRuleTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of rule types along with the total count of available rule types satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of rule types along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of rule types using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const [ruleTypes, count] = await pricingService.listAndCountRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify attributes that should be retrieved within the rule types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const [ruleTypes, count] = await pricingService.listAndCountRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  }, {\n    select: [\"name\"]\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [ruleTypes, count] = await pricingService.listAndCountRuleTypes({\n    id: [\n      ruleTypeId\n    ]\n  }, {\n    select: [\"name\"],\n    skip,\n    take\n  })\n\n  // do something with the rule types or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrieveRuleTypes (ruleTypeId: string[], name: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [ruleTypes, count] = await pricingService.listAndCountRuleTypes({\n    $and: [\n      {\n        id: ruleTypeId\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    select: [\"name\"],\n    skip,\n    take\n  })\n\n  // do something with the rule types or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 67,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved rule types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 314,
										"name": "FilterableRuleTypeProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 68,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the rule types are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a rule type."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 307,
												"name": "RuleTypeDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 69,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 307,
													"name": "RuleTypeDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 70,
					"name": "createRuleTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 71,
							"name": "createRuleTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create new rule types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created rule types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createRuleTypes () {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.createRuleTypes([\n    {\n      name: \"Region\",\n      rule_attribute: \"region_id\"\n    }\n  ])\n\n  // do something with the rule types or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 72,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The rule types to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 320,
											"name": "CreateRuleTypeDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 73,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 307,
											"name": "RuleTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 74,
					"name": "updateRuleTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 75,
							"name": "updateRuleTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update existing rule types with the provided data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated rule types."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function updateRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  const ruleTypes = await pricingService.updateRuleTypes([\n    {\n      id: ruleTypeId,\n      name: \"Region\",\n    }\n  ])\n\n  // do something with the rule types or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 76,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The rule types to update, each having the attributes that should be updated in a rule type."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 325,
											"name": "UpdateRuleTypeDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 77,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 307,
											"name": "RuleTypeDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "deleteRuleTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 79,
							"name": "deleteRuleTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete rule types based on the provided IDs."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves once the rule types are deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function deleteRuleTypes (ruleTypeId: string) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.deleteRuleTypes([ruleTypeId])\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 80,
									"name": "ruleTypeIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the rule types to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 81,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 82,
					"name": "listPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 83,
							"name": "listPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of prices based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of prices."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of prices using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const prices = await pricingService.listPrices({\n    id: [id]\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the prices:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const prices = await pricingService.listPrices({\n    id: [id]\n  }, {\n    relations: [\"price_rules\"]\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const prices = await pricingService.listPrices({\n    id: [id]\n  }, {\n    relations: [\"price_rules\"],\n    skip,\n    take\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (ids: string[], titles: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const prices = await pricingService.listPrices({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title: titles\n      }\n    ]\n  }, {\n    relations: [\"price_rules\"],\n    skip,\n    take\n  })\n\n  // do something with the prices or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 84,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved prices."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 330,
										"name": "FilterablePriceProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 85,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the prices are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 337,
												"name": "PriceDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 86,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 337,
											"name": "PriceDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 87,
					"name": "softDeletePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 88,
							"name": "softDeletePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 89,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 90,
									"name": "priceIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 91,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 351,
										"typeArguments": [
											{
												"type": "reference",
												"target": 89,
												"name": "TReturnableLinkableKeys",
												"package": "@medusajs/types",
												"refersToTypeParameter": true
											}
										],
										"name": "SoftDeleteReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 92,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 93,
					"name": "restorePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 94,
							"name": "restorePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 95,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 96,
									"name": "priceIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 97,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 354,
										"typeArguments": [
											{
												"type": "reference",
												"target": 95,
												"name": "TReturnableLinkableKeys",
												"package": "@medusajs/types",
												"refersToTypeParameter": true
											}
										],
										"name": "RestoreReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 98,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 99,
					"name": "listAndCountPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 100,
							"name": "listAndCountPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of prices along with the total count of\navailable prices satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of prices and their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of prices using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const [prices, count] = await pricingService.listAndCountPrices({\n    id: [id]\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the prices:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const [prices, count] = await pricingService.listAndCountPrices({\n    id: [id]\n  }, {\n    relations: [\"price_rules\"],\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (id: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [prices, count] = await pricingService.listAndCountPrices({\n    id: [id]\n  }, {\n    relations: [\"price_rules\"],\n    skip,\n    take\n  })\n\n  // do something with the prices or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePrices (ids: string[], titles: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [prices, count] = await pricingService.listAndCountPrices({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        title: titles\n      }\n    ]\n  }, {\n    relations: [\"price_rules\"],\n    skip,\n    take\n  })\n\n  // do something with the prices or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 101,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved prices."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 330,
										"name": "FilterablePriceProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 102,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the prices are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 337,
												"name": "PriceDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 103,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 337,
													"name": "PriceDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 104,
					"name": "retrievePriceRule",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 105,
							"name": "retrievePriceRule",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a price rule by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved price rule."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a price rule by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRule (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceRule = await pricingService.retrievePriceRule(id)\n\n  // do something with the price rule or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRule (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceRule = await pricingService.retrievePriceRule(id, {\n    relations: [\"price_set\"]\n  })\n\n  // do something with the price rule or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 106,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price rule to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 107,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price rule is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 357,
												"name": "PriceRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 108,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 357,
										"name": "PriceRuleDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 109,
					"name": "listPriceRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 110,
							"name": "listPriceRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price rules based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price rules using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.listPriceRules({\n    id: [id]\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.listPriceRules({\n    id: [id],\n  }, {\n    relations: [\"price_set\"]\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.listPriceRules({\n    id: [id],\n  }, {\n    relations: [\"price_set\"],\n    skip,\n    take\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (ids: string[], name: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.listPriceRules({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    relations: [\"price_set\"],\n    skip,\n    take\n  })\n\n  // do something with the price rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 111,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price rules."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 370,
										"name": "FilterablePriceRuleProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 112,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price rule is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 357,
												"name": "PriceRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 113,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 357,
											"name": "PriceRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 114,
					"name": "listAndCountPriceRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 115,
							"name": "listAndCountPriceRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price rules along with the total count of available price rules satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price rules along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price rules using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const [priceRules, count] = await pricingService.listAndCountPriceRules({\n    id: [id]\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string) {\n  const pricingService = await initializePricingModule()\n\n  const [priceRules, count] = await pricingService.listAndCountPriceRules({\n    id: [id],\n  }, {\n    relations: [\"price_set\"]\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (id: string, skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceRules, count] = await pricingService.listAndCountPriceRules({\n    id: [id],\n  }, {\n    relations: [\"price_set\"],\n    skip,\n    take\n  })\n\n  // do something with the price rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceRules (ids: string[], name: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceRules, count] = await pricingService.listAndCountPriceRules({\n    $and: [\n      {\n        id: ids\n      },\n      {\n        name\n      }\n    ]\n  }, {\n    relations: [\"price_set\"],\n    skip,\n    take\n  })\n\n  // do something with the price rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 116,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price rules."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 370,
										"name": "FilterablePriceRuleProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 117,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price rule is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 357,
												"name": "PriceRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 118,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 357,
													"name": "PriceRuleDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 119,
					"name": "createPriceRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 120,
							"name": "createPriceRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create new price rules based on the provided data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of created price rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceRules (\n  id: string,\n  priceSetId: string,\n  ruleTypeId: string,\n  value: string,\n  priceId: string,\n  priceListId: string\n) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.createPriceRules([\n    {\n      id,\n      price_set_id: priceSetId,\n      rule_type_id: ruleTypeId,\n      value,\n      price_id: priceId,\n      price_list_id: priceListId\n    }\n  ])\n\n  // do something with the price rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 121,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price rules to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 377,
											"name": "CreatePriceRuleDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 122,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 357,
											"name": "PriceRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 123,
					"name": "updatePriceRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 124,
							"name": "updatePriceRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update price rules, each with their provided data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of updated price rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function updatePriceRules (\n  id: string,\n  priceSetId: string,\n) {\n  const pricingService = await initializePricingModule()\n\n  const priceRules = await pricingService.updatePriceRules([\n    {\n      id,\n      price_set_id: priceSetId,\n    }\n  ])\n\n  // do something with the price rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 125,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price rules to update, each having attributes that should be updated in a price rule."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 383,
											"name": "UpdatePriceRuleDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 126,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 357,
											"name": "PriceRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 127,
					"name": "deletePriceRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 128,
							"name": "deletePriceRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete price rules based on the specified IDs."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves once the price rules are deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function deletePriceRules (\n  id: string,\n) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.deletePriceRules([id])\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 129,
									"name": "priceRuleIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the price rules to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 130,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "retrievePriceList",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 132,
							"name": "retrievePriceList",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a price list by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved price list."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a price list by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceList (priceListId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.retrievePriceList(\n    priceListId\n  )\n\n  // do something with the price list or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceList (priceListId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.retrievePriceList(\n    priceListId,\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price list or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 133,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 134,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price list is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 391,
												"name": "PriceListDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 135,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 391,
										"name": "PriceListDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 136,
					"name": "listPriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 137,
							"name": "listPriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price lists based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price lists using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceLists (priceListIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceLists = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceLists (priceListIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceLists = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceLists (priceListIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceLists = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceLists (priceListIds: string[], titles: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceLists = await pricingService.listPriceLists(\n    {\n      $and: [\n        {\n          id: priceListIds\n        },\n        {\n          title: titles\n        }\n      ]\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 138,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 403,
										"name": "FilterablePriceListProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 139,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price lists are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 391,
												"name": "PriceListDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 140,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "PriceListDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 141,
					"name": "listAndCountPriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 142,
							"name": "listAndCountPriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price lists along with the total count of available price lists satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price lists along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price lists using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceLists (priceListIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceLists, count] = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceLists (priceListIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceLists, count] = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n    {\n      relations: [\"prices\"]\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceLists (priceListIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceLists, count] = await pricingService.listPriceLists(\n    {\n      id: priceListIds\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceLists (priceListIds: string[], titles: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceLists, count] = await pricingService.listPriceLists(\n    {\n      $and: [\n        {\n          id: priceListIds\n        },\n        {\n          title: titles\n        }\n      ]\n    },\n    {\n      relations: [\"prices\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price lists or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 143,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 403,
										"name": "FilterablePriceListProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 144,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price lists are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 391,
												"name": "PriceListDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 145,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 391,
													"name": "PriceListDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 146,
					"name": "createPriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 147,
							"name": "createPriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create price lists."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceList (items: {\n  title: string\n  description: string\n  starts_at?: string\n  ends_at?: string\n}[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.createPriceLists(items)\n\n  // do something with the price lists or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 148,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of each price list to be created."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 411,
											"name": "CreatePriceListDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 149,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "PriceListDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "updatePriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 151,
							"name": "updatePriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update price lists."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function updatePriceLists (items: {\n  id: string\n  title: string\n  description: string\n  starts_at?: string\n  ends_at?: string\n}[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.updatePriceLists(items)\n\n  // do something with the price lists or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 152,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in each price list."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 421,
											"name": "UpdatePriceListDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 153,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "PriceListDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 154,
					"name": "deletePriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 155,
							"name": "deletePriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete price lists."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the price lists are deleted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function deletePriceLists (ids: string[]) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.deletePriceLists(ids)\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 156,
									"name": "priceListIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the price lists to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 157,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 158,
					"name": "softDeletePriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 159,
							"name": "softDeletePriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 160,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 161,
									"name": "priceListIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 162,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 351,
										"typeArguments": [
											{
												"type": "reference",
												"target": 160,
												"name": "TReturnableLinkableKeys",
												"package": "@medusajs/types",
												"refersToTypeParameter": true
											}
										],
										"name": "SoftDeleteReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 163,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 164,
					"name": "restorePriceLists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 165,
							"name": "restorePriceLists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 166,
									"name": "TReturnableLinkableKeys",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 167,
									"name": "priceListIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 168,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 354,
										"typeArguments": [
											{
												"type": "reference",
												"target": 166,
												"name": "TReturnableLinkableKeys",
												"package": "@medusajs/types",
												"refersToTypeParameter": true
											}
										],
										"name": "RestoreReturn",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 169,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 170,
					"name": "retrievePriceListRule",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 171,
							"name": "retrievePriceListRule",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a price list rule by its ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The retrieved price list rule."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a price list rule by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceListRule (priceListRuleId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRule = await pricingService.retrievePriceListRule(\n    priceListRuleId\n  )\n\n  // do something with the price list rule or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function retrievePriceListRule (priceListRuleId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRule = await pricingService.retrievePriceListRule(\n    priceListRuleId,\n    {\n      relations: [\"price_list\"]\n    }\n  )\n\n  // do something with the price list rule or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 172,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list rule to retrieve."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 173,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price list rule is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 430,
												"name": "PriceListRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 174,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 430,
										"name": "PriceListRuleDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 175,
					"name": "listPriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 176,
							"name": "listPriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price list rules based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price list rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price list vs using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceListRules (priceListRuleIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.listPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price list rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceListRules (priceListRuleIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.listPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n    {\n      relations: [\"price_list_rule_values\"]\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceListRules (priceListRuleIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.listPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n    {\n      relations: [\"price_list_rule_values\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listPriceListRules (priceListRuleIds: string[], ruleTypeIDs: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.listPriceListRules(\n    {\n      $and: [\n        {\n          id: priceListRuleIds\n        },\n        {\n          rule_types: ruleTypeIDs\n        }\n      ]\n    },\n    {\n      relations: [\"price_list_rule_values\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 177,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price list rules."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 436,
										"name": "FilterablePriceListRuleProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 178,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price list rules are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 430,
												"name": "PriceListRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 179,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 430,
											"name": "PriceListRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 180,
					"name": "listAndCountPriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 181,
							"name": "listAndCountPriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of price list ruless along with the total count of available price list ruless satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of price list rules along with their total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of price list vs using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listAndCountPriceListRules (priceListRuleIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceListRules, count] = await pricingService.listAndCountPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price list rules:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listAndCountPriceListRules (priceListRuleIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  const [priceListRules, count] = await pricingService.listAndCountPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n    {\n      relations: [\"price_list_rule_values\"]\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`15`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listAndCountPriceListRules (priceListRuleIds: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceListRules, count] = await pricingService.listAndCountPriceListRules(\n    {\n      id: priceListRuleIds\n    },\n    {\n      relations: [\"price_list_rule_values\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nYou can also use the "
											},
											{
												"kind": "code",
												"text": "`$and`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`$or`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`filter`"
											},
											{
												"kind": "text",
												"text": " parameter to use and/or conditions in your filters. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function listAndCountPriceListRules (priceListRuleIds: string[], ruleTypeIDs: string[], skip: number, take: number) {\n  const pricingService = await initializePricingModule()\n\n  const [priceListRules, count] = await pricingService.listAndCountPriceListRules(\n    {\n      $and: [\n        {\n          id: priceListRuleIds\n        },\n        {\n          rule_types: ruleTypeIDs\n        }\n      ]\n    },\n    {\n      relations: [\"price_list_rule_values\"],\n      skip,\n      take\n    }\n  )\n\n  // do something with the price list rules or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 182,
									"name": "filters",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved price list rules."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 436,
										"name": "FilterablePriceListRuleProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 183,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the price list rules are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a price list rule."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 268,
										"typeArguments": [
											{
												"type": "reference",
												"target": 430,
												"name": "PriceListRuleDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 184,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 430,
													"name": "PriceListRuleDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 185,
					"name": "createPriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 186,
							"name": "createPriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create price list rules."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created price list rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function createPriceListRules (items: {\n  rule_type_id: string\n  price_list_id: string\n}[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.createPriceListRules(items)\n\n  // do something with the price list rule or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 187,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price list rules to create."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 443,
											"name": "CreatePriceListRuleDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 188,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 430,
											"name": "PriceListRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 189,
					"name": "updatePriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 190,
							"name": "updatePriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update price list rules."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated price list rules."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function updatePriceListRules (items: {\n  id: string\n  rule_type_id?: string\n  price_list_id?: string\n}[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceListRules = await pricingService.updatePriceListRules(items)\n\n  // do something with the price list rule or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 191,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update for each price list rule."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 448,
											"name": "UpdatePriceListRuleDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 192,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 430,
											"name": "PriceListRuleDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 193,
					"name": "deletePriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 194,
							"name": "deletePriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete price list rules."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves successfully when the price list rules are deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function deletePriceListRules (priceListRuleIds: string[]) {\n  const pricingService = await initializePricingModule()\n\n  await pricingService.deletePriceListRules(priceListRuleIds)\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 195,
									"name": "priceListRuleIds",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The IDs of the price list rules to delete."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 196,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 197,
					"name": "addPriceListPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 198,
							"name": "addPriceListPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to add prices to price lists."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function addPriceListPrices (items: {\n  priceListId: string,\n  prices: {\n    currency_code: string,\n    amount: number,\n    price_set_id: string\n  }[]\n}[]) {\n  const pricingService = await initializePricingModule()\n\n  const priceLists = await pricingService.addPriceListPrices(items)\n\n  // do something with the price lists or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 199,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The prices to add for each price list."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 454,
											"name": "AddPriceListPricesDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 200,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "PriceListDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 201,
					"name": "updatePriceListPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 202,
							"name": "updatePriceListPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 203,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 457,
											"name": "UpdatePriceListPricesDTO",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 204,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 391,
											"name": "PriceListDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 205,
					"name": "setPriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 206,
							"name": "setPriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to set the rules of a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function setPriceListRules (priceListId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.setPriceListRules({\n    priceListId,\n    rules: {\n      region_id: \"US\"\n    }\n  })\n\n  // do something with the price list or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 207,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The rules to set for a price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 460,
										"name": "SetPriceListRulesDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 208,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 391,
										"name": "PriceListDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 209,
					"name": "removePriceListRules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 210,
							"name": "removePriceListRules",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to remove rules from a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated price lists."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializePricingModule,\n} from \"@medusajs/pricing\"\n\nasync function setPriceListRules (priceListId: string) {\n  const pricingService = await initializePricingModule()\n\n  const priceList = await pricingService.removePriceListRules({\n    priceListId,\n    rules: [\"region_id\"]\n  })\n\n  // do something with the price list or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 211,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The rules to remove from a price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 463,
										"name": "RemovePriceListRulesDTO",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 212,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 391,
										"name": "PriceListDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 213,
					"name": "removePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 214,
							"name": "removePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 215,
									"name": "ids",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 216,
									"name": "sharedContext",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 236,
										"name": "Context",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						2,
						7,
						12,
						17,
						22,
						33,
						37,
						41,
						48,
						55,
						60,
						65,
						70,
						74,
						78,
						82,
						87,
						93,
						99,
						104,
						109,
						114,
						119,
						123,
						127,
						131,
						136,
						141,
						146,
						150,
						154,
						158,
						164,
						170,
						175,
						180,
						185,
						189,
						193,
						197,
						201,
						205,
						209,
						213
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 224,
					"name": "IModuleService",
					"package": "@medusajs/types"
				}
			]
		},
		{
			"id": 583,
			"name": "MessageAggregatorFormat",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 584,
					"name": "groupBy",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 585,
					"name": "sortBy",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 586,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"indexSignature": {
								"id": 587,
								"name": "__index",
								"variant": "signature",
								"kind": 8192,
								"flags": {},
								"parameters": [
									{
										"id": 588,
										"name": "key",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										}
									]
								}
							}
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						584,
						585
					]
				}
			]
		},
		{
			"id": 493,
			"name": "IMessageAggregator",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 494,
					"name": "save",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 495,
							"name": "save",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 496,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 577,
												"name": "Message",
												"package": "@medusajs/types"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 577,
													"name": "Message",
													"package": "@medusajs/types"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 497,
					"name": "getMessages",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 498,
							"name": "getMessages",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 499,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 583,
										"name": "MessageAggregatorFormat",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 577,
											"name": "Message",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 500,
					"name": "clearMessages",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 501,
							"name": "clearMessages",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 502,
					"name": "saveRawMessageData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 503,
							"name": "saveRawMessageData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 504,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 505,
									"name": "messageData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 589,
												"typeArguments": [
													{
														"type": "reference",
														"target": 504,
														"name": "T",
														"package": "@medusajs/types",
														"refersToTypeParameter": true
													}
												],
												"name": "MessageFormat",
												"package": "@medusajs/types"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 589,
													"typeArguments": [
														{
															"type": "reference",
															"target": 504,
															"name": "T",
															"package": "@medusajs/types",
															"refersToTypeParameter": true
														}
													],
													"name": "MessageFormat",
													"package": "@medusajs/types"
												}
											}
										]
									}
								},
								{
									"id": 506,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						494,
						497,
						500,
						502
					]
				}
			]
		},
		{
			"id": 236,
			"name": "Context",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A context used to share resources, such as transaction manager, between the application and the module."
					}
				]
			},
			"children": [
				{
					"id": 237,
					"name": "__type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "literal",
						"value": "MedusaContext"
					}
				},
				{
					"id": 238,
					"name": "transactionManager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a transaction manager of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`transactionManager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 246,
						"name": "TManager",
						"package": "@medusajs/types",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 239,
					"name": "manager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a manager, typically an entity manager, of type "
							},
							{
								"kind": "code",
								"text": "`TManager`"
							},
							{
								"kind": "text",
								"text": ", which is a typed parameter passed to the context to specify the type of the "
							},
							{
								"kind": "code",
								"text": "`manager`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 246,
						"name": "TManager",
						"package": "@medusajs/types",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 240,
					"name": "isolationLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the isolation level of the context. Possible values are "
							},
							{
								"kind": "code",
								"text": "`READ UNCOMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`READ COMMITTED`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`REPEATABLE READ`"
							},
							{
								"kind": "text",
								"text": ", or "
							},
							{
								"kind": "code",
								"text": "`SERIALIZABLE`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 241,
					"name": "enableNestedTransactions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean value indicating whether nested transactions are enabled."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 242,
					"name": "eventGroupId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the group to aggregate the events to be emitted at a later point."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 243,
					"name": "transactionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the current transaction."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 244,
					"name": "messageAggregator",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a message aggregator, which is used to aggregate messages to be emitted at a later point."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 493,
						"name": "IMessageAggregator",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 245,
					"name": "requestId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A string indicating the ID of the current request."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						237,
						238,
						239,
						240,
						241,
						242,
						243,
						244,
						245
					]
				}
			],
			"typeParameters": [
				{
					"id": 246,
					"name": "TManager",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				532,
				535
			]
		},
		{
			"title": "Interfaces",
			"children": [
				268,
				516,
				351,
				354,
				613,
				559,
				224,
				507,
				600,
				607,
				520,
				391,
				539,
				551,
				606,
				538,
				411,
				421,
				403,
				436,
				430,
				443,
				448,
				547,
				454,
				457,
				460,
				463,
				357,
				377,
				383,
				370,
				234,
				232,
				280,
				247,
				302,
				525,
				299,
				296,
				289,
				294,
				284,
				337,
				330,
				307,
				320,
				325,
				314,
				1,
				583,
				493,
				236
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				626,
				577,
				589,
				616,
				466,
				573
			]
		}
	],
	"packageName": "@medusajs/types",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService"
		},
		"2": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.calculatePrices"
		},
		"3": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.calculatePrices"
		},
		"4": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"5": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "context"
		},
		"6": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"7": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrieve"
		},
		"8": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrieve"
		},
		"9": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "id"
		},
		"10": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"11": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"12": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.list"
		},
		"13": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.list"
		},
		"14": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"15": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"16": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"17": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCount"
		},
		"18": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCount"
		},
		"19": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"20": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"21": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"22": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.create"
		},
		"23": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.create"
		},
		"24": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"25": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"26": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.create"
		},
		"27": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"28": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"33": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removeRules"
		},
		"34": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removeRules"
		},
		"35": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"36": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"37": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.delete"
		},
		"38": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.delete"
		},
		"39": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "ids"
		},
		"40": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"41": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addPrices"
		},
		"42": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addPrices"
		},
		"43": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"44": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"45": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addPrices"
		},
		"46": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"47": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"48": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addRules"
		},
		"49": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addRules"
		},
		"50": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"51": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"52": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addRules"
		},
		"53": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"54": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"55": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrieveRuleType"
		},
		"56": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrieveRuleType"
		},
		"57": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "id"
		},
		"58": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"59": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"60": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listRuleTypes"
		},
		"61": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listRuleTypes"
		},
		"62": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"63": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"64": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"65": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountRuleTypes"
		},
		"66": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountRuleTypes"
		},
		"67": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"68": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"69": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"70": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createRuleTypes"
		},
		"71": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createRuleTypes"
		},
		"72": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"73": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"74": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updateRuleTypes"
		},
		"75": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updateRuleTypes"
		},
		"76": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"77": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"78": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deleteRuleTypes"
		},
		"79": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deleteRuleTypes"
		},
		"80": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "ruleTypeIds"
		},
		"81": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"82": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPrices"
		},
		"83": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPrices"
		},
		"84": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"85": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"86": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"87": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.softDeletePrices"
		},
		"88": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.softDeletePrices"
		},
		"89": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"90": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceIds"
		},
		"91": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"92": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"93": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.restorePrices"
		},
		"94": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.restorePrices"
		},
		"95": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"96": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceIds"
		},
		"97": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"98": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"99": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPrices"
		},
		"100": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPrices"
		},
		"101": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"102": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"103": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"104": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceRule"
		},
		"105": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceRule"
		},
		"106": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "id"
		},
		"107": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"108": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"109": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceRules"
		},
		"110": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceRules"
		},
		"111": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"112": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"113": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"114": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceRules"
		},
		"115": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceRules"
		},
		"116": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"117": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"118": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"119": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceRules"
		},
		"120": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceRules"
		},
		"121": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"122": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"123": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceRules"
		},
		"124": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceRules"
		},
		"125": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"126": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"127": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceRules"
		},
		"128": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceRules"
		},
		"129": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceRuleIds"
		},
		"130": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"131": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceList"
		},
		"132": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceList"
		},
		"133": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "id"
		},
		"134": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"135": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"136": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceLists"
		},
		"137": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceLists"
		},
		"138": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"139": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"140": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"141": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceLists"
		},
		"142": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceLists"
		},
		"143": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"144": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"145": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"146": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceLists"
		},
		"147": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceLists"
		},
		"148": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"149": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"150": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceLists"
		},
		"151": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceLists"
		},
		"152": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"153": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"154": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceLists"
		},
		"155": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceLists"
		},
		"156": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceListIds"
		},
		"157": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"158": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.softDeletePriceLists"
		},
		"159": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.softDeletePriceLists"
		},
		"160": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"161": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceListIds"
		},
		"162": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"163": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"164": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.restorePriceLists"
		},
		"165": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.restorePriceLists"
		},
		"166": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"167": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceListIds"
		},
		"168": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"169": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"170": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceListRule"
		},
		"171": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.retrievePriceListRule"
		},
		"172": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "id"
		},
		"173": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"174": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"175": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceListRules"
		},
		"176": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listPriceListRules"
		},
		"177": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"178": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"179": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"180": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceListRules"
		},
		"181": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.listAndCountPriceListRules"
		},
		"182": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "filters"
		},
		"183": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "config"
		},
		"184": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"185": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceListRules"
		},
		"186": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.createPriceListRules"
		},
		"187": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"188": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"189": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceListRules"
		},
		"190": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceListRules"
		},
		"191": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"192": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"193": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceListRules"
		},
		"194": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.deletePriceListRules"
		},
		"195": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "priceListRuleIds"
		},
		"196": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"197": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addPriceListPrices"
		},
		"198": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.addPriceListPrices"
		},
		"199": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"200": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"201": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceListPrices"
		},
		"202": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.updatePriceListPrices"
		},
		"203": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"204": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"205": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.setPriceListRules"
		},
		"206": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.setPriceListRules"
		},
		"207": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"208": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"209": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removePriceListRules"
		},
		"210": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removePriceListRules"
		},
		"211": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "data"
		},
		"212": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"213": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removePrices"
		},
		"214": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "IPricingModuleService.removePrices"
		},
		"215": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "ids"
		},
		"216": {
			"sourceFileName": "../../../packages/types/src/pricing/service.ts",
			"qualifiedName": "sharedContext"
		},
		"224": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "IModuleService"
		},
		"232": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PricingFilters"
		},
		"233": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PricingFilters.id"
		},
		"234": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PricingContext"
		},
		"235": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PricingContext.context"
		},
		"236": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "Context"
		},
		"237": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.__type"
		},
		"238": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.transactionManager"
		},
		"239": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.manager"
		},
		"240": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.isolationLevel"
		},
		"241": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.enableNestedTransactions"
		},
		"242": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.eventGroupId"
		},
		"243": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.transactionId"
		},
		"244": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.messageAggregator"
		},
		"245": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.requestId"
		},
		"246": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "TManager"
		},
		"247": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet"
		},
		"248": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.id"
		},
		"249": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.is_calculated_price_price_list"
		},
		"250": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.calculated_amount"
		},
		"251": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.is_original_price_price_list"
		},
		"252": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.original_amount"
		},
		"253": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.currency_code"
		},
		"254": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.calculated_price"
		},
		"255": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type"
		},
		"256": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.id"
		},
		"257": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.price_list_id"
		},
		"258": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.price_list_type"
		},
		"259": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.min_quantity"
		},
		"260": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.max_quantity"
		},
		"261": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CalculatedPriceSet.original_price"
		},
		"262": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type"
		},
		"263": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.id"
		},
		"264": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.price_list_id"
		},
		"265": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.price_list_type"
		},
		"266": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.min_quantity"
		},
		"267": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.max_quantity"
		},
		"268": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig"
		},
		"269": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.select"
		},
		"270": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.skip"
		},
		"271": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.take"
		},
		"272": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.relations"
		},
		"273": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.order"
		},
		"274": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type"
		},
		"275": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type.__index"
		},
		"277": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.withDeleted"
		},
		"278": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.filters"
		},
		"279": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.Entity"
		},
		"280": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PriceSetDTO"
		},
		"281": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PriceSetDTO.id"
		},
		"282": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PriceSetDTO.money_amounts"
		},
		"283": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "PriceSetDTO.rule_types"
		},
		"284": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "FilterablePriceSetProps"
		},
		"285": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "FilterablePriceSetProps.id"
		},
		"286": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "FilterablePriceSetProps.money_amounts"
		},
		"287": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"288": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"289": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CreatePriceSetDTO"
		},
		"290": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CreatePriceSetDTO.rules"
		},
		"291": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type"
		},
		"292": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.rule_attribute"
		},
		"293": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CreatePriceSetDTO.prices"
		},
		"294": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "UpdatePriceSetDTO"
		},
		"295": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "UpdatePriceSetDTO.id"
		},
		"296": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "RemovePriceSetRulesDTO"
		},
		"297": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "RemovePriceSetRulesDTO.id"
		},
		"298": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "RemovePriceSetRulesDTO.rules"
		},
		"299": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddPricesDTO"
		},
		"300": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddPricesDTO.priceSetId"
		},
		"301": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddPricesDTO.prices"
		},
		"302": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddRulesDTO"
		},
		"303": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddRulesDTO.priceSetId"
		},
		"304": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "AddRulesDTO.rules"
		},
		"305": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type"
		},
		"306": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "__type.attribute"
		},
		"307": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO"
		},
		"308": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.id"
		},
		"309": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.name"
		},
		"310": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.rule_attribute"
		},
		"311": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.default_priority"
		},
		"312": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.created_at"
		},
		"313": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "RuleTypeDTO.updated_at"
		},
		"314": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "FilterableRuleTypeProps"
		},
		"315": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "FilterableRuleTypeProps.id"
		},
		"316": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "FilterableRuleTypeProps.name"
		},
		"317": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "FilterableRuleTypeProps.rule_attribute"
		},
		"318": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"319": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"320": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "CreateRuleTypeDTO"
		},
		"321": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "CreateRuleTypeDTO.id"
		},
		"322": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "CreateRuleTypeDTO.name"
		},
		"323": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "CreateRuleTypeDTO.rule_attribute"
		},
		"324": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "CreateRuleTypeDTO.default_priority"
		},
		"325": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "UpdateRuleTypeDTO"
		},
		"326": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "UpdateRuleTypeDTO.id"
		},
		"327": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "UpdateRuleTypeDTO.name"
		},
		"328": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "UpdateRuleTypeDTO.rule_attribute"
		},
		"329": {
			"sourceFileName": "../../../packages/types/src/pricing/common/rule-type.ts",
			"qualifiedName": "UpdateRuleTypeDTO.default_priority"
		},
		"330": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "FilterablePriceProps"
		},
		"331": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "FilterablePriceProps.id"
		},
		"332": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "FilterablePriceProps.currency_code"
		},
		"333": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "FilterablePriceProps.price_set_id"
		},
		"334": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "FilterablePriceProps.price_list_id"
		},
		"335": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"336": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"337": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO"
		},
		"338": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.id"
		},
		"339": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.title"
		},
		"340": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.currency_code"
		},
		"341": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.amount"
		},
		"342": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.min_quantity"
		},
		"343": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.max_quantity"
		},
		"344": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.price_set"
		},
		"345": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.price_list"
		},
		"346": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.price_set_id"
		},
		"347": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.price_rules"
		},
		"348": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.created_at"
		},
		"349": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.updated_at"
		},
		"350": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price.ts",
			"qualifiedName": "PriceDTO.deleted_at"
		},
		"351": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "SoftDeleteReturn"
		},
		"352": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "__type.returnLinkableKeys"
		},
		"353": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"354": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "RestoreReturn"
		},
		"355": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "__type.returnLinkableKeys"
		},
		"356": {
			"sourceFileName": "../../../packages/types/src/dal/repository-service.ts",
			"qualifiedName": "TReturnableLinkableKeys"
		},
		"357": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO"
		},
		"358": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.id"
		},
		"359": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.price_set_id"
		},
		"360": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.price_set"
		},
		"361": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.rule_type_id"
		},
		"362": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.rule_type"
		},
		"363": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.value"
		},
		"364": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.priority"
		},
		"365": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.price_id"
		},
		"366": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.price_list_id"
		},
		"367": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.created_at"
		},
		"368": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.updated_at"
		},
		"369": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "PriceRuleDTO.deleted_at"
		},
		"370": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "FilterablePriceRuleProps"
		},
		"371": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "FilterablePriceRuleProps.id"
		},
		"372": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "FilterablePriceRuleProps.name"
		},
		"373": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "FilterablePriceRuleProps.price_set_id"
		},
		"374": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "FilterablePriceRuleProps.rule_type_id"
		},
		"375": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"376": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"377": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO"
		},
		"378": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO.price_set_id"
		},
		"379": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO.rule_type_id"
		},
		"380": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO.value"
		},
		"381": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO.priority"
		},
		"382": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "CreatePriceRuleDTO.price_id"
		},
		"383": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO"
		},
		"384": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.id"
		},
		"385": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.price_set_id"
		},
		"386": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.rule_type_id"
		},
		"387": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.value"
		},
		"388": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.priority"
		},
		"389": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.price_id"
		},
		"390": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-rule.ts",
			"qualifiedName": "UpdatePriceRuleDTO.price_list_id"
		},
		"391": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO"
		},
		"392": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.id"
		},
		"393": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.title"
		},
		"394": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.starts_at"
		},
		"395": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.status"
		},
		"396": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.ends_at"
		},
		"397": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.rules_count"
		},
		"398": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.prices"
		},
		"399": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.money_amounts"
		},
		"400": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.rule_types"
		},
		"401": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.rules"
		},
		"402": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListDTO.price_list_rules"
		},
		"403": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps"
		},
		"404": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps.id"
		},
		"405": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps.starts_at"
		},
		"406": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps.ends_at"
		},
		"407": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps.status"
		},
		"408": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListProps.rules_count"
		},
		"409": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"410": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"411": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO"
		},
		"412": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.title"
		},
		"413": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.description"
		},
		"414": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.starts_at"
		},
		"415": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.ends_at"
		},
		"416": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.status"
		},
		"417": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.type"
		},
		"418": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.rules_count"
		},
		"419": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.rules"
		},
		"420": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListDTO.prices"
		},
		"421": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO"
		},
		"422": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.id"
		},
		"423": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.title"
		},
		"424": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.description"
		},
		"425": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.starts_at"
		},
		"426": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.ends_at"
		},
		"427": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.status"
		},
		"428": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.rules_count"
		},
		"429": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListDTO.rules"
		},
		"430": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO"
		},
		"431": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO.id"
		},
		"432": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO.value"
		},
		"433": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO.rule_type"
		},
		"434": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO.price_list"
		},
		"435": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleDTO.price_list_rule_values"
		},
		"436": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListRuleProps"
		},
		"437": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListRuleProps.id"
		},
		"438": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListRuleProps.value"
		},
		"439": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListRuleProps.rule_type"
		},
		"440": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "FilterablePriceListRuleProps.price_list_id"
		},
		"441": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"442": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"443": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRuleDTO"
		},
		"444": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRuleDTO.rule_type_id"
		},
		"445": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRuleDTO.rule_type"
		},
		"446": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRuleDTO.price_list_id"
		},
		"447": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRuleDTO.price_list"
		},
		"448": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO"
		},
		"449": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO.id"
		},
		"450": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO.price_list_id"
		},
		"451": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO.rule_type_id"
		},
		"452": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO.price_list"
		},
		"453": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListRuleDTO.rule_type"
		},
		"454": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "AddPriceListPricesDTO"
		},
		"455": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "AddPriceListPricesDTO.price_list_id"
		},
		"456": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "AddPriceListPricesDTO.prices"
		},
		"457": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPricesDTO"
		},
		"458": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPricesDTO.price_list_id"
		},
		"459": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPricesDTO.prices"
		},
		"460": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "SetPriceListRulesDTO"
		},
		"461": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "SetPriceListRulesDTO.price_list_id"
		},
		"462": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "SetPriceListRulesDTO.rules"
		},
		"463": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "RemovePriceListRulesDTO"
		},
		"464": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "RemovePriceListRulesDTO.price_list_id"
		},
		"465": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "RemovePriceListRulesDTO.rules"
		},
		"466": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerConfig"
		},
		"467": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"468": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.schema"
		},
		"469": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationships"
		},
		"470": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extends"
		},
		"471": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"472": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"473": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.fieldAlias"
		},
		"474": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"475": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.path"
		},
		"476": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"477": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"478": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"479": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.primaryKeys"
		},
		"480": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isLink"
		},
		"481": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.linkableKeys"
		},
		"482": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isReadOnlyLink"
		},
		"483": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.databaseConfig"
		},
		"484": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"485": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.tableName"
		},
		"486": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.idPrefix"
		},
		"487": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extraFields"
		},
		"488": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"489": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.type"
		},
		"490": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.defaultValue"
		},
		"491": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.nullable"
		},
		"492": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.options"
		},
		"493": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator"
		},
		"494": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.save"
		},
		"495": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.save"
		},
		"496": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "msg"
		},
		"497": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.getMessages"
		},
		"498": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.getMessages"
		},
		"499": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "format"
		},
		"500": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.clearMessages"
		},
		"501": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.clearMessages"
		},
		"502": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.saveRawMessageData"
		},
		"503": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "IMessageAggregator.saveRawMessageData"
		},
		"504": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "T"
		},
		"505": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "messageData"
		},
		"506": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "options"
		},
		"507": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO"
		},
		"508": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.id"
		},
		"509": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.currency_code"
		},
		"510": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.amount"
		},
		"511": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.min_quantity"
		},
		"512": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.max_quantity"
		},
		"513": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.created_at"
		},
		"514": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.updated_at"
		},
		"515": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "MoneyAmountDTO.deleted_at"
		},
		"516": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable"
		},
		"517": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"518": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"519": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.T"
		},
		"520": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "FilterableMoneyAmountProps"
		},
		"521": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "FilterableMoneyAmountProps.id"
		},
		"522": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "FilterableMoneyAmountProps.currency_code"
		},
		"523": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$and"
		},
		"524": {
			"sourceFileName": "../../../packages/types/src/dal/index.ts",
			"qualifiedName": "BaseFilterable.$or"
		},
		"525": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CreatePricesDTO"
		},
		"526": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-set.ts",
			"qualifiedName": "CreatePricesDTO.rules"
		},
		"527": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.id"
		},
		"528": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.currency_code"
		},
		"529": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.amount"
		},
		"530": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.min_quantity"
		},
		"531": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.max_quantity"
		},
		"532": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListStatus"
		},
		"533": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListStatus.ACTIVE"
		},
		"534": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListStatus.DRAFT"
		},
		"535": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListType"
		},
		"536": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListType.SALE"
		},
		"537": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListType.OVERRIDE"
		},
		"538": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListRules"
		},
		"539": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListPriceDTO"
		},
		"540": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListPriceDTO.price_set_id"
		},
		"541": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceListPriceDTO.rules"
		},
		"542": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.id"
		},
		"543": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.currency_code"
		},
		"544": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.amount"
		},
		"545": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.min_quantity"
		},
		"546": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.max_quantity"
		},
		"547": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleValueDTO"
		},
		"548": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleValueDTO.id"
		},
		"549": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleValueDTO.value"
		},
		"550": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "PriceListRuleValueDTO.price_list_rule"
		},
		"551": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPriceDTO"
		},
		"552": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPriceDTO.price_set_id"
		},
		"553": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "UpdatePriceListPriceDTO.rules"
		},
		"554": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.id"
		},
		"555": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.currency_code"
		},
		"556": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.amount"
		},
		"557": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.min_quantity"
		},
		"558": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.max_quantity"
		},
		"559": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig"
		},
		"560": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.serviceName"
		},
		"561": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.alias"
		},
		"562": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.fieldAlias"
		},
		"563": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"564": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.path"
		},
		"565": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"566": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.primaryKeys"
		},
		"567": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.relationships"
		},
		"568": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.extends"
		},
		"569": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"570": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"571": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"572": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.args"
		},
		"573": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerRelationship"
		},
		"574": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"575": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"576": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.deleteCascade"
		},
		"577": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "Message"
		},
		"578": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type"
		},
		"579": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.eventName"
		},
		"580": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.body"
		},
		"581": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.options"
		},
		"582": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "T"
		},
		"583": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "MessageAggregatorFormat"
		},
		"584": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "MessageAggregatorFormat.groupBy"
		},
		"585": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "MessageAggregatorFormat.sortBy"
		},
		"586": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type"
		},
		"587": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.__index"
		},
		"589": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "MessageFormat"
		},
		"590": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type"
		},
		"591": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.eventName"
		},
		"592": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"593": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type"
		},
		"594": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.service"
		},
		"595": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.action"
		},
		"596": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.object"
		},
		"597": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.eventGroupId"
		},
		"598": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.data"
		},
		"599": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "T"
		},
		"600": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO"
		},
		"601": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.id"
		},
		"602": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.currency_code"
		},
		"603": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.amount"
		},
		"604": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.min_quantity"
		},
		"605": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "CreateMoneyAmountDTO.max_quantity"
		},
		"606": {
			"sourceFileName": "../../../packages/types/src/pricing/common/price-list.ts",
			"qualifiedName": "CreatePriceSetPriceRules"
		},
		"607": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO"
		},
		"608": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.id"
		},
		"609": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.currency_code"
		},
		"610": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.amount"
		},
		"611": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.min_quantity"
		},
		"612": {
			"sourceFileName": "../../../packages/types/src/pricing/common/money-amount.ts",
			"qualifiedName": "UpdateMoneyAmountDTO.max_quantity"
		},
		"613": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias"
		},
		"614": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.name"
		},
		"615": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.args"
		},
		"616": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerRelationship"
		},
		"617": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"618": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.alias"
		},
		"619": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"620": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.primaryKey"
		},
		"621": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"622": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"623": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.inverse"
		},
		"624": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isList"
		},
		"625": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.args"
		},
		"626": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "MessageBody"
		},
		"627": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type"
		},
		"628": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"629": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type"
		},
		"630": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.service"
		},
		"631": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.action"
		},
		"632": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.object"
		},
		"633": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.eventGroupId"
		},
		"634": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "__type.data"
		},
		"635": {
			"sourceFileName": "../../../packages/types/src/event-bus/common.ts",
			"qualifiedName": "T"
		}
	}
}