{
	"id": 11180,
	"name": "js-client",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 11181,
			"name": "AddressesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Address API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.addresses`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 11202
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 11185,
					"name": "addAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11186,
							"name": "addAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add an address to the logged-in customer's saved addresses."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.addAddress({\n  address: {\n    first_name: \"Celia\",\n    last_name: \"Schumm\",\n    address_1: \"225 Bednar Curve\",\n    city: \"Danielville\",\n    country_code: \"US\",\n    postal_code: \"85137\",\n    phone: \"981-596-6748 x90188\",\n    company: \"Wyman LLC\",\n    province: \"Georgia\",\n  }\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11187,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesReq"
										},
										"name": "StorePostCustomersCustomerAddressesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11188,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11189,
					"name": "deleteAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11190,
							"name": "deleteAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.deleteAddress(addressId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11191,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the address to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11192,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11193,
					"name": "updateAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11194,
							"name": "updateAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.updateAddress(addressId, {\n  first_name: \"Gina\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11195,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11196,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the address."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesAddressReq"
										},
										"name": "StorePostCustomersCustomerAddressesAddressReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11197,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11182,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11183,
							"name": "new AddressesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11184,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11181,
								"name": "AddressesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11182
					]
				},
				{
					"title": "Methods",
					"children": [
						11185,
						11189,
						11193
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11608,
			"name": "AdminAuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth_getauth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allow admin users to manage their session, such as login or log out.\nYou can send authenticated requests for an admin user either using the Cookie header, their API token, or the JWT Token.\nWhen you log the admin user in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createSession",
						"target": 11618,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement user profiles](https://docs.medusajs.com/modules/users/admin/manage-profile)."
					}
				]
			},
			"children": [
				{
					"id": 11612,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11613,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the currently logged in user's details. Can also be used to check if there is an authenticated user."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.auth.getSession()\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11614,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11615,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11616,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the user and remove their authentication session. This will only work if you're using Cookie session for authentication. If the API token is still passed in the header,\nthe user is still authorized to perform admin functionalities in other API Routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when user is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in\nmedusa.admin.auth.deleteSession()\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11617,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11618,
					"name": "createSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11619,
							"name": "createSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log a User in using their credentials. If the user is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.AdminAuthResource.createSession({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11620,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11621,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11622,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11623,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the user and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the user, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11624,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11625,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminBearerAuthRes"
										},
										"name": "AdminBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11609,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11610,
							"name": "new AdminAuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11611,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11608,
								"name": "AdminAuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11609
					]
				},
				{
					"title": "Methods",
					"children": [
						11612,
						11615,
						11618,
						11622
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11626,
			"name": "AdminBatchJobsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.batchJobs`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA batch job is a task that is performed by the Medusa backend asynchronusly. For example, the Import Product feature is implemented using batch jobs.\nThe methods in this class allow admins to manage the batch jobs and their state.\n\nRelated Guide: [How to import products](https://docs.medusajs.com/modules/products/admin/import-products)."
					}
				]
			},
			"children": [
				{
					"id": 11630,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11631,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Batch Job to be executed asynchronously in the Medusa backend. If "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ", the batch job will not be executed until the it is confirmed,\nwhich can be done using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirm",
										"target": 11642,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.create({\n  type: 'product-export',\n  context: {},\n  dry_run: false\n}).then((({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11632,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the batch job to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/create-batch-job.d.ts",
											"qualifiedName": "AdminPostBatchesReq"
										},
										"name": "AdminPostBatchesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11633,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11634,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11635,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Batch Jobs. The batch jobs can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`confirmed_at`"
									},
									{
										"kind": "text",
										"text": ". The batch jobs can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of batch jobs with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list()\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\"\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\",\n  limit,\n  offset\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11636,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved batch jobs."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/list-batch-jobs.d.ts",
											"qualifiedName": "AdminGetBatchParams"
										},
										"name": "AdminGetBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11637,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobListRes"
										},
										"name": "AdminBatchJobListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11638,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11639,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a batch job as canceled. When a batch job is canceled, the processing of the batch job doesn’t automatically stop."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.cancel(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11640,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11641,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11642,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11643,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When a batch job is created, it's not executed automatically if "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ". This method confirms that the batch job should be executed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.confirm(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11644,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11645,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11646,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11647,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a batch job."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.retrieve(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11648,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11649,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11627,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11628,
							"name": "new AdminBatchJobsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11629,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11626,
								"name": "AdminBatchJobsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11627
					]
				},
				{
					"title": "Methods",
					"children": [
						11630,
						11634,
						11638,
						11642,
						11646
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11650,
			"name": "AdminCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection."
					}
				]
			},
			"children": [
				{
					"id": 11654,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11655,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.create({\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11656,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the product collection to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/create-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsReq"
										},
										"name": "AdminPostCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11657,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11658,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11659,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.update(collectionId, {\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11660,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11661,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/update-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsCollectionReq"
										},
										"name": "AdminPostCollectionsCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11662,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11663,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11664,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product collection. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.delete(collectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11665,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11666,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11667,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11668,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection by its ID. The products associated with it are expanded and returned as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11669,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11670,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11671,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11672,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": ". The collections can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11673,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/list-collections.d.ts",
											"qualifiedName": "AdminGetCollectionsParams"
										},
										"name": "AdminGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11674,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsListRes"
										},
										"name": "AdminCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11675,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11676,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.addProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ collection }) => {\n  console.log(collection.products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11677,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11678,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/add-products.d.ts",
											"qualifiedName": "AdminPostProductsToCollectionReq"
										},
										"name": "AdminPostProductsToCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11679,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11680,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11681,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a collection. This would not delete the product, only the association between the product and the collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.removeProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ id, object, removed_products }) => {\n  console.log(removed_products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11682,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the product collection"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11683,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/remove-products.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionReq"
										},
										"name": "AdminDeleteProductsFromCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11684,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionRes"
										},
										"name": "AdminDeleteProductsFromCollectionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11651,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11652,
							"name": "new AdminCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11653,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11650,
								"name": "AdminCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11651
					]
				},
				{
					"title": "Methods",
					"children": [
						11654,
						11658,
						11663,
						11667,
						11671,
						11675,
						11680
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11685,
			"name": "AdminCurrenciesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.currencies`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA store can use unlimited currencies, and each region must be associated with at least one currency.\nCurrencies are defined within the Medusa backend. The methods in this class allow admins to list and update currencies.\n\nRelated Guide: [How to manage currencies](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-currencies)."
					}
				]
			},
			"children": [
				{
					"id": 11689,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11690,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of currencies. The currencies can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`code`"
									},
									{
										"kind": "text",
										"text": ". The currencies can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of currencies with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list currencies:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list()\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list({\n  limit,\n  offset\n})\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11691,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved currencies."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/list-currencies.d.ts",
											"qualifiedName": "AdminGetCurrenciesParams"
										},
										"name": "AdminGetCurrenciesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11692,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesListRes"
										},
										"name": "AdminCurrenciesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11693,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11694,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Currency's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the currency's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.update(code, {\n  includes_tax: true\n})\n.then(({ currency }) => {\n  console.log(currency.code);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11695,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11696,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the currency."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/update-currency.d.ts",
											"qualifiedName": "AdminPostCurrenciesCurrencyReq"
										},
										"name": "AdminPostCurrenciesCurrencyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11697,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesRes"
										},
										"name": "AdminCurrenciesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11686,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11687,
							"name": "new AdminCurrenciesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11688,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11685,
								"name": "AdminCurrenciesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11686
					]
				},
				{
					"title": "Methods",
					"children": [
						11689,
						11693
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11582,
			"name": "AdminCustomResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests custom API Routes. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.custom`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 11586,
					"name": "get",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11587,
							"name": "get",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`GET`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TQuery`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted query parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostsResponse = {\nposts: Post[]\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.get<Record<string, any>, PostsResponse>(\n  \"/blog/posts\"\n)\n.then(({ posts }) => {\n  console.log(posts.length);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 11588,
									"name": "TQuery",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 11589,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 11590,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11591,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Query path parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 11588,
										"name": "TQuery",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 11592,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 11593,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 11589,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11594,
					"name": "post",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11595,
							"name": "post",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`POST`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TPayload`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted body parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostRequest = {\n  title: string\n}\ntype PostResponse = {\n  post: Post\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.post<PostRequest, PostResponse>(\n  \"/blog/posts\",\n  {\n    title: \"My post\",\n  }\n)\n.then(({ post }) => {\n  console.log(post.id);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 11596,
									"name": "TPayload",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 11597,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 11598,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11599,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Body parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 11596,
										"name": "TPayload",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 11600,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 11601,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 11597,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11602,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11603,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`DELETE`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a type parameters "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " indicating the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.custom.delete(\n  `/blog/posts/${postId}`\n)\n.then(() => {\n  // deleted successfully\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 11604,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 11605,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11606,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 11607,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 11604,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11583,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11584,
							"name": "new AdminCustomResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11585,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11582,
								"name": "AdminCustomResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11583
					]
				},
				{
					"title": "Methods",
					"children": [
						11586,
						11594,
						11602
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11698,
			"name": "AdminCustomerGroupsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customerGroups`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nCustomer Groups can be used to organize customers that share similar data or attributes into dedicated groups.\nThis can be useful for different purposes such as setting a different price for a specific customer group.\n\nRelated Guide: [How to manage customer groups](https://docs.medusajs.com/modules/customers/admin/manage-customer-groups)."
					}
				]
			},
			"children": [
				{
					"id": 11702,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11703,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.create({\n  name: \"VIP\"\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11704,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the customer group to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/create-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsReq"
										},
										"name": "AdminPostCustomerGroupsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11705,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11706,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11707,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.retrieve(customerGroupId)\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11708,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11709,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/get-customer-group.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsGroupParams"
										},
										"name": "AdminGetCustomerGroupsGroupParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11710,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11711,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11712,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer group's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11713,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11714,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/update-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupReq"
										},
										"name": "AdminPostCustomerGroupsGroupReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11715,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11716,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11717,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a customer group. This doesn't delete the customers associated with the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.delete(customerGroupId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11718,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11719,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11720,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11721,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customer groups. The customer groups can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": ". The customer groups can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customer groups with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list()\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  expand: \"customers\"\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  \"expand\": \"customers\",\n  limit,\n  offset\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11722,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customer groups."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/list-customer-groups.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsParams"
										},
										"name": "AdminGetCustomerGroupsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11723,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsListRes"
										},
										"name": "AdminCustomerGroupsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11724,
					"name": "addCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11725,
							"name": "addCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of customers to a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11726,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11727,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to add to the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/add-customers-batch.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupCustomersBatchReq"
										},
										"name": "AdminPostCustomerGroupsGroupCustomersBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11728,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11729,
					"name": "removeCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11730,
							"name": "removeCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of customers from a customer group. This doesn't delete the customer, only the association between the customer and the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.removeCustomers(customerGroupId, {\n  customer_ids: [\n    {\n      id: customerId\n    }\n  ]\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11731,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11732,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to remove from the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/delete-customers-batch.d.ts",
											"qualifiedName": "AdminDeleteCustomerGroupsGroupCustomerBatchReq"
										},
										"name": "AdminDeleteCustomerGroupsGroupCustomerBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11733,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11734,
					"name": "listCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11735,
							"name": "listCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customers in a customer group. The customers can be filtered by the "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " field. The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.listCustomers(customerGroupId)\n.then(({ customers }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11736,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11737,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11738,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11699,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11700,
							"name": "new AdminCustomerGroupsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11701,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11698,
								"name": "AdminCustomerGroupsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11699
					]
				},
				{
					"title": "Methods",
					"children": [
						11702,
						11706,
						11711,
						11716,
						11720,
						11724,
						11729,
						11734
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11739,
			"name": "AdminCustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nCustomers can either be created when they register through the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CustomersResource.create",
						"target": 11295
					},
					{
						"kind": "text",
						"text": " method, or created by the admin using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "create",
						"target": 11743,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method.\n\nRelated Guide: [How to manage customers](https://docs.medusajs.com/modules/customers/admin/manage-customers)."
					}
				]
			},
			"children": [
				{
					"id": 11743,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11744,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer as an admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.create({\n  email: \"user@example.com\",\n  first_name: \"Caterina\",\n  last_name: \"Yost\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11745,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/create-customer.d.ts",
											"qualifiedName": "AdminPostCustomersReq"
										},
										"name": "AdminPostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11746,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11747,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11748,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.update(customerId, {\n  first_name: \"Dolly\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11749,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11750,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/update-customer.d.ts",
											"qualifiedName": "AdminPostCustomersCustomerReq"
										},
										"name": "AdminPostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11751,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11752,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11753,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.retrieve(customerId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11754,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11755,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11756,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11757,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Customers. The customers can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`groups`"
									},
									{
										"kind": "text",
										"text": ". The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list()\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\"\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\",\n  limit,\n  offset\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11758,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11759,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11740,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11741,
							"name": "new AdminCustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11742,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11739,
								"name": "AdminCustomersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11740
					]
				},
				{
					"title": "Methods",
					"children": [
						11743,
						11747,
						11752,
						11756
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11760,
			"name": "AdminDiscountsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.discounts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create discounts with conditions and rules, providing them with advanced settings for variety of cases.\nThe methods in this class can be used to manage discounts, their conditions, resources, and more.\n\nRelated Guide: [How to manage discounts](https://docs.medusajs.com/modules/discounts/admin/manage-discounts)."
					}
				]
			},
			"children": [
				{
					"id": 11764,
					"name": "addRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11765,
							"name": "addRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a Region to the list of Regions a Discount can be used in."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11766,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11767,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to add."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11768,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11769,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11770,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount with a given set of rules that defines how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.create({\n  code: \"TEST\",\n  rule: {\n    type: DiscountRuleType.FIXED,\n    value: 10,\n    allocation: AllocationType.ITEM\n  },\n  regions: [\"reg_XXXXXXXX\"],\n  is_dynamic: false,\n  is_disabled: false\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11771,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsReq"
										},
										"name": "AdminPostDiscountsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11772,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11773,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11774,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount with a given set of rules that define how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.update(discountId, {\n  code: \"TEST\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11775,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11776,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountReq"
										},
										"name": "AdminPostDiscountsDiscountReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11777,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11778,
					"name": "createDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11779,
							"name": "createDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a dynamic unique code that can map to a parent discount. This is useful if you want to automatically generate codes with the same rules and conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createDynamicCode(discountId, {\n  code: \"TEST\",\n  usage_limit: 1\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11780,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11781,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The dynamic code to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-dynamic-code.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountDynamicCodesReq"
										},
										"name": "AdminPostDiscountsDiscountDynamicCodesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11782,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11783,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11784,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount. Deleting the discount will make it unavailable for customers to use."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.delete(discountId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11785,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11786,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11787,
					"name": "deleteDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11788,
							"name": "deleteDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a dynamic code from a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteDynamicCode(discountId, code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11789,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11790,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the dynamic code to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11791,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11792,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11793,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieve(discountId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11794,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11795,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-discount.d.ts",
											"qualifiedName": "AdminGetDiscountParams"
										},
										"name": "AdminGetDiscountParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11796,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11797,
					"name": "retrieveByCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11798,
							"name": "retrieveByCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount's details by its discount code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieveByCode(code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11799,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11800,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11801,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11802,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Discounts. The discounts can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`rule`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_dynamic`"
									},
									{
										"kind": "text",
										"text": ". The discounts can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of discounts with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list()\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\"\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\",\n  limit,\n  offset\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11803,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved discounts."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/list-discounts.d.ts",
											"qualifiedName": "AdminGetDiscountsParams"
										},
										"name": "AdminGetDiscountsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11804,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsListRes"
										},
										"name": "AdminDiscountsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11805,
					"name": "removeRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11806,
							"name": "removeRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Region from the list of Regions that a Discount can be used in. This does not delete a region, only the association between it and the discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.removeRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11807,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11808,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11809,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11810,
					"name": "createCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11811,
							"name": "createCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11812,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11813,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount condition to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditions"
										},
										"name": "AdminPostDiscountsDiscountConditions",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11814,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 11815,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11816,
					"name": "updateCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11817,
							"name": "updateCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To update a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11818,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11819,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11820,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsCondition"
										},
										"name": "AdminPostDiscountsDiscountConditionsCondition",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11821,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 11822,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11823,
					"name": "deleteCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11824,
							"name": "deleteCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount condition. This doesn't delete resources associated to the discount condition."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteCondition(discountId, conditionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11825,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11826,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11827,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11828,
					"name": "getCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11829,
							"name": "getCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Discount Condition's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount condition details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a discount condition by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId)\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId, {\n  expand: \"discount_rule\"\n})\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11830,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount that the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11831,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11832,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-condition.d.ts",
											"qualifiedName": "AdminGetDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminGetDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11833,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountConditionsRes"
										},
										"name": "AdminDiscountConditionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11834,
					"name": "addConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11835,
							"name": "addConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a batch of resources to a discount condition. The type of resource depends on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ",\nthe resources being added should be products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add resources to a discount condition:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations to include in the returned discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11836,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11837,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11838,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to add to the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11839,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11840,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11841,
					"name": "deleteConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11842,
							"name": "deleteConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a batch of resources from a discount condition. This will only remove the association between the resource and the discount condition, not the resource itself."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11843,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11844,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11845,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/delete-resources-from-condition-batch.d.ts",
											"qualifiedName": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11846,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11761,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11762,
							"name": "new AdminDiscountsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11763,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11760,
								"name": "AdminDiscountsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11761
					]
				},
				{
					"title": "Methods",
					"children": [
						11764,
						11769,
						11773,
						11778,
						11783,
						11787,
						11792,
						11797,
						11801,
						11805,
						11810,
						11816,
						11823,
						11828,
						11834,
						11841
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11847,
			"name": "AdminDraftOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.draftOrders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA draft order is an order created manually by the admin. It allows admins to create orders without direct involvement from the customer.\n\nRelated Guide: [How to manage draft orders](https://docs.medusajs.com/modules/orders/admin/manage-draft-orders)."
					}
				]
			},
			"children": [
				{
					"id": 11851,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11852,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Draft Order. A draft order is not transformed into an order until payment is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.create({\n  email: \"user@example.com\",\n  region_id,\n  items: [\n    {\n      quantity: 1\n    }\n  ],\n  shipping_methods: [\n    {\n      option_id\n    }\n  ],\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11853,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The draft order to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersReq"
										},
										"name": "AdminPostDraftOrdersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11854,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11855,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11856,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Line Item in the Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.addLineItem(draftOrderId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11857,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11858,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11859,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11860,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11861,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.delete(draftOrderId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11862,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11863,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11864,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11865,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Line Item from a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.removeLineItem(draftOrderId, itemId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11866,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11867,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete from the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11868,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11869,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11870,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.retrieve(draftOrderId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11871,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11872,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11873,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11874,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an list of Draft Orders. The draft orders can be filtered by parameters such as "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The draft orders can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of draft orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list draft orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list()\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list({\n  limit,\n  offset\n})\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11875,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved draft orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/list-draft-orders.d.ts",
											"qualifiedName": "AdminGetDraftOrdersParams"
										},
										"name": "AdminGetDraftOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11876,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersListRes"
										},
										"name": "AdminDraftOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11877,
					"name": "markPaid",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11878,
							"name": "markPaid",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture the draft order's payment. This will also set the draft order's status to "
									},
									{
										"kind": "code",
										"text": "`completed`"
									},
									{
										"kind": "text",
										"text": " and create an order from the draft order. The payment is captured through Medusa's system payment,\nwhich is manual payment that isn't integrated with any third-party payment provider. It is assumed that the payment capturing is handled manually by the admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.markPaid(draftOrderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11879,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11880,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes"
										},
										"name": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11881,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11882,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.update(draftOrderId, {\n  email: \"user@example.com\"\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11883,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11884,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the draft order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11885,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11886,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11887,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Line Item in a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.updateLineItem(draftOrderId, lineId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11888,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11889,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11890,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsItemReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11891,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11848,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11849,
							"name": "new AdminDraftOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11850,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11847,
								"name": "AdminDraftOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11848
					]
				},
				{
					"title": "Methods",
					"children": [
						11851,
						11855,
						11860,
						11864,
						11869,
						11873,
						11877,
						11881,
						11886
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11892,
			"name": "AdminGiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create gift cards and send them directly to customers, specifying options like their balance, region, and more.\nThese gift cards are different than the saleable gift cards in a store, which are created and managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 12289
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-custom-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 11896,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11897,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a gift card that can redeemed by its unique code. The Gift Card is only valid within one region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.create({\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11898,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The gift card to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/create-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsReq"
										},
										"name": "AdminPostGiftCardsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11899,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11900,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11901,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.update(giftCardId, {\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11902,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11903,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the gift card."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/update-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsGiftCardReq"
										},
										"name": "AdminPostGiftCardsGiftCardReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11904,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11905,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11906,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a gift card. Once deleted, it can't be used by customers."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.delete(giftCardId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11907,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11908,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11909,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11910,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.retrieve(giftCardId)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11911,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11912,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11913,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11914,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of gift cards. The gift cards can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The gift cards can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of gift cards with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list gift cards:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list()\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list({\n  limit,\n  offset\n})\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11915,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved gift cards."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/list-gift-cards.d.ts",
											"qualifiedName": "AdminGetGiftCardsParams"
										},
										"name": "AdminGetGiftCardsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11916,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsListRes"
										},
										"name": "AdminGiftCardsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11893,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11894,
							"name": "new AdminGiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11895,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11892,
								"name": "AdminGiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11893
					]
				},
				{
					"title": "Methods",
					"children": [
						11896,
						11900,
						11905,
						11909,
						11913
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11540,
			"name": "Admin",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class includes properties used to send requests to the [Admin API Routes](https://docs.medusajs.com/api/admin). All its properties\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 11544,
					"name": "auth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminAuthResource",
								"target": 11608,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11608,
						"name": "AdminAuthResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11545,
					"name": "batchJobs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminBatchJobsResource",
								"target": 11626,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11626,
						"name": "AdminBatchJobsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11546,
					"name": "customers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomersResource",
								"target": 11739,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11739,
						"name": "AdminCustomersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11547,
					"name": "customerGroups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomerGroupsResource",
								"target": 11698,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11698,
						"name": "AdminCustomerGroupsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11548,
					"name": "discounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDiscountsResource",
								"target": 11760,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11760,
						"name": "AdminDiscountsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11549,
					"name": "currencies",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCurrenciesResource",
								"target": 11685,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies_getcurrencies)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11685,
						"name": "AdminCurrenciesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11550,
					"name": "collections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCollectionsResource",
								"target": 11650,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11650,
						"name": "AdminCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11551,
					"name": "draftOrders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDraftOrdersResource",
								"target": 11847,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11847,
						"name": "AdminDraftOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11552,
					"name": "giftCards",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminGiftCardsResource",
								"target": 11892,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11892,
						"name": "AdminGiftCardsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11553,
					"name": "invites",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInvitesResource",
								"target": 11968,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11968,
						"name": "AdminInvitesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11554,
					"name": "inventoryItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInventoryItemsResource",
								"target": 11917,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11917,
						"name": "AdminInventoryItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11555,
					"name": "notes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotesResource",
								"target": 11991,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11991,
						"name": "AdminNotesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11556,
					"name": "priceLists",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPriceListResource",
								"target": 12219,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12219,
						"name": "AdminPriceListResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11557,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductsResource",
								"target": 12289,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12289,
						"name": "AdminProductsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11558,
					"name": "productTags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTagsResource",
								"target": 12274,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12274,
						"name": "AdminProductTagsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11559,
					"name": "productTypes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTypesResource",
								"target": 12281,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12281,
						"name": "AdminProductTypesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11560,
					"name": "users",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUsersResource",
								"target": 12775,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12775,
						"name": "AdminUsersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11561,
					"name": "returns",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnsResource",
								"target": 12514,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12514,
						"name": "AdminReturnsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11562,
					"name": "orders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrdersResource",
								"target": 12029,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12029,
						"name": "AdminOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11563,
					"name": "orderEdits",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrderEditsResource",
								"target": 12160,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12160,
						"name": "AdminOrderEditsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11564,
					"name": "publishableApiKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPublishableApiKeyResource",
								"target": 12362,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12362,
						"name": "AdminPublishableApiKeyResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11565,
					"name": "returnReasons",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnReasonsResource",
								"target": 12490,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12490,
						"name": "AdminReturnReasonsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11566,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@props",
								"content": [
									{
										"kind": "text",
										"text": "variants - An instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "AdminVariantsResource",
										"target": 12808,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants)."
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12808,
						"name": "AdminVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11567,
					"name": "salesChannels",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSalesChannelsResource",
								"target": 12531,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12531,
						"name": "AdminSalesChannelsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11568,
					"name": "swaps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSwapsResource",
								"target": 12675,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12675,
						"name": "AdminSwapsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11569,
					"name": "shippingProfiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingProfilesResource",
								"target": 12601,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12601,
						"name": "AdminShippingProfilesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11570,
					"name": "stockLocations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStockLocationsResource",
								"target": 12625,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12625,
						"name": "AdminStockLocationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11571,
					"name": "store",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStoresResource",
								"target": 12650,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12650,
						"name": "AdminStoresResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11572,
					"name": "shippingOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingOptionsResource",
								"target": 12576,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12576,
						"name": "AdminShippingOptionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11573,
					"name": "regions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminRegionsResource",
								"target": 12406,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12406,
						"name": "AdminRegionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11574,
					"name": "reservations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReservationsResource",
								"target": 12465,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12465,
						"name": "AdminReservationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11575,
					"name": "notifications",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotificationsResource",
								"target": 12016,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12016,
						"name": "AdminNotificationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11576,
					"name": "taxRates",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminTaxRatesResource",
								"target": 12687,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12687,
						"name": "AdminTaxRatesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11577,
					"name": "uploads",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUploadsResource",
								"target": 12751,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12751,
						"name": "AdminUploadsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11578,
					"name": "paymentCollections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentCollectionsResource",
								"target": 12825,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12825,
						"name": "AdminPaymentCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11579,
					"name": "payments",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentsResource",
								"target": 12847,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12847,
						"name": "AdminPaymentsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11580,
					"name": "productCategories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductCategoriesResource",
								"target": 12865,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12865,
						"name": "AdminProductCategoriesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11581,
					"name": "custom",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomResource",
								"target": 11582,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to custom API Routes."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11582,
						"name": "AdminCustomResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11541,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11542,
							"name": "new Admin",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11543,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11540,
								"name": "Admin",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11541
					]
				},
				{
					"title": "Properties",
					"children": [
						11544,
						11545,
						11546,
						11547,
						11548,
						11549,
						11550,
						11551,
						11552,
						11553,
						11554,
						11555,
						11556,
						11557,
						11558,
						11559,
						11560,
						11561,
						11562,
						11563,
						11564,
						11565,
						11566,
						11567,
						11568,
						11569,
						11570,
						11571,
						11572,
						11573,
						11574,
						11575,
						11576,
						11577,
						11578,
						11579,
						11580,
						11581
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11917,
			"name": "AdminInventoryItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.inventoryItems`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nInventory items, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), can be used to manage the inventory of saleable items in your store.\n\nRelated Guide: [How to manage inventory items](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-inventory-items)."
					}
				]
			},
			"children": [
				{
					"id": 11921,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11922,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.retrieve(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11923,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11924,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations applied on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/get-inventory-item.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemParams"
										},
										"name": "AdminGetInventoryItemsItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11925,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11926,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11927,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.update(inventoryItemId, {\n  origin_country: \"US\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11928,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11929,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemReq"
										},
										"name": "AdminPostInventoryItemsInventoryItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11930,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemParams"
										},
										"name": "AdminPostInventoryItemsInventoryItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11931,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11932,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11933,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an Inventory Item. This does not delete the associated product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.delete(inventoryItemId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11934,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11935,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11936,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11937,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an Inventory Item for a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.create({\n  variant_id: \"variant_123\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11938,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The inventory item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsReq"
										},
										"name": "AdminPostInventoryItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11939,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsParams"
										},
										"name": "AdminPostInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11940,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11941,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11942,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory items. The inventory items can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe inventory items can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of inventory items with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list inventory items:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list()\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list({\n  limit,\n  offset\n})\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11943,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved inventory items."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-inventory-items.d.ts",
											"qualifiedName": "AdminGetInventoryItemsParams"
										},
										"name": "AdminGetInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11944,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes"
										},
										"name": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11945,
					"name": "updateLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11946,
							"name": "updateLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a location level's details for a given inventory item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.updateLocationLevel(inventoryItemId, locationId, {\n  stocked_quantity: 15,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11947,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11948,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11949,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the location level."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11950,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11951,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11952,
					"name": "createLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11953,
							"name": "createLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Location Level for a given Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.createLocationLevel(inventoryItemId, {\n  location_id: \"sloc_123\",\n  stocked_quantity: 10,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11954,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11955,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The location level to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11956,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11957,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11958,
					"name": "deleteLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11959,
							"name": "deleteLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a location level of an Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.deleteLocationLevel(inventoryItemId, locationId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11960,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11961,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11962,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11963,
					"name": "listLocationLevels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11964,
							"name": "listLocationLevels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory levels of an inventory item. The inventory levels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details and list of location levels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.listLocationLevels(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.location_levels);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11965,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location levels belong to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11966,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved location levels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-location-levels.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminGetInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11967,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsLocationLevelsRes"
										},
										"name": "AdminInventoryItemsLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11918,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11919,
							"name": "new AdminInventoryItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11920,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11917,
								"name": "AdminInventoryItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11918
					]
				},
				{
					"title": "Methods",
					"children": [
						11921,
						11926,
						11932,
						11936,
						11941,
						11945,
						11952,
						11958,
						11963
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11968,
			"name": "AdminInvitesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.invites`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can invite new users to manage their team. This would allow new users to authenticate as admins and perform admin functionalities.\n\nRelated Guide: [How to manage invites](https://docs.medusajs.com/modules/users/admin/manage-invites)."
					}
				]
			},
			"children": [
				{
					"id": 11972,
					"name": "accept",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11973,
							"name": "accept",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Accept an Invite. This will also delete the invite and create a new user that can log in and perform admin functionalities. \nThe user will have the email associated with the invite, and the password provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is accepted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.accept({\n  token,\n  user: {\n    first_name: \"Brigitte\",\n    last_name: \"Collier\",\n    password: \"supersecret\"\n  }\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11974,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user accepting the invite."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/accept-invite.d.ts",
											"qualifiedName": "AdminPostInvitesInviteAcceptReq"
										},
										"name": "AdminPostInvitesInviteAcceptReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11975,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11976,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11977,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an invite. This will generate a token associated with the invite and trigger an "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event. If you have a Notification Provider installed that handles this\nevent, a notification should be sent to the email associated with the invite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.create({\n  user: \"user@example.com\",\n  role: \"admin\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11978,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminPostInvitesPayload"
										},
										"name": "AdminPostInvitesPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 11979,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11980,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11981,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an invite. Only invites that weren't accepted can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.delete(inviteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11982,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11983,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11984,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11985,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of invites."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of invites."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.list()\n.then(({ invites }) => {\n  console.log(invites.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11986,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/index.d.ts",
											"qualifiedName": "AdminListInvitesRes"
										},
										"name": "AdminListInvitesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11987,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11988,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend an invite. This renews the expiry date by seven days and generates a new token for the invite. It also triggers the "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event, \nso if you have a Notification Provider installed that handles this event, a notification should be sent to the email associated with the \ninvite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is resent successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.resend(inviteId)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11989,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11990,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11969,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11970,
							"name": "new AdminInvitesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11971,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11968,
								"name": "AdminInvitesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11969
					]
				},
				{
					"title": "Methods",
					"children": [
						11972,
						11976,
						11980,
						11984,
						11987
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11991,
			"name": "AdminNotesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nNotes are created by admins and can be associated with any resource. For example, an admin can add a note to an order for additional details or remarks."
					}
				]
			},
			"children": [
				{
					"id": 11995,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11996,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Note which can be associated with any resource."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.create({\n  resource_id,\n  resource_type: \"order\",\n  value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11997,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/create-note.d.ts",
											"qualifiedName": "AdminPostNotesReq"
										},
										"name": "AdminPostNotesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11998,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11999,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12000,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.update(noteId, {\n value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12001,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12002,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the note."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/update-note.d.ts",
											"qualifiedName": "AdminPostNotesNoteReq"
										},
										"name": "AdminPostNotesNoteReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12003,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12004,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12005,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Note."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.delete(noteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12006,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12007,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12008,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12009,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.retrieve(noteId)\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12010,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12011,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12012,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12013,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notes. The notes can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`resource_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The notes can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notes with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notes:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list()\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list({\n  limit,\n  offset\n})\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12014,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on retrieved notes."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/list-notes.d.ts",
											"qualifiedName": "AdminGetNotesParams"
										},
										"name": "AdminGetNotesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12015,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesListRes"
										},
										"name": "AdminNotesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11992,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11993,
							"name": "new AdminNotesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11994,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11991,
								"name": "AdminNotesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11992
					]
				},
				{
					"title": "Methods",
					"children": [
						11995,
						11999,
						12004,
						12008,
						12012
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12016,
			"name": "AdminNotificationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notifications`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nNotifications are sent to customers to inform them of new updates. For example, a notification can be sent to the customer when their order is place or its state is updated.\nThe notification's type, such as an email or SMS, is determined by the notification provider installed on the Medusa backend."
					}
				]
			},
			"children": [
				{
					"id": 12020,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12021,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notifications. The notifications can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`event_name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`resource_type`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe notifications can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notifications with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list()\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\"\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\",\n  limit,\n  offset\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12022,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved notifications."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/list-notifications.d.ts",
											"qualifiedName": "AdminGetNotificationsParams"
										},
										"name": "AdminGetNotificationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12023,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsListRes"
										},
										"name": "AdminNotificationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12024,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12025,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend a previously sent notifications, with the same data but optionally to a different address."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the notification's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.resend(notificationId)\n.then(({ notification }) => {\n  console.log(notification.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12026,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The notification's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12027,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details necessary to resend the notification."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/resend-notification.d.ts",
											"qualifiedName": "AdminPostNotificationsNotificationResendReq"
										},
										"name": "AdminPostNotificationsNotificationResendReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12028,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsRes"
										},
										"name": "AdminNotificationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12017,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12018,
							"name": "new AdminNotificationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12019,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12016,
								"name": "AdminNotificationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12017
					]
				},
				{
					"title": "Methods",
					"children": [
						12020,
						12024
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12160,
			"name": "AdminOrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can edit an order to remove, add, or update an item's quantity. When an admin edits an order, they're stored as an "
					},
					{
						"kind": "code",
						"text": "`OrderEdit`"
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to edit an order](https://docs.medusajs.com/modules/orders/admin/edit-order)."
					}
				]
			},
			"children": [
				{
					"id": 12164,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12165,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order edit by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId, {\n  expand: \"order\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12166,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12167,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/get-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsOrderEditParams"
										},
										"name": "GetOrderEditsOrderEditParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12168,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12169,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12170,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of order edits. The order edits can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`order_id`"
									},
									{
										"kind": "text",
										"text": " passed to the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order edits can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of order edits with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list()\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\"\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\",\n  limit,\n  offset\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12171,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to retrieved order edits."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/list-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsParams"
										},
										"name": "GetOrderEditsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12172,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsListRes"
										},
										"name": "AdminOrderEditsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12173,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12174,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.create({ orderId })\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12175,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order edit to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/create-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsReq"
										},
										"name": "AdminPostOrderEditsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12176,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12177,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12178,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.update(orderEditId, {\n  internal_note: \"internal reason XY\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12179,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12180,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in an order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsOrderEditReq"
										},
										"name": "AdminPostOrderEditsOrderEditReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12181,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12182,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12183,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an order edit. Only order edits that have the status "
									},
									{
										"kind": "code",
										"text": "`created`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.delete(orderEditId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12184,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12185,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12186,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12187,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates adding an item in the original order. The item will not be added to the original order until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.addLineItem(orderEditId, {\n  variant_id,\n  quantity\n})\n.then(({ order_edit }) => {\n   console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12188,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to add the line item change to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12189,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item change to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/add-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12190,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12191,
					"name": "deleteItemChange",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12192,
							"name": "deleteItemChange",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item change that indicates the addition, deletion, or update of a line item in the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.deleteItemChange(orderEdit_id, itemChangeId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12193,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12194,
									"name": "itemChangeId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12195,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditItemChangeDeleteRes"
										},
										"name": "AdminOrderEditItemChangeDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12196,
					"name": "requestConfirmation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12197,
							"name": "requestConfirmation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request customer confirmation of an order edit. This would emit the event "
									},
									{
										"kind": "code",
										"text": "`order-edit.requested`"
									},
									{
										"kind": "text",
										"text": " which Notification Providers listen to and send\na notification to the customer about the order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.requestConfirmation(orderEditId)\n.then({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12198,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12199,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12200,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12201,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.cancel(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12202,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to cancel."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12203,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12204,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12205,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Confirm an order edit. This will reflect the changes in the order edit on the associated order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.confirm(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12206,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to confirm."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12207,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12208,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12209,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create or update a line item change in the order edit that indicates addition, deletion, or update of a line item into an original order. Line item changes\nare only reflected on the original order after the order edit is confirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.updateLineItem(orderEditId, lineItemId, {\n  quantity: 5\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12210,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12211,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to create or update its line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12212,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The creation or update of the line item change."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsLineItemReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsLineItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12213,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12214,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12215,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates deleting an item in the original order. The item in the original order will not be deleted until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.removeLineItem(orderEditId, lineItemId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12216,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item change belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12217,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12218,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12161,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12162,
							"name": "new AdminOrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12163,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12160,
								"name": "AdminOrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12161
					]
				},
				{
					"title": "Methods",
					"children": [
						12164,
						12169,
						12173,
						12177,
						12182,
						12186,
						12191,
						12196,
						12200,
						12204,
						12208,
						12214
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12029,
			"name": "AdminOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nOrders are purchases made by customers, typically through a storefront using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 11220
					},
					{
						"kind": "text",
						"text": ". Draft orders created by the admin are also transformed to an Order once the payment is captured.\nManaging orders include managing fulfillment, payment, claims, reservations, and more.\n\nRelated Guide: [How to manage orders](https://docs.medusajs.com/modules/orders/admin/manage-orders)."
					}
				]
			},
			"children": [
				{
					"id": 12033,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12034,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.update(orderId, {\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12035,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12036,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-order.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReq"
										},
										"name": "AdminPostOrdersOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12037,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12038,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12039,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId, {\n  expand: \"customer\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12040,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12041,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "FindParams"
										},
										"name": "FindParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12042,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12043,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12044,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`display_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\"\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\",\n  limit,\n  offset\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12045,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/list-orders.d.ts",
											"qualifiedName": "AdminGetOrdersParams"
										},
										"name": "AdminGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12046,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersListRes"
										},
										"name": "AdminOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12047,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12048,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete an order and change its status. A canceled order can't be completed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.complete(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12049,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12050,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12051,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12052,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture all the payments associated with an order. The payment of canceled orders can't be captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.capturePayment(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12053,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose payments should be captured."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12054,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12055,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12056,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund an amount for an order. The amount must be less than or equal the "
									},
									{
										"kind": "code",
										"text": "`refundable_amount`"
									},
									{
										"kind": "text",
										"text": " of the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.refundPayment(orderId, {\n  amount: 1000,\n  reason: \"Do not like it\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12057,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose customer should be refunded."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12058,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/refund-payment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderRefundsReq"
										},
										"name": "AdminPostOrdersOrderRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12059,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12060,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12061,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment of an Order using the fulfillment provider, and change the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createFulfillment(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12062,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12063,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-fulfillment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12064,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12065,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12066,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelFulfillment(orderId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12067,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12068,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12069,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12070,
					"name": "cancelSwapFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12071,
							"name": "cancelSwapFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwapFulfillment(orderId, swapId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12072,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12073,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the swap the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12074,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12075,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12076,
					"name": "cancelClaimFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12077,
							"name": "cancelClaimFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaimFulfillment(orderId, claimId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12078,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12079,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12080,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12081,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12082,
					"name": "createShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12083,
							"name": "createShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment and mark a fulfillment as shipped. This changes the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createShipment(order_id, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12084,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12085,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShipmentReq"
										},
										"name": "AdminPostOrdersOrderShipmentReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12086,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12087,
					"name": "requestReturn",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12088,
							"name": "requestReturn",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request and create a return for items in an order. If the return shipping method is specified, it will be automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the return under the "
											},
											{
												"kind": "code",
												"text": "`returns`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.requestReturn(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12089,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12090,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/request-return.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReturnsReq"
										},
										"name": "AdminPostOrdersOrderReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12091,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12092,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12093,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order and change its status. This will also cancel any associated fulfillments and payments, and it may fail if the payment or fulfillment Provider \nis unable to cancel the payment/fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancel(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12094,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12095,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12096,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12097,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to an order. If another shipping method exists with the same shipping profile, the previous shipping method will be replaced."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.addShippingMethod(orderId, {\n  price: 1000,\n  option_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12098,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12099,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to be added."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/add-shipping-method.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShippingMethodsReq"
										},
										"name": "AdminPostOrdersOrderShippingMethodsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12100,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12101,
					"name": "archive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12102,
							"name": "archive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Archive an order and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.archive(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12103,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12104,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12105,
					"name": "createSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12106,
							"name": "createSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a swap for an order. This includes creating a return that is associated with the swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwap(orderId, {\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.swaps);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12107,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12108,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsReq"
										},
										"name": "AdminPostOrdersOrderSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12109,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12110,
					"name": "cancelSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12111,
							"name": "cancelSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwap(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12112,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12113,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12114,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12115,
					"name": "fulfillSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12116,
							"name": "fulfillSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Swap and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ". If it requires any additional actions,\nits fulfillment status may change to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillSwap(orderId, swapId, {\n  no_notification: true,\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12117,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12118,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12119,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12120,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12121,
					"name": "createSwapShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12122,
							"name": "createSwapShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for a swap and mark its fulfillment as shipped. This changes the swap's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwapShipment(orderId, swapId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12123,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12124,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12125,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapShipmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12126,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12127,
					"name": "processSwapPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12128,
							"name": "processSwapPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Process a swap's payment either by refunding or issuing a payment. This depends on the "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " of the swap. If "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is negative, the amount is refunded.\nIf "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is positive, the amount is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.processSwapPayment(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12129,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12130,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12131,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12132,
					"name": "createClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12133,
							"name": "createClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a claim for an order. If a return shipping method is specified, a return will also be created and associated with the claim. If the claim's type is "
									},
									{
										"kind": "code",
										"text": "`refund`"
									},
									{
										"kind": "text",
										"text": ",\nthe refund is processed as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claim under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaim(orderId, {\n  type: 'refund',\n  claim_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12134,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12135,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsReq"
										},
										"name": "AdminPostOrdersOrderClaimsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12136,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12137,
					"name": "cancelClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12138,
							"name": "cancelClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim and change its status. A claim can't be canceled if it has a refund, if its fulfillments haven't been canceled, of if its associated return hasn't been canceled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaim(orderId, claimId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12139,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12140,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12141,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12142,
					"name": "updateClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12143,
							"name": "updateClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a claim's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claims under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.updateClaim(orderId, claimId, {\n  no_notification: true\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12144,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12145,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12146,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12147,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12148,
					"name": "fulfillClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12149,
							"name": "fulfillClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Claim, and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": " depending on whether all the items were fulfilled.\nIt may also change the status to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": " if any actions are required."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillClaim(orderId, claimId, {\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12150,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12151,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12152,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12153,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12154,
					"name": "createClaimShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12155,
							"name": "createClaimShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for the claim and mark its fulfillment as shipped. If the shipment is created successfully, this changes the claim's fulfillment status\nto either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on whether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaimShipment(orderId, claimId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12156,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12157,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12158,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimShipmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12159,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12030,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12031,
							"name": "new AdminOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12032,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12029,
								"name": "AdminOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12030
					]
				},
				{
					"title": "Methods",
					"children": [
						12033,
						12038,
						12043,
						12047,
						12051,
						12055,
						12060,
						12065,
						12070,
						12076,
						12082,
						12087,
						12092,
						12096,
						12101,
						12105,
						12110,
						12115,
						12121,
						12127,
						12132,
						12137,
						12142,
						12148,
						12154
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12825,
			"name": "AdminPaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 12829,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12830,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n    console.log(payment_collection.id)\n  })\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"currency\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12831,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12832,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "AdminGetPaymentCollectionsParams"
										},
										"name": "AdminGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12833,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12834,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12835,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.update(paymentCollectionId, {\n  description\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12836,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12837,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/update-payment-collection.d.ts",
											"qualifiedName": "AdminUpdatePaymentCollectionsReq"
										},
										"name": "AdminUpdatePaymentCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12838,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12839,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12840,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment collection. Only payment collections with the statuses "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`not_paid`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.delete(paymentCollectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12841,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12842,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionDeleteRes"
										},
										"name": "AdminPaymentCollectionDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12843,
					"name": "markAsAuthorized",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12844,
							"name": "markAsAuthorized",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the status of a payment collection as "
									},
									{
										"kind": "code",
										"text": "`authorized`"
									},
									{
										"kind": "text",
										"text": ". This will also change the "
									},
									{
										"kind": "code",
										"text": "`authorized_amount`"
									},
									{
										"kind": "text",
										"text": " of the payment collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.markAsAuthorized(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12845,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12846,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12826,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12827,
							"name": "new AdminPaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12828,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12825,
								"name": "AdminPaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12826
					]
				},
				{
					"title": "Methods",
					"children": [
						12829,
						12834,
						12839,
						12843
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12847,
			"name": "AdminPaymentsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.payments`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA payment can be related to an order, swap, return, or more. It can be captured or refunded."
					}
				]
			},
			"children": [
				{
					"id": 12851,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12852,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a payment's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.retrieve(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12853,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12854,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/get-payment.d.ts",
											"qualifiedName": "GetPaymentsParams"
										},
										"name": "GetPaymentsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12855,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12856,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12857,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.capturePayment(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12858,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12859,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12860,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12861,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund a payment. The payment must be captured first."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refund's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { RefundReason } from \"@medusajs/medusa\";\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.refundPayment(paymentId, {\n  amount: 1000,\n  reason: RefundReason.RETURN,\n  note: \"Do not like it\",\n})\n.then(({ refund }) => {\n  console.log(refund.amount);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12862,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12863,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/refund-payment.d.ts",
											"qualifiedName": "AdminPostPaymentRefundsReq"
										},
										"name": "AdminPostPaymentRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12864,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminRefundRes"
										},
										"name": "AdminRefundRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12848,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12849,
							"name": "new AdminPaymentsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12850,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12847,
								"name": "AdminPaymentsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12848
					]
				},
				{
					"title": "Methods",
					"children": [
						12851,
						12856,
						12860
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12219,
			"name": "AdminPriceListResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.priceLists`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA price list are special prices applied to products based on a set of conditions, such as customer group.\n\nRelated Guide: [How to manage price lists](https://docs.medusajs.com/modules/price-lists/admin/manage-price-lists)."
					}
				]
			},
			"children": [
				{
					"id": 12223,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12224,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nmedusa.admin.priceLists.create({\n  name: \"New Price List\",\n  description: \"A new price list\",\n  type: PriceListType.SALE,\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12225,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price list to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/create-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12226,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12227,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12228,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.update(priceListId, {\n  name: \"New Price List\"\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12229,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12230,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/update-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12231,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12232,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12233,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a price list and its associated prices."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.delete(priceListId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12234,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12235,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12236,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12237,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.retrieve(priceListId)\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12238,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12239,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12240,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12241,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of price lists. The price lists can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The price lists can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of price lists with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list()\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\"\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\",\n  limit,\n  offset\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12242,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-lists.d.ts",
											"qualifiedName": "AdminGetPriceListPaginationParams"
										},
										"name": "AdminGetPriceListPaginationParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12243,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsListRes"
										},
										"name": "AdminPriceListsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12244,
					"name": "listProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12245,
							"name": "listProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products in a price list:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId)\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12246,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12247,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-list-products.d.ts",
											"qualifiedName": "AdminGetPriceListsPriceListProductsParams"
										},
										"name": "AdminGetPriceListsPriceListProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12248,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsProductsListRes"
										},
										"name": "AdminPriceListsProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12249,
					"name": "addPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12250,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add or update a list of prices in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.addPrices(priceListId, {\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12251,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12252,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of prices to add or update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/add-prices-batch.d.ts",
											"qualifiedName": "AdminPostPriceListPricesPricesReq"
										},
										"name": "AdminPostPriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12253,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12254,
					"name": "deletePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12255,
							"name": "deletePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a list of prices in a price list"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deletePrices(priceListId, {\n  price_ids: [\n    price_id\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12256,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12257,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The prices to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListPricesPricesReq"
										},
										"name": "AdminDeletePriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12258,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12259,
					"name": "deleteProductPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12260,
							"name": "deleteProductPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductPrices(priceListId, productId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12261,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12262,
									"name": "productId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12263,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12264,
					"name": "deleteVariantPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12265,
							"name": "deleteVariantPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product variant in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteVariantPrices(priceListId, variantId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12266,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12267,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12268,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12269,
					"name": "deleteProductsPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12270,
							"name": "deleteProductsPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices associated with multiple products in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductsPrices(priceListId, {\n  product_ids: [\n    productId1,\n    productId2,\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12271,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12272,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products whose prices should be deleted."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-products-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListsPriceListProductsPricesBatchReq"
										},
										"name": "AdminDeletePriceListsPriceListProductsPricesBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12273,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12220,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12221,
							"name": "new AdminPriceListResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12222,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12219,
								"name": "AdminPriceListResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12220
					]
				},
				{
					"title": "Methods",
					"children": [
						12223,
						12227,
						12232,
						12236,
						12240,
						12244,
						12249,
						12254,
						12259,
						12264,
						12269
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12865,
			"name": "AdminProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nProducts can be categoriezed into categories. A product can be added into more than one category.\n\nRelated Guide: [How to manage product categories](https://docs.medusajs.com/modules/products/admin/manage-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 12869,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12870,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId, {\n  expand: \"category_children\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12871,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12872,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/get-product-category.d.ts",
											"qualifiedName": "AdminGetProductCategoryParams"
										},
										"name": "AdminGetProductCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12873,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12874,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12875,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.create({\n  name: \"Skinny Jeans\",\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12876,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product category's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/create-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesReq"
										},
										"name": "AdminPostProductCategoriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12877,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12878,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12879,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Updates a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.update(productCategoryId, {\n  name: \"Skinny Jeans\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12880,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12881,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/update-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryReq"
										},
										"name": "AdminPostProductCategoriesCategoryReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12882,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12883,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12884,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product category:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12885,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/list-product-categories.d.ts",
											"qualifiedName": "AdminGetProductCategoriesParams"
										},
										"name": "AdminGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12886,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesListRes"
										},
										"name": "AdminProductCategoriesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12887,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12888,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product category. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.delete(productCategoryId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12889,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12890,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12891,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12892,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.removeProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12893,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12894,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminDeleteProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12895,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12896,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12897,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.addProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12898,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12899,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/add-products-batch.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminPostProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12900,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12866,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12867,
							"name": "new AdminProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12868,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12865,
								"name": "AdminProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12866
					]
				},
				{
					"title": "Methods",
					"children": [
						12869,
						12874,
						12878,
						12883,
						12887,
						12891,
						12896
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12274,
			"name": "AdminProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nProduct tags are string values created when you create or update a product with a new tag.\nProducts can have more than one tag, and products can share tags. This allows admins to associate products to similar tags that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 12278,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12279,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12280,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/list-product-tags.d.ts",
											"qualifiedName": "AdminGetProductTagsParams"
										},
										"name": "AdminGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/index.d.ts",
											"qualifiedName": "AdminProductTagsListRes"
										},
										"name": "AdminProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12275,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12276,
							"name": "new AdminProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12277,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12274,
								"name": "AdminProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12275
					]
				},
				{
					"title": "Methods",
					"children": [
						12278
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12281,
			"name": "AdminProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nProduct types are string values created when you create or update a product with a new type.\nProducts can have one type, and products can share types. This allows admins to associate products with a type that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 12285,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12286,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12287,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/list-product-types.d.ts",
											"qualifiedName": "AdminGetProductTypesParams"
										},
										"name": "AdminGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12288,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/index.d.ts",
											"qualifiedName": "AdminProductTypesListRes"
										},
										"name": "AdminProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12282,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12283,
							"name": "new AdminProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12284,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12281,
								"name": "AdminProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12282
					]
				},
				{
					"title": "Methods",
					"children": [
						12285
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12289,
			"name": "AdminProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-gift-card-product) in a store.\n\nRelated Guide: [How to manage products](https://docs.medusajs.com/modules/products/admin/manage-products)."
					}
				]
			},
			"children": [
				{
					"id": 12293,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12294,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a new Product. This API Route can also be used to create a gift card if the "
									},
									{
										"kind": "code",
										"text": "`is_giftcard`"
									},
									{
										"kind": "text",
										"text": " field is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.create({\n  title: \"Shirt\",\n  is_giftcard: false,\n  discountable: true\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12295,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-product.d.ts",
											"qualifiedName": "AdminPostProductsReq"
										},
										"name": "AdminPostProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12296,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12297,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12298,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12299,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12300,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12301,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12302,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.update(productId, {\n  title: \"Shirt\",\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12303,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12304,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-product.d.ts",
											"qualifiedName": "AdminPostProductsProductReq"
										},
										"name": "AdminPostProductsProductReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12305,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12306,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12307,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product and its associated product variants and options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.delete(productId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12308,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12309,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteRes"
										},
										"name": "AdminProductsDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12310,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12311,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12312,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-products.d.ts",
											"qualifiedName": "AdminGetProductsParams"
										},
										"name": "AdminGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12313,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListRes"
										},
										"name": "AdminProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12317,
					"name": "listTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12318,
							"name": "listTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Product Tags with how many times each is used in products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listTags()\n.then(({ tags }) => {\n  console.log(tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12319,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListTagsRes"
										},
										"name": "AdminProductsListTagsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12320,
					"name": "setMetadata",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12321,
							"name": "setMetadata",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the metadata of a product. It can be any key-value pair, which allows adding custom data to a product. Learn about how you can update and delete the metadata attribute\n[here](https://docs.medusajs.com/development/entities/overview#metadata-attribute)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.setMetadata(productId, {\n  key: \"test\",\n  value: \"true\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12322,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12323,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The metadata details to add, update, or delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/set-metadata.d.ts",
											"qualifiedName": "AdminPostProductsProductMetadataReq"
										},
										"name": "AdminPostProductsProductMetadataReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12324,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12325,
					"name": "createVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12326,
							"name": "createVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product variant associated with a product. Each product variant must have a unique combination of product option values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.createVariant(productId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12327,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12328,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsReq"
										},
										"name": "AdminPostProductsProductVariantsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12329,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12330,
					"name": "updateVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12331,
							"name": "updateVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateVariant(productId, variantId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12332,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12333,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12334,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsVariantReq"
										},
										"name": "AdminPostProductsProductVariantsVariantReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12335,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12336,
					"name": "deleteVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12337,
							"name": "deleteVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.deleteVariant(productId, variantId)\n.then(({ variant_id, object, deleted, product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12338,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12339,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12340,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteVariantRes"
										},
										"name": "AdminProductsDeleteVariantRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12341,
					"name": "listVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12342,
							"name": "listVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the product variants associated with a product. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`manage_inventory`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listVariants(productId, {\n  limit: 10,\n})\n.then(({ variants, limit, offset, count }) => {\n console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12343,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variants belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12344,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants. If undefined, the first 100 records are retrieved."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-variants.d.ts",
											"qualifiedName": "AdminGetProductsVariantsParams"
										},
										"name": "AdminGetProductsVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12345,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListVariantsRes"
										},
										"name": "AdminProductsListVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12346,
					"name": "addOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12347,
							"name": "addOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a product option to a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.addOption(productId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12348,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12349,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The option to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/add-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsReq"
										},
										"name": "AdminPostProductsProductOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12350,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12351,
					"name": "updateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12352,
							"name": "updateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateOption(productId, optionId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12353,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12354,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12355,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsOption"
										},
										"name": "AdminPostProductsProductOptionsOption",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12356,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12357,
					"name": "deleteOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12358,
							"name": "deleteOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product option. If there are product variants that use this product option, they must be deleted before deleting the product option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12359,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12360,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12361,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteOptionRes"
										},
										"name": "AdminProductsDeleteOptionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12290,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12291,
							"name": "new AdminProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12292,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12289,
								"name": "AdminProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12290
					]
				},
				{
					"title": "Methods",
					"children": [
						12293,
						12297,
						12301,
						12306,
						12310,
						12317,
						12320,
						12325,
						12330,
						12336,
						12341,
						12346,
						12351,
						12357
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12362,
			"name": "AdminPublishableApiKeyResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.publishableApiKeys`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nPublishable API Keys can be used to scope Store API calls with an API key, determining what resources are retrieved when querying the API.\nFor example, a publishable API key can be associated with one or more sales channels. When it is passed in the header of a request to the List Product store API Route,\nthe sales channels are inferred from the key and only products associated with those sales channels are retrieved.\nAdmins can manage publishable API keys and their associated resources. Currently, only Sales Channels are supported as a resource.\n\nRelated Guide: [How to manage publishable API keys](https://docs.medusajs.com/development/publishable-api-keys/admin/manage-publishable-api-keys)."
					}
				]
			},
			"children": [
				{
					"id": 12366,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12367,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishable API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.retrieve(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12368,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12369,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12370,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12371,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of publishable API keys. The publishable API keys can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The publishable API keys can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of publishable API keys with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list publishable API keys:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list()\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list({\n  limit,\n  offset\n})\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12372,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved publishable API keys."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-keys.d.ts",
											"qualifiedName": "GetPublishableApiKeysParams"
										},
										"name": "GetPublishableApiKeysParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12373,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListRes"
										},
										"name": "AdminPublishableApiKeysListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12374,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12375,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.create({\n title\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12376,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The publishable API key to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/create-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysReq"
										},
										"name": "AdminPostPublishableApiKeysReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12377,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12378,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12379,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.update(publishableApiKeyId, {\n  title: \"new title\"\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12380,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12381,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/update-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysPublishableApiKeyReq"
										},
										"name": "AdminPostPublishableApiKeysPublishableApiKeyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12382,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12383,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12384,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a publishable API key. Associated resources, such as sales channels, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.delete(publishableApiKeyId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12385,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12386,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12387,
					"name": "revoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12388,
							"name": "revoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Revoke a publishable API key. Revoking the publishable API Key can't be undone, and the key can't be used in future requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.revoke(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12389,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12390,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12391,
					"name": "addSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12392,
							"name": "addSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of sales channels to a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.addSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12393,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12394,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/add-channels-batch.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminPostPublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12395,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12396,
					"name": "deleteSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12397,
							"name": "deleteSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of sales channels from a publishable API key. This doesn't delete the sales channels and only removes the association between them and the publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.deleteSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12398,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12399,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to delete from the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/delete-channels-batch.d.ts",
											"qualifiedName": "AdminDeletePublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminDeletePublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12400,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12401,
					"name": "listSalesChannels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12402,
							"name": "listSalesChannels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the sales channels associated with a publishable API key. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.listSalesChannels()\n.then(({ sales_channels }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12403,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12404,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-key-sales-channels.d.ts",
											"qualifiedName": "GetPublishableApiKeySalesChannelsParams"
										},
										"name": "GetPublishableApiKeySalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListSalesChannelsRes"
										},
										"name": "AdminPublishableApiKeysListSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12363,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12364,
							"name": "new AdminPublishableApiKeyResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12365,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12362,
								"name": "AdminPublishableApiKeyResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12363
					]
				},
				{
					"title": "Methods",
					"children": [
						12366,
						12370,
						12374,
						12378,
						12383,
						12387,
						12391,
						12396,
						12401
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12406,
			"name": "AdminRegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nAdmins can manage these regions, their providers, and more.\n\nRelated Guide: [How to manage regions](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-regions)."
					}
				]
			},
			"children": [
				{
					"id": 12410,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12411,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.create({\n  name: \"Europe\",\n  currency_code: \"eur\",\n  tax_rate: 0,\n  payment_providers: [\n    \"manual\"\n  ],\n  fulfillment_providers: [\n    \"manual\"\n  ],\n  countries: [\n    \"DK\"\n  ]\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12412,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/create-region.d.ts",
											"qualifiedName": "AdminPostRegionsReq"
										},
										"name": "AdminPostRegionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12413,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12414,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12415,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.update(regionId, {\n  name: \"Europe\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12416,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12417,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the region."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/update-region.d.ts",
											"qualifiedName": "AdminPostRegionsRegionReq"
										},
										"name": "AdminPostRegionsRegionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12418,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12419,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12420,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a region. Associated resources, such as providers or currencies are not deleted. Associated tax rates are deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.delete(regionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12421,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12422,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12423,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12424,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12425,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12426,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12427,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12428,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Regions. The regions can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The regions can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list regions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list()\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list({\n  limit,\n  offset\n})\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12429,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved regions."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/list-regions.d.ts",
											"qualifiedName": "AdminGetRegionsParams"
										},
										"name": "AdminGetRegionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12430,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsListRes"
										},
										"name": "AdminRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12431,
					"name": "addCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12432,
							"name": "addCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a country to the list of countries in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addCountry(regionId, {\n  country_code: \"dk\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12433,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12434,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The country to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-country.d.ts",
											"qualifiedName": "AdminPostRegionsRegionCountriesReq"
										},
										"name": "AdminPostRegionsRegionCountriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12435,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12436,
					"name": "deleteCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12437,
							"name": "deleteCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a country from the list of countries in a region. The country will still be available in the system, and it can be used in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteCountry(regionId, \"dk\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12438,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12439,
									"name": "country_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the country to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12440,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12441,
					"name": "addFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12442,
							"name": "addFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a fulfillment provider to the list of fulfullment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addFulfillmentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12443,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12444,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-fulfillment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionFulfillmentProvidersReq"
										},
										"name": "AdminPostRegionsRegionFulfillmentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12445,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12446,
					"name": "deleteFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12447,
							"name": "deleteFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a fulfillment provider from a region. The fulfillment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteFulfillmentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12448,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12449,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the fulfillment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12450,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12451,
					"name": "retrieveFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12452,
							"name": "retrieveFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of fulfillment options available in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of fulfillment options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieveFulfillmentOptions(regionId)\n.then(({ fulfillment_options }) => {\n  console.log(fulfillment_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12453,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12454,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminGetRegionsRegionFulfillmentOptionsRes"
										},
										"name": "AdminGetRegionsRegionFulfillmentOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12455,
					"name": "addPaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12456,
							"name": "addPaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a payment provider to the list of payment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addPaymentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12457,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12458,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-payment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionPaymentProvidersReq"
										},
										"name": "AdminPostRegionsRegionPaymentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12459,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12460,
					"name": "deletePaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12461,
							"name": "deletePaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment provider from a region. The payment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deletePaymentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12462,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12463,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12464,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12407,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12408,
							"name": "new AdminRegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12409,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12406,
								"name": "AdminRegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12407
					]
				},
				{
					"title": "Methods",
					"children": [
						12410,
						12414,
						12419,
						12423,
						12427,
						12431,
						12436,
						12441,
						12446,
						12451,
						12455,
						12460
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12465,
			"name": "AdminReservationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.reservations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReservations, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), are quantities of an item that are reserved, typically when an order is placed but not yet fulfilled.\nReservations can be associated with any resources, but commonly with line items of an order.\n\nRelated Guide: [How to manage item allocations in orders](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-item-allocations-in-orders)."
					}
				]
			},
			"children": [
				{
					"id": 12469,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12470,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.retrieve(reservationId)\n.then(({ reservation }) => {\n  console.log(reservation.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12471,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12472,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12473,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12474,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of reservations. The reservations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The reservations can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of reservations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list()\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\"\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\",\n  limit,\n  offset\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12475,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination parameters to apply on the retrieved reservations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/list-reservations.d.ts",
											"qualifiedName": "AdminGetReservationsParams"
										},
										"name": "AdminGetReservationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12476,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsListRes"
										},
										"name": "AdminReservationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12477,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12478,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reservation which can be associated with any resource, such as an order's line item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.create({\n  line_item_id: \"item_123\",\n  location_id: \"loc_123\",\n  inventory_item_id: \"iitem_123\",\n  quantity: 1\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12479,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/create-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReq"
										},
										"name": "AdminPostReservationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12480,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12481,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12482,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.update(reservationId, {\n  quantity: 3\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12483,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12484,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the reservation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/update-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReservationReq"
										},
										"name": "AdminPostReservationsReservationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12485,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12486,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12487,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a reservation. Associated resources, such as the line item, will not be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.delete(reservationId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12488,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12489,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12466,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12467,
							"name": "new AdminReservationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12468,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12465,
								"name": "AdminReservationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12466
					]
				},
				{
					"title": "Methods",
					"children": [
						12469,
						12473,
						12477,
						12481,
						12486
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12490,
			"name": "AdminReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created.\nAdmins can manage available return reasons, and they can be used by both admins and customers when creating a return.\n\nRelated Guide: [How to manage return reasons](https://docs.medusajs.com/modules/orders/admin/manage-returns#manage-return-reasons)."
					}
				]
			},
			"children": [
				{
					"id": 12494,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12495,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.create({\n  label: \"Damaged\",\n  value: \"damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12496,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/create-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReq"
										},
										"name": "AdminPostReturnReasonsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12497,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12498,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12499,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.update(returnReasonId, {\n  label: \"Damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12500,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12501,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the return reason."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/update-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReasonReq"
										},
										"name": "AdminPostReturnReasonsReasonReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12502,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12503,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12504,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.delete(returnReasonId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12505,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12506,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12507,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12508,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.retrieve(returnReasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12509,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12510,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12511,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12512,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of return reasons."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12513,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsListRes"
										},
										"name": "AdminReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12491,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12492,
							"name": "new AdminReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12493,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12490,
								"name": "AdminReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12491
					]
				},
				{
					"title": "Methods",
					"children": [
						12494,
						12498,
						12503,
						12507,
						12511
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12514,
			"name": "AdminReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA return can be created by a customer or an admin to return items in an order.\nAdmins can manage these returns and change their state.\n\nRelated Guide: [How to manage returns](https://docs.medusajs.com/modules/orders/admin/manage-returns)."
					}
				]
			},
			"children": [
				{
					"id": 12518,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12519,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a return as canceled. The return can be associated with an order, claim, or swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order associated with the return. If the return is associated with a claim or a swap, then it'll be the order\nthat the claim or swap belongs to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.cancel(returnId)\n.then(({ order }) => {\n  console.log(order.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12520,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12521,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsCancelRes"
										},
										"name": "AdminReturnsCancelRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12522,
					"name": "receive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12523,
							"name": "receive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a return as received. This also updates the status of associated order, claim, or swap accordingly."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.receive(returnId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12524,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12525,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The received return."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/receive-return.d.ts",
											"qualifiedName": "AdminPostReturnsReturnReceiveReq"
										},
										"name": "AdminPostReturnsReturnReceiveReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12526,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsRes"
										},
										"name": "AdminReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12527,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12528,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Returns. The returns can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of returns with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list returns:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list()\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list({\n  limit,\n  offset\n})\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12529,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Paignation configurations to be applied on the retrieved returns."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/list-returns.d.ts",
											"qualifiedName": "AdminGetReturnsParams"
										},
										"name": "AdminGetReturnsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12530,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsListRes"
										},
										"name": "AdminReturnsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12515,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12516,
							"name": "new AdminReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12517,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12514,
								"name": "AdminReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12515
					]
				},
				{
					"title": "Methods",
					"children": [
						12518,
						12522,
						12527
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12531,
			"name": "AdminSalesChannelsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.salesChannels`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA sales channel indicates a channel where products can be sold in. For example, a webshop or a mobile app.\nAdmins can manage sales channels and the products available in them.\n\nRelated Guide: [How to manage sales channels](https://docs.medusajs.com/modules/sales-channels/admin/manage)."
					}
				]
			},
			"children": [
				{
					"id": 12535,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12536,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.retrieve(salesChannelId)\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12537,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12538,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12539,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12540,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.create({\n  name: \"App\",\n  description: \"Mobile app\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12541,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/create-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsReq"
										},
										"name": "AdminPostSalesChannelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12542,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12543,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12544,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.update(salesChannelId, {\n  name: \"App\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12545,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12546,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/update-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsSalesChannelReq"
										},
										"name": "AdminPostSalesChannelsSalesChannelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12547,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12548,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12549,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of sales channels. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The sales channels can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list()\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\"\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\",\n  limit,\n  offset\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12550,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/list-sales-channels.d.ts",
											"qualifiedName": "AdminGetSalesChannelsParams"
										},
										"name": "AdminGetSalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12551,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsListRes"
										},
										"name": "AdminSalesChannelsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12552,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12553,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a sales channel. Associated products, stock locations, and other resources are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.delete(salesChannelId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12554,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12555,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12556,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12557,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a sales channel. This doesn't delete the product. It only removes the association between the product and the sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12558,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12559,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminDeleteSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12560,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12561,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12562,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12563,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12564,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/add-product-batch.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminPostSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12565,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12566,
					"name": "addLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12567,
							"name": "addLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Associate a stock location with a sales channel. It requires the \n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module to be installed in\nyour Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addLocation(salesChannelId, {\n  location_id: \"loc_123\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12568,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12569,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to associate with the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/associate-stock-location.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminPostSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12570,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12571,
					"name": "removeLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12572,
							"name": "removeLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a stock location from a sales channel. This only removes the association between the stock location and the sales channel. It does not delete the stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeLocation(salesChannelId, {\n  location_id: \"loc_id\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12573,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12574,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/remove-stock-location.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminDeleteSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12575,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12532,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12533,
							"name": "new AdminSalesChannelsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12534,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12531,
								"name": "AdminSalesChannelsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12532
					]
				},
				{
					"title": "Methods",
					"children": [
						12535,
						12539,
						12543,
						12548,
						12552,
						12556,
						12561,
						12566,
						12571
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12576,
			"name": "AdminShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\nAdmins can create an unlimited number of shipping options, each associated with a shipping profile and fulfillment provider, among other resources.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 12580,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12581,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.create({\n  name: \"PostFake\",\n  region_id,\n  provider_id,\n  data: {\n  },\n  price_type: \"flat_rate\"\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12582,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/create-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsReq"
										},
										"name": "AdminPostShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12583,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12584,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12585,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.update(optionId, {\n  name: \"PostFake\",\n  requirements: [\n    {\n      id,\n      type: \"max_subtotal\",\n      amount: 1000\n    }\n  ]\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12586,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12587,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/update-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsOptionReq"
										},
										"name": "AdminPostShippingOptionsOptionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12588,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12589,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12590,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping option. Once deleted, it can't be used when creating orders or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.delete(optionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12591,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12592,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12593,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12594,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.retrieve(optionId)\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12595,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12596,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12597,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12598,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_return`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.list()\n.then(({ shipping_options, count }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12599,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/list-shipping-options.d.ts",
											"qualifiedName": "AdminGetShippingOptionsParams"
										},
										"name": "AdminGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12600,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsListRes"
										},
										"name": "AdminShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12577,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12578,
							"name": "new AdminShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12579,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12576,
								"name": "AdminShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12577
					]
				},
				{
					"title": "Methods",
					"children": [
						12580,
						12584,
						12589,
						12593,
						12597
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12601,
			"name": "AdminShippingProfilesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingProfiles`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping profile is used to group products that can be shipped in the same manner.\nThey are created by the admin and they're not associated with a fulfillment provider.\n\nRelated Guide: [Shipping Profile architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-profile)."
					}
				]
			},
			"children": [
				{
					"id": 12605,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12606,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping profile."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { ShippingProfileType } from \"@medusajs/medusa\"\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.create({\n  name: \"Large Products\",\n  type: ShippingProfileType.DEFAULT\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12607,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/create-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesReq"
										},
										"name": "AdminPostShippingProfilesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12608,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12609,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12610,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.update(shippingProfileId, {\n  name: 'Large Products'\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12611,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12612,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping profile."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/update-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesProfileReq"
										},
										"name": "AdminPostShippingProfilesProfileReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12613,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12614,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12615,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping profile. Associated shipping options are deleted as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.delete(profileId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12616,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12617,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12618,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12619,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.retrieve(profileId)\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12620,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12621,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12622,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12623,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping profiles."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping profiles."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.list()\n.then(({ shipping_profiles }) => {\n  console.log(shipping_profiles.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12624,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesListRes"
										},
										"name": "AdminShippingProfilesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12602,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12603,
							"name": "new AdminShippingProfilesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12604,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12601,
								"name": "AdminShippingProfilesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12602
					]
				},
				{
					"title": "Methods",
					"children": [
						12605,
						12609,
						12614,
						12618,
						12622
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12625,
			"name": "AdminStockLocationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations). To use these API Routes, make sure to install the\n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.stockLocations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA stock location, provided by the [Stock Location module](https://docs.medusajs.com/modules/multiwarehouse/stock-location-module), indicates a physical address that stock-kept items, such as physical products, can be stored in.\nAn admin can create and manage available stock locations.\n\nRelated Guide: [How to manage stock locations](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-stock-locations)."
					}
				]
			},
			"children": [
				{
					"id": 12629,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12630,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.create({\n  name: \"Main Warehouse\",\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12631,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/create-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsReq"
										},
										"name": "AdminPostStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12632,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12633,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12634,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.retrieve(stockLocationId)\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12635,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12636,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12637,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12638,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.update(stockLocationId, {\n  name: 'Main Warehouse'\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12639,
									"name": "stockLocationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12640,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to be updated in the stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/update-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsLocationReq"
										},
										"name": "AdminPostStockLocationsLocationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12641,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12642,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12643,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.delete(stockLocationId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12644,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12645,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/common/common.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12646,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12647,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of stock locations. The stock locations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe stock locations can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of stock locations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list()\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\"\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\",\n  limit,\n  offset\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12648,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/list-stock-locations.d.ts",
											"qualifiedName": "AdminGetStockLocationsParams"
										},
										"name": "AdminGetStockLocationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12649,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsListRes"
										},
										"name": "AdminStockLocationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12626,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12627,
							"name": "new AdminStockLocationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12628,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12625,
								"name": "AdminStockLocationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12626
					]
				},
				{
					"title": "Methods",
					"children": [
						12629,
						12633,
						12637,
						12642,
						12646
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12650,
			"name": "AdminStoresResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.store`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA store indicates the general configurations and details about the commerce store. By default, there's only one store in the Medusa backend.\nAdmins can manage the store and its details or configurations."
					}
				]
			},
			"children": [
				{
					"id": 12654,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12655,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.update({\n  name: \"Medusa Store\"\n})\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12656,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/update-store.d.ts",
											"qualifiedName": "AdminPostStoreReq"
										},
										"name": "AdminPostStoreReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12657,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12658,
					"name": "addCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12659,
							"name": "addCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a currency code to the available currencies in a store. This doesn't create new currencies, as currencies are defined within the Medusa backend. \nTo create a currency, you can [create a migration](https://docs.medusajs.com/development/entities/migrations/create) that inserts the currency into the database."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.addCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12660,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to add to the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12661,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12662,
					"name": "deleteCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12663,
							"name": "deleteCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a currency code from the available currencies in a store. This doesn't completely delete the currency and it can be added again later to the store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.deleteCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12664,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to delete from the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12665,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12666,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12667,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.retrieve()\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12668,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminExtendedStoresRes"
										},
										"name": "AdminExtendedStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12669,
					"name": "listPaymentProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12670,
							"name": "listPaymentProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available payment providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of payment providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listPaymentProviders()\n.then(({ payment_providers }) => {\n  console.log(payment_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12671,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminPaymentProvidersList"
										},
										"name": "AdminPaymentProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12672,
					"name": "listTaxProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12673,
							"name": "listTaxProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available tax providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listTaxProviders()\n.then(({ tax_providers }) => {\n  console.log(tax_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12674,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminTaxProvidersList"
										},
										"name": "AdminTaxProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12651,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12652,
							"name": "new AdminStoresResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12653,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12650,
								"name": "AdminStoresResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12651
					]
				},
				{
					"title": "Methods",
					"children": [
						12654,
						12658,
						12662,
						12666,
						12669,
						12672
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12675,
			"name": "AdminSwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to manage swaps](https://docs.medusajs.com/modules/orders/admin/manage-swaps)"
					}
				]
			},
			"children": [
				{
					"id": 12679,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12680,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a swap's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.retrieve(swapId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12681,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12682,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsRes"
										},
										"name": "AdminSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12683,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12684,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of swaps. The swaps can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of swaps with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list swaps:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list()\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list({\n  limit,\n  offset\n})\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12685,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pagination configurations to apply on the retrieved swaps."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/list-swaps.d.ts",
											"qualifiedName": "AdminGetSwapsParams"
										},
										"name": "AdminGetSwapsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12686,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsListRes"
										},
										"name": "AdminSwapsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12676,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12677,
							"name": "new AdminSwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12678,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12675,
								"name": "AdminSwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12676
					]
				},
				{
					"title": "Methods",
					"children": [
						12679,
						12683
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12687,
			"name": "AdminTaxRatesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.taxRates`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nEach region has at least a default tax rate. Admins can create and manage additional tax rates that can be applied for certain conditions, such as for specific product types.\n\nRelated Guide: [How to manage tax rates](https://docs.medusajs.com/modules/taxes/admin/manage-tax-rates)."
					}
				]
			},
			"children": [
				{
					"id": 12691,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12692,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a tax rate by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId)\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId, {\n  expand: \"shipping_options\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12693,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12694,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12695,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12696,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12697,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of tax rates. The tax rates can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`rate`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The tax rates can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax rates with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list()\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"]\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"],\n  limit,\n  offset\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12698,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/list-tax-rates.d.ts",
											"qualifiedName": "AdminGetTaxRatesParams"
										},
										"name": "AdminGetTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12699,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesListRes"
										},
										"name": "AdminTaxRatesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12700,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12701,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.create({\n  code: \"TEST\",\n  name: \"New Tax Rate\",\n  region_id\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12702,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesReq"
										},
										"name": "AdminPostTaxRatesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12703,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesParams"
										},
										"name": "AdminPostTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12704,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12705,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12706,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.update(taxRateId, {\n  name: \"New Tax Rate\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12707,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12708,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateReq"
										},
										"name": "AdminPostTaxRatesTaxRateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12709,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateParams"
										},
										"name": "AdminPostTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12710,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12711,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12712,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12713,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12714,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12715,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsParams"
										},
										"name": "AdminPostTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12716,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12717,
					"name": "addProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12718,
							"name": "addProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add product types to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12719,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12720,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-product-types.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12721,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12722,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12723,
					"name": "addShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12724,
							"name": "addShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add shipping options to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12725,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12726,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12727,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12728,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12729,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12730,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove products from a tax rate. This only removes the association between the products and the tax rate. It does not delete the products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12731,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12732,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12733,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12734,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12735,
					"name": "removeProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12736,
							"name": "removeProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove product types from a tax rate. This only removes the association between the product types and the tax rate. It does not delete the product types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12737,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12738,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12739,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12740,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12741,
					"name": "removeShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12742,
							"name": "removeShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove shipping options from a tax rate. This only removes the association between the shipping options and the tax rate. It does not delete the shipping options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12743,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12744,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12745,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12746,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12747,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12748,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a tax rate. Resources associated with the tax rate, such as products or product types, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.delete(taxRateId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12749,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12750,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12688,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12689,
							"name": "new AdminTaxRatesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12690,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12687,
								"name": "AdminTaxRatesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12688
					]
				},
				{
					"title": "Methods",
					"children": [
						12691,
						12696,
						12700,
						12705,
						12711,
						12717,
						12723,
						12729,
						12735,
						12741,
						12747
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12751,
			"name": "AdminUploadsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.uploads`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nThe methods in this class are used to upload any type of resources. For example, they can be used to upload CSV files that are used to import products into the store.\n\nRelated Guide: [How to upload CSV file when importing a product](https://docs.medusajs.com/modules/products/admin/import-products#1-upload-csv-file)."
					}
				]
			},
			"children": [
				{
					"id": 12758,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12759,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file or multiple files to a public bucket or storage. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.create(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12760,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file(s) to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12761,
					"name": "createProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12762,
							"name": "createProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file to an ACL or a non-public bucket. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.createProtected(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12763,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12764,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12765,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an uploaded file from storage. The file is deleted using the installed file service on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.delete({\n  file_key\n})\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12766,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/delete-upload.d.ts",
											"qualifiedName": "AdminDeleteUploadsReq"
										},
										"name": "AdminDeleteUploadsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12767,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12768,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12769,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create and retrieve a presigned or public download URL for a file. The URL creation is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the download URL details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.getPresignedDownloadUrl({\n  file_key\n})\n.then(({ download_url }) => {\n  console.log(download_url);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12770,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to get a presigned download URL for."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/get-download-url.d.ts",
											"qualifiedName": "AdminPostUploadsDownloadUrlReq"
										},
										"name": "AdminPostUploadsDownloadUrlReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12771,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsDownloadUrlRes"
										},
										"name": "AdminUploadsDownloadUrlRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12772,
					"name": "_createPayload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 12773,
							"name": "_createPayload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 12774,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "FormData"
								},
								"name": "FormData",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 12752,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12753,
							"name": "new AdminUploadsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12754,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12751,
								"name": "AdminUploadsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12752
					]
				},
				{
					"title": "Methods",
					"children": [
						12758,
						12761,
						12764,
						12768,
						12772
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12775,
			"name": "AdminUsersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.users`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nA store can have more than one user, each having the same privileges. Admins can manage users, their passwords, and more.\n\nRelated Guide: [How to manage users](https://docs.medusajs.com/modules/users/admin/manage-users)."
					}
				]
			},
			"children": [
				{
					"id": 12779,
					"name": "sendResetPasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12780,
							"name": "sendResetPasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a password token for an admin user with a given email. This also triggers the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event. So, if you have a Notification Service installed\nthat can handle this event, a notification, such as an email, will be sent to the user. The token is triggered as part of the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event's payload.\nThat token must be used later to reset the password using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 12783,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the token is generated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.sendResetPasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12781,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password-token.d.ts",
											"qualifiedName": "AdminResetPasswordTokenRequest"
										},
										"name": "AdminResetPasswordTokenRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12782,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12783,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12784,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset the password of an admin user using their reset password token. You must generate a reset password token first for the user using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "sendResetPasswordToken",
										"target": 12779,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method,\nthen use that token to reset the password in this method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.resetPassword({\n  token: \"supersecrettoken\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12785,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password.d.ts",
											"qualifiedName": "AdminResetPasswordRequest"
										},
										"name": "AdminResetPasswordRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12786,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12787,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12788,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.retrieve(userId)\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12789,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12790,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12791,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12792,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an admin user. The user has the same privileges as all admin users, and will be able to authenticate and perform admin functionalities right after creation."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.create({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12793,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUserPayload"
										},
										"name": "AdminCreateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 12794,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12795,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12796,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.update(userId, {\n  first_name: \"Marcellus\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12797,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12798,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminUpdateUserPayload"
										},
										"name": "AdminUpdateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 12799,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12800,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12801,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a user. Once deleted, the user will not be able to authenticate or perform admin functionalities."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.delete(userId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12802,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12803,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12804,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12805,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve all admin users."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of users."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list users:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list()\n.then(({ users }) => {\n  console.log(users.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " users are returned. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list({\n  limit,\n  offset\n})\n.then(({ users, limit, offset, count }) => {\n  console.log(users.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12806,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/list-users.d.ts",
											"qualifiedName": "AdminGetUsersParams"
										},
										"name": "AdminGetUsersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12807,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUsersListRes"
										},
										"name": "AdminUsersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12776,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12777,
							"name": "new AdminUsersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12778,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12775,
								"name": "AdminUsersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12776
					]
				},
				{
					"title": "Methods",
					"children": [
						12779,
						12783,
						12787,
						12791,
						12795,
						12800,
						12804
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12808,
			"name": "AdminVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 11618
					},
					{
						"kind": "text",
						"text": ".\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\nProduct variants can be managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 12289
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage product variants](https://docs.medusajs.com/modules/products/admin/manage-products#manage-product-variants)."
					}
				]
			},
			"children": [
				{
					"id": 12812,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12813,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product variants. The product variant can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variant can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list()\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\"\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\",\n  limit,\n  offset\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12814,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/list-variants.d.ts",
											"qualifiedName": "AdminGetVariantsParams"
										},
										"name": "AdminGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12815,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsListRes"
										},
										"name": "AdminVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12816,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12817,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product variant by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId, {\n  expand: \"options\"\n})\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12818,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12819,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-variant.d.ts",
											"qualifiedName": "AdminGetVariantParams"
										},
										"name": "AdminGetVariantParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12820,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsRes"
										},
										"name": "AdminVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12821,
					"name": "getInventory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12822,
							"name": "getInventory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the available inventory of a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the inventory details of the product variant."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.getInventory(variantId)\n.then(({ variant }) => {\n  console.log(variant.inventory, variant.sales_channel_availability)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12823,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12824,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-inventory.d.ts",
											"qualifiedName": "AdminGetVariantsVariantInventoryRes"
										},
										"name": "AdminGetVariantsVariantInventoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12809,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12810,
							"name": "new AdminVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12811,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12808,
								"name": "AdminVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12809
					]
				},
				{
					"title": "Methods",
					"children": [
						12812,
						12816,
						12821
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11198,
			"name": "AuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Auth API Routes](https://docs.medusajs.com/api/store#auth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allows you to manage a customer's session, such as login or log out.\nYou can send authenticated requests for a customer either using the Cookie header or using the JWT Token.\nWhen you log the customer in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "authenticate",
						"target": 11202,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 11202,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11203,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate a customer using their email and password. If the customer is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.authenticate({\n  email: \"user@example.com\",\n  password: \"user@example.com\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11204,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11205,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11206,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11207,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the customer and remove their authentication session. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 11202,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when customer is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.deleteSession()\n.then(() => {\n  // customer logged out successfully\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11208,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11209,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11210,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of the logged-in customer. Can also be used to check if there is an authenticated customer.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 11202,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.auth.getSession()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11211,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11212,
					"name": "exists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11213,
							"name": "exists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Check if the email is already used by another registered customer. Can be used to validate a new customer's email."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the result of the check."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.exists(\"user@example.com\")\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11214,
									"name": "email",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The email to check."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11215,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreGetAuthEmailRes"
										},
										"name": "StoreGetAuthEmailRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11216,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11217,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the customer and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the customer, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11218,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11219,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreBearerAuthRes"
										},
										"name": "StoreBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11199,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11200,
							"name": "new AuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11201,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11198,
								"name": "AuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11199
					]
				},
				{
					"title": "Methods",
					"children": [
						11202,
						11206,
						11209,
						11212,
						11216
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11220,
			"name": "CartsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA cart is a virtual shopping bag that customers can use to add items they want to purchase.\nA cart is then used to checkout and place an order.\n\nRelated Guide: [How to implement cart functionality in your storefront](https://docs.medusajs.com/modules/carts-and-checkout/storefront/implement-cart)."
					}
				]
			},
			"children": [
				{
					"id": 11221,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11222,
							"name": "new CartsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11223,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11220,
								"name": "CartsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11224,
					"name": "lineItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "LineItemsResource",
								"target": 11326,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to line-item-related routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11326,
						"name": "LineItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11225,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11226,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to the cart. The validation of the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " field is handled by the fulfillment provider of the chosen shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.addShippingMethod(cartId, {\n  option_id\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11227,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to add the shipping method to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11228,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/add-shipping-method.d.ts",
											"qualifiedName": "StorePostCartsCartShippingMethodReq"
										},
										"name": "StorePostCartsCartShippingMethodReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11229,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11230,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11231,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete a cart and place an order or create a swap, based on the cart's type. This includes attempting to authorize the cart's payment.\nIf authorizing the payment requires more action, the cart will not be completed and the order will not be placed or the swap will not be created.\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during cart completion or the request is interrupted for any reason, the cart completion can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the completion details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.complete(cartId)\n.then(({ data, type }) => {\n  console.log(data.id, type);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11232,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to complete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11233,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCompleteCartRes"
										},
										"name": "StoreCompleteCartRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11234,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11235,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Cart. Although optional, specifying the cart's region and sales channel can affect the cart's pricing and\nthe products that can be added to the cart respectively. So, make sure to set those early on and change them if necessary, such as when the customer changes their region.\nIf a customer is logged in, make sure to pass its ID or email within the cart's details so that the cart is attached to the customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.create()\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11236,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-cart.d.ts",
											"qualifiedName": "StorePostCartReq"
										},
										"name": "StorePostCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11237,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11238,
					"name": "createPaymentSessions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11239,
							"name": "createPaymentSessions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create Payment Sessions for each of the available Payment Providers in the Cart's Region. If there's only one payment session created,\nit will be selected by default. The creation of the payment session uses the payment provider and may require sending requests to third-party services."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.createPaymentSessions(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11240,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to create the payment sessions for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11241,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11242,
					"name": "deleteDiscount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11243,
							"name": "deleteDiscount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Discount from a Cart. This only removes the application of the discount, and not completely deletes it. The totals will be re-calculated and the payment sessions\nwill be refreshed after the removal."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deleteDiscount(cartId, code)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11244,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the cart to remove the discount from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11245,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount to remove from the cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11246,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11247,
					"name": "deletePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11248,
							"name": "deletePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Payment Session in a Cart. May be useful if a payment has failed. The totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deletePaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11249,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to delete the payment session from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11250,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11251,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11252,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11253,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session to ensure that it is in sync with the Cart. This is usually not necessary, but is provided for edge cases."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.refreshPaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11254,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to refresh its payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11255,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that's associated with the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11256,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11257,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11258,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Cart's details. This includes recalculating its totals."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.retrieve(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11259,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11260,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11261,
					"name": "setPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11262,
							"name": "setPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Select the Payment Session that will be used to complete the cart. This is typically used when the customer chooses their preferred payment method during checkout.\nThe totals of the cart will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.setPaymentSession(cartId, {\n  provider_id: \"manual\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11263,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11264,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The associated payment provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/set-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionReq"
										},
										"name": "StorePostCartsCartPaymentSessionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11265,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11266,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11267,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Cart's details. If the cart has payment sessions and the region was not changed, the payment sessions are updated. The cart's totals are also recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.update(cartId, {\n  email: \"user@example.com\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11268,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11269,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the cart."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-cart.d.ts",
											"qualifiedName": "StorePostCartsCartReq"
										},
										"name": "StorePostCartsCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11270,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11271,
					"name": "updatePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11272,
							"name": "updatePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Payment Session with additional data. This can be useful depending on the payment provider used.\nAll payment sessions are updated and cart totals are recalculated afterwards."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.updatePaymentSession(cartId, \"manual\", {\n  data: {\n\n  }\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11273,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11274,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the payment session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11275,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionUpdateReq"
										},
										"name": "StorePostCartsCartPaymentSessionUpdateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11276,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11221
					]
				},
				{
					"title": "Properties",
					"children": [
						11224
					]
				},
				{
					"title": "Methods",
					"children": [
						11225,
						11230,
						11234,
						11238,
						11242,
						11247,
						11252,
						11257,
						11261,
						11266,
						11271
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11277,
			"name": "CollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Collection API Routes](https://docs.medusajs.com/api/store#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\nUsing the methods in this class, you can list or retrieve a collection's details and products."
					}
				]
			},
			"children": [
				{
					"id": 11278,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11279,
							"name": "new CollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11280,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11277,
								"name": "CollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11281,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11282,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11283,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11284,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsRes"
										},
										"name": "StoreCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11285,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11286,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product collections can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11287,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/list-collections.d.ts",
											"qualifiedName": "StoreGetCollectionsParams"
										},
										"name": "StoreGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11288,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsListRes"
										},
										"name": "StoreCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11278
					]
				},
				{
					"title": "Methods",
					"children": [
						11281,
						11285
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11289,
			"name": "CustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA customer can register and manage their information such as addresses, orders, payment methods, and more.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 11290,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11291,
							"name": "new CustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11292,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11289,
								"name": "CustomerResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11293,
					"name": "paymentMethods",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "PaymentMethodsResource",
								"target": 11421,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to payment-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11421,
						"name": "PaymentMethodsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11294,
					"name": "addresses",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AddressesResource",
								"target": 11181,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to address-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11181,
						"name": "AddressesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11295,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11296,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a new customer. This will also automatically authenticate the customer and set their login session in the response Cookie header.\nSubsequent requests sent with the JS client are sent with the Cookie session automatically."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.create({\n  first_name: \"Alec\",\n  last_name: \"Reynolds\",\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11297,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the customer to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-customer.d.ts",
											"qualifiedName": "StorePostCustomersReq"
										},
										"name": "StorePostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11298,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11299,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11300,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 11202
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.retrieve()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11301,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11302,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11303,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 11202
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.update({\n  first_name: \"Laury\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11304,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the logged-in customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-customer.d.ts",
											"qualifiedName": "StorePostCustomersCustomerReq"
										},
										"name": "StorePostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11305,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11306,
					"name": "listOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11307,
							"name": "listOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of the logged-in customer's orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfillment_status`"
									},
									{
										"kind": "text",
										"text": ". The orders can also be paginated.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 11202
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.listOrders()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11308,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/list-orders.d.ts",
											"qualifiedName": "StoreGetCustomersCustomerOrdersParams"
										},
										"name": "StoreGetCustomersCustomerOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11309,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListOrdersRes"
										},
										"name": "StoreCustomersListOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11310,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11311,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset a customer's password using a password token created by a previous request using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "generatePasswordToken",
										"target": 11314,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. If the password token expired,\nyou must create a new one."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.resetPassword({\n  email: \"user@example.com\",\n  password: \"supersecret\",\n  token: \"supersecrettoken\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11312,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to reset the password."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password.d.ts",
											"qualifiedName": "StorePostCustomersResetPasswordReq"
										},
										"name": "StorePostCustomersResetPasswordReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11313,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11314,
					"name": "generatePasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11315,
							"name": "generatePasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reset password token to be used when sending a request with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 11310,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. This emits the event "
									},
									{
										"kind": "code",
										"text": "`customer.password_reset`"
									},
									{
										"kind": "text",
										"text": ". If a notification provider is\ninstalled in the Medusa backend and is configured to handle this event, a notification to the customer, such as an email, may be sent with reset instructions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when reset password token is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.generatePasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // failed\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11316,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to create the reset password token."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password-token.d.ts",
											"qualifiedName": "StorePostCustomersCustomerPasswordTokenReq"
										},
										"name": "StorePostCustomersCustomerPasswordTokenReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11317,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11290
					]
				},
				{
					"title": "Properties",
					"children": [
						11293,
						11294
					]
				},
				{
					"title": "Methods",
					"children": [
						11295,
						11299,
						11302,
						11306,
						11310,
						11314
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11318,
			"name": "GiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Gift Card API Routes](https://docs.medusajs.com/api/store#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nCustomers can use gift cards during checkout to deduct the gift card's balance from the checkout total.\nThe methods in this class allow retrieving a gift card's details by its code. A gift card can be applied to a cart using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 11220
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to use gift cards in a storefront](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 11319,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11320,
							"name": "new GiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11321,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11318,
								"name": "GiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11322,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11323,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Gift Card's details by its associated unique code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the gift card."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.giftCards.retrieve(code)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11324,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11325,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/gift-cards/index.d.ts",
											"qualifiedName": "StoreGiftCardsRes"
										},
										"name": "StoreGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11319
					]
				},
				{
					"title": "Methods",
					"children": [
						11322
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11326,
			"name": "LineItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Line Item API Routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts.lineItems`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 11327,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11328,
							"name": "new LineItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11329,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11326,
								"name": "LineItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11330,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11331,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a Line Item with a given Product Variant and adds it to the Cart"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.create(cart_id, {\n  variant_id,\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11332,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11333,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-line-item/index.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsReq"
										},
										"name": "StorePostCartsCartLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11334,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11335,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11336,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a line item's data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.update(cartId, lineId, {\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11337,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11338,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11339,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-line-item.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsItemReq"
										},
										"name": "StorePostCartsCartLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11340,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11341,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11342,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item from a cart. The payment sessions will be updated and the totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.delete(cartId, lineId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11343,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11344,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11345,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11327
					]
				},
				{
					"title": "Methods",
					"children": [
						11330,
						11335,
						11341
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11346,
			"name": "OrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order Edits API Routes](https://docs.medusajs.com/api/store#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrder edits are changes made to items in an order such as adding, updating their quantity, or deleting them. Order edits are created by the admin.\nA customer can review order edit requests created by an admin and confirm or decline them.\n\nRelated Guide: [How to handle order edits in a storefront](https://docs.medusajs.com/modules/orders/storefront/handle-order-edits)."
					}
				]
			},
			"children": [
				{
					"id": 11347,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11348,
							"name": "new OrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11349,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11346,
								"name": "OrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11350,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11351,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11352,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11353,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11354,
					"name": "decline",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11355,
							"name": "decline",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decline an Order Edit. The changes are not reflected on the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.decline(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11356,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11357,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decline details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/decline-order-edit.d.ts",
											"qualifiedName": "StorePostOrderEditsOrderEditDecline"
										},
										"name": "StorePostOrderEditsOrderEditDecline",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11358,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11359,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11360,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete and confirm an Order Edit and reflect its changes on the original order. Any additional payment required must be authorized first using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "PaymentCollectionsResource",
										"target": 11387
									},
									{
										"kind": "text",
										"text": " routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.complete(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11361,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11362,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11347
					]
				},
				{
					"title": "Methods",
					"children": [
						11350,
						11354,
						11359
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11363,
			"name": "OrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order API Routes](https://docs.medusajs.com/api/store#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrders are purchases made by customers, typically through a storefront.\nOrders are placed and created using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 11220
					},
					{
						"kind": "text",
						"text": ". The methods in this class allow retrieving and claiming orders.\n\nRelated Guide: [How to retrieve order details in a storefront](https://docs.medusajs.com/modules/orders/storefront/retrieve-order-details)."
					}
				]
			},
			"children": [
				{
					"id": 11364,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11365,
							"name": "new OrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11366,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11363,
								"name": "OrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11367,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11368,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11369,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11370,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11371,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11372,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details by the ID of the cart that was used to create the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieveByCartId(cartId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11373,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11374,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11375,
					"name": "lookupOrder",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11376,
							"name": "lookupOrder",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Look up an order using filters. If the filters don't narrow down the results to a single order, a "
									},
									{
										"kind": "code",
										"text": "`404`"
									},
									{
										"kind": "text",
										"text": " response is returned with no orders."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.lookupOrder({\n  display_id: 1,\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11377,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters used to retrieve the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/lookup-order.d.ts",
											"qualifiedName": "StoreGetOrdersParams"
										},
										"name": "StoreGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11378,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11379,
					"name": "requestCustomerOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11380,
							"name": "requestCustomerOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allow the logged-in customer to claim ownership of one or more orders. This generates a token that can be used later on to verify the claim using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirmRequest",
										"target": 11383,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method.\nThis also emits the event "
									},
									{
										"kind": "code",
										"text": "`order-update-token.created`"
									},
									{
										"kind": "text",
										"text": ". So, if you have a notification provider installed that handles this event and sends the customer a notification, such as an email,\nthe customer should receive instructions on how to finalize their claim ownership."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the request is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.requestCustomerOrders({\n  order_ids,\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11381,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The orders to claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/request-order.d.ts",
											"qualifiedName": "StorePostCustomersCustomerOrderClaimReq"
										},
										"name": "StorePostCustomersCustomerOrderClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11382,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11383,
					"name": "confirmRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11384,
							"name": "confirmRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Verify the claim order token provided to the customer when they request ownership of an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the claim order is verified successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.confirmRequest(\n  token,\n)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11385,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim order to verify."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/confirm-order-request.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAcceptClaimReq"
										},
										"name": "StorePostCustomersCustomerAcceptClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11386,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11364
					]
				},
				{
					"title": "Methods",
					"children": [
						11367,
						11371,
						11375,
						11379,
						11383
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11387,
			"name": "PaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Payment Collection API Routes](https://docs.medusajs.com/api/store#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 11388,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11389,
							"name": "new PaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11390,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11387,
								"name": "PaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11391,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11392,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"region\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11393,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11394,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "StoreGetPaymentCollectionsParams"
										},
										"name": "StoreGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11395,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11396,
					"name": "authorizePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11397,
							"name": "authorizePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize a Payment Session of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorize(paymentId, sessionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11398,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11399,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11400,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11401,
					"name": "authorizePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11402,
							"name": "authorizePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize the Payment Sessions of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorizePaymentSessionsBatch(paymentCollectionId, {\n session_ids: [\"ps_123456\"]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11403,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11404,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of payment session IDs to authorize."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/authorize-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11406,
					"name": "managePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11407,
							"name": "managePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create, update, or delete a list of payment sessions of a Payment Collections. If a payment session is not provided in the "
									},
									{
										"kind": "code",
										"text": "`sessions`"
									},
									{
										"kind": "text",
										"text": " array, it's deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add two new payment sessions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\n\n// Total amount = 10000\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 5000,\n    },\n    {\n      provider_id: \"manual\",\n      amount: 5000,\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo update a payment session and another one by not including it in the payload:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 10000,\n      session_id: \"ps_123456\"\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11408,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11409,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes of each session to update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11410,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11411,
					"name": "managePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11412,
							"name": "managePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Payment Session for a payment provider in a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.managePaymentSession(payment_id, { provider_id: \"stripe\" })\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11413,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11414,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment session to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-payment-session.d.ts",
											"qualifiedName": "StorePaymentCollectionSessionsReq"
										},
										"name": "StorePaymentCollectionSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11415,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11416,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11417,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session's data to ensure that it is in sync with the Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refreshed payment session's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.paymentCollections.refreshPaymentSession(paymentCollectionId, sessionId)\n.then(({ payment_session }) => {\n  console.log(payment_session.status);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11418,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11419,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11420,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsSessionRes"
										},
										"name": "StorePaymentCollectionsSessionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11388
					]
				},
				{
					"title": "Methods",
					"children": [
						11391,
						11396,
						11401,
						11406,
						11411,
						11416
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11421,
			"name": "PaymentMethodsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Payment Method API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.paymentMethods`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 11202
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 11422,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11423,
							"name": "new PaymentMethodsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11424,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11421,
								"name": "PaymentMethodsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11425,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11426,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's saved payment methods. This method only works with payment providers created with the deprecated Payment Service interface.\nThe payment methods are saved using the Payment Service's third-party service, and not on the Medusa backend. So, they're retrieved from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's payment methods."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.paymentMethods.list()\n.then(({ payment_methods }) => {\n  console.log(payment_methods.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11427,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListPaymentMethodsRes"
										},
										"name": "StoreCustomersListPaymentMethodsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11422
					]
				},
				{
					"title": "Methods",
					"children": [
						11425
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11428,
			"name": "ProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Category API Routes](https://docs.medusajs.com/api/store#product-categories_getproductcategories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts can be categoriezed into categories. A product can be associated more than one category.\nUsing the methods in this class, you can list or retrieve a category's details and products.\n\nRelated Guide: [How to use product categories in a storefront](https://docs.medusajs.com/modules/products/storefront/use-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 11429,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11430,
							"name": "new ProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11431,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11428,
								"name": "ProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11432,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11433,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product category by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId, {\n  expand: \"products\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11434,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11435,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/get-product-category.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryParams"
										},
										"name": "StoreGetProductCategoriesCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11436,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryRes"
										},
										"name": "StoreGetProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11437,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11438,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated. This method can also be used to retrieve a product category by its handle."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo retrieve a product category by its handle:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  handle: \"women\",\n})\n.then(({ product_categories, limit, offset, count }) => {\n  if (!product_categories.length) {\n    // category does not exist\n  }\n  const category = product_categories[0]\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11439,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/list-product-categories.d.ts",
											"qualifiedName": "StoreGetProductCategoriesParams"
										},
										"name": "StoreGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11440,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesRes"
										},
										"name": "StoreGetProductCategoriesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11429
					]
				},
				{
					"title": "Methods",
					"children": [
						11432,
						11437
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11441,
			"name": "ProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Tag API Routes](https://docs.medusajs.com/api/store#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct tags are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share tags."
					}
				]
			},
			"children": [
				{
					"id": 11442,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11443,
							"name": "new ProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11444,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11441,
								"name": "ProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11445,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11446,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11447,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/list-product-tags.d.ts",
											"qualifiedName": "StoreGetProductTagsParams"
										},
										"name": "StoreGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11448,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/index.d.ts",
											"qualifiedName": "StoreProductTagsListRes"
										},
										"name": "StoreProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11442
					]
				},
				{
					"title": "Methods",
					"children": [
						11445
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11449,
			"name": "ProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Type API Routes](https://docs.medusajs.com/api/store#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct types are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share types."
					}
				]
			},
			"children": [
				{
					"id": 11450,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11451,
							"name": "new ProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11452,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11449,
								"name": "ProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11453,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11454,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11455,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/list-product-types.d.ts",
											"qualifiedName": "StoreGetProductTypesParams"
										},
										"name": "StoreGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11456,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/index.d.ts",
											"qualifiedName": "StoreProductTypesListRes"
										},
										"name": "StoreProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11450
					]
				},
				{
					"title": "Methods",
					"children": [
						11453
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11457,
			"name": "ProductVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.product.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product."
					}
				]
			},
			"children": [
				{
					"id": 11458,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11459,
							"name": "new ProductVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11460,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11457,
								"name": "ProductVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11461,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11462,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Variant's details. For accurate and correct pricing of the product variant based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.retrieve(productVariantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11463,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11464,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsRes"
										},
										"name": "StoreVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11465,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11466,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves a list of product variants. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be paginated.\n\nFor accurate and correct pricing of the product variants based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list()\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\"\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\",\n  limit,\n  offset\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11467,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/list-variants.d.ts",
											"qualifiedName": "StoreGetVariantsParams"
										},
										"name": "StoreGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11468,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsListRes"
										},
										"name": "StoreVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11458
					]
				},
				{
					"title": "Methods",
					"children": [
						11461,
						11465
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11469,
			"name": "ProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product API Routes](https://docs.medusajs.com/api/store#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards) in a store.\nUsing the methods in this class, you can filter products by categories, collections, sales channels, and more.\n\nRelated Guide: [How to show products in a storefront](https://docs.medusajs.com/modules/products/storefront/show-products)."
					}
				]
			},
			"children": [
				{
					"id": 11470,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11471,
							"name": "new ProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11472,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11469,
								"name": "ProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11473,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ProductVariantsResource",
								"target": 11457,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants_getvariants)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 11457,
						"name": "ProductVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 11474,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11475,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product's details. For accurate and correct pricing of the product based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11476,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11477,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsRes"
										},
										"name": "StoreProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11478,
					"name": "search",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11479,
							"name": "search",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Run a search query on products using the search service installed on the Medusa backend. The searching is handled through the search service, so the returned data's\nformat depends on the search service you're using."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of search results. The format of the items depends on the search engine installed on the Medusa backend."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.search({\n  q: \"Shirt\"\n})\n.then(({ hits }) => {\n  console.log(hits.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11480,
									"name": "searchOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fields to search products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/search.d.ts",
											"qualifiedName": "StorePostSearchReq"
										},
										"name": "StorePostSearchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11481,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StorePostSearchRes"
										},
										"name": "StorePostSearchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11482,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11483,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated.\nThis method can also be used to retrieve a product by its handle.\n\nFor accurate and correct pricing of the products based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11484,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/list-products.d.ts",
											"qualifiedName": "StoreGetProductsParams"
										},
										"name": "StoreGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11485,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsListRes"
										},
										"name": "StoreProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11470
					]
				},
				{
					"title": "Properties",
					"children": [
						11473
					]
				},
				{
					"title": "Methods",
					"children": [
						11474,
						11478,
						11482
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11486,
			"name": "RegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Region API Routes](https://docs.medusajs.com/api/store#regions_getregions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nCustomers can choose what region they're in, which can be used to change the prices shown based on the region and its currency.\n\nRelated Guide: [How to use regions in a storefront](https://docs.medusajs.com/modules/regions-and-currencies/storefront/use-regions)."
					}
				]
			},
			"children": [
				{
					"id": 11487,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11488,
							"name": "new RegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11489,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11486,
								"name": "RegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11490,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11491,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of regions. This method is useful to show the customer all available regions to choose from."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.list()\n.then(({ regions, count, limit, offset }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11492,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsListRes"
										},
										"name": "StoreRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11493,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11494,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11495,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11496,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsRes"
										},
										"name": "StoreRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11487
					]
				},
				{
					"title": "Methods",
					"children": [
						11490,
						11493
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11497,
			"name": "ReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return Reason API Routes](https://docs.medusajs.com/api/store#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created."
					}
				]
			},
			"children": [
				{
					"id": 11498,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11499,
							"name": "new ReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11500,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11497,
								"name": "ReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11501,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11502,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Return Reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.retrieve(reasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11503,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11504,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsRes"
										},
										"name": "StoreReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11505,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11506,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Return Reasons. This is useful when implementing a Create Return flow in the storefront."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11507,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsListRes"
										},
										"name": "StoreReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11498
					]
				},
				{
					"title": "Methods",
					"children": [
						11501,
						11505
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11508,
			"name": "ReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return API Routes](https://docs.medusajs.com/api/store#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA return can be created by a customer to return items in an order.\n\nRelated Guide: [How to create a return in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-return)."
					}
				]
			},
			"children": [
				{
					"id": 11509,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11510,
							"name": "new ReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11511,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11508,
								"name": "ReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11512,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11513,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return for an order. If a return shipping method is specified, the return is automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returns.create({\n  order_id,\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11514,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/create-return.d.ts",
											"qualifiedName": "StorePostReturnsReq"
										},
										"name": "StorePostReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11515,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/index.d.ts",
											"qualifiedName": "StoreReturnsRes"
										},
										"name": "StoreReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11509
					]
				},
				{
					"title": "Methods",
					"children": [
						11512
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11516,
			"name": "ShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Shipping Option API Routes](https://docs.medusajs.com/api/store#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 11517,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11518,
							"name": "new ShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11519,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11516,
								"name": "ShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11520,
					"name": "listCartOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11521,
							"name": "listCartOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options available for a cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.listCartOptions(cartId)\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11522,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11523,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11524,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11525,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered using the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.list()\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11526,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/list-options.d.ts",
											"qualifiedName": "StoreGetShippingOptionsParams"
										},
										"name": "StoreGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11527,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11517
					]
				},
				{
					"title": "Methods",
					"children": [
						11520,
						11524
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 11528,
			"name": "SwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Swap API Routes](https://docs.medusajs.com/api/store#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to create a swap in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-swap)"
					}
				]
			},
			"children": [
				{
					"id": 11529,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 11530,
							"name": "new SwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 11531,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 11528,
								"name": "SwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 11532,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11533,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Swap for an Order. This will also create a return and associate it with the swap. If a return shipping option is specified, the return will automatically be fulfilled.\nTo complete the swap, you must use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "CartsResource.complete",
										"target": 11230
									},
									{
										"kind": "text",
										"text": " method passing it the ID of the swap's cart.\n\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during swap creation or the request is interrupted for any reason, the swap creation can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.create({\n  order_id,\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ],\n  additional_items: [\n    {\n      variant_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11534,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/create-swap.d.ts",
											"qualifiedName": "StorePostSwapsReq"
										},
										"name": "StorePostSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 11535,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 11536,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 11537,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Swap's details by the ID of its cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.retrieveByCartId(cartId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 11538,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 11539,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						11529
					]
				},
				{
					"title": "Methods",
					"children": [
						11532,
						11536
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				11181,
				11608,
				11626,
				11650,
				11685,
				11582,
				11698,
				11739,
				11760,
				11847,
				11892,
				11540,
				11917,
				11968,
				11991,
				12016,
				12160,
				12029,
				12825,
				12847,
				12219,
				12865,
				12274,
				12281,
				12289,
				12362,
				12406,
				12465,
				12490,
				12514,
				12531,
				12576,
				12601,
				12625,
				12650,
				12675,
				12687,
				12751,
				12775,
				12808,
				11198,
				11220,
				11277,
				11289,
				11318,
				11326,
				11346,
				11363,
				11387,
				11421,
				11428,
				11441,
				11449,
				11457,
				11469,
				11486,
				11497,
				11508,
				11516,
				11528
			]
		}
	],
	"packageName": "@medusajs/medusa-js",
	"symbolIdMap": {
		"11180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/index.ts",
			"qualifiedName": ""
		},
		"11181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource"
		},
		"11182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AddressesResource"
		},
		"11184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"11186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"11187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"11188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"11189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"11190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"11191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"11192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"11193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"11194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"11195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"11196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"11197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"11198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource"
		},
		"11199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AuthResource"
		},
		"11201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"11203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"11204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"11205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"11207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"11208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"11210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"11211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"11213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"11214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "email"
		},
		"11215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"11217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"11218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"11219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource"
		},
		"11221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CartsResource"
		},
		"11223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.lineItems"
		},
		"11225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"11226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"11227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"11229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"11231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"11232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"11235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"11236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"11237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"11239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"11240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"11243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"11244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "code"
		},
		"11246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"11248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"11249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"11251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"11253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"11254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"11256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"11258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"11259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"11262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"11263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"11265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"11267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"11268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"11270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"11272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"11273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"11274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"11275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"11276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"11277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource"
		},
		"11278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CollectionsResource"
		},
		"11280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"11282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"11283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "id"
		},
		"11284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"11286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"11287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "query"
		},
		"11288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource"
		},
		"11290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CustomerResource"
		},
		"11292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.paymentMethods"
		},
		"11294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.addresses"
		},
		"11295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"11296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"11297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"11298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"11300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"11301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"11303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"11304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"11305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"11307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"11308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "params"
		},
		"11309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"11311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"11312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"11313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"11315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"11316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"11317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"11319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"11321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"11323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"11324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "code"
		},
		"11325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource"
		},
		"11327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "LineItemsResource"
		},
		"11329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"11331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"11332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"11333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"11334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"11335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"11336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"11337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"11338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"11339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"11340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"11341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"11342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"11343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"11344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"11345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"11346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"11347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"11349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"11351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"11352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"11353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"11354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"11355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"11356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"11357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "payload"
		},
		"11358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"11359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"11360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"11361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"11362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"11363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource"
		},
		"11364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrdersResource"
		},
		"11366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"11368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"11369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "id"
		},
		"11370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"11372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"11373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "cart_id"
		},
		"11374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"11376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"11377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"11378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"11380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"11381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"11382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"11384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"11385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"11386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"11388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"11390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"11392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"11393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "query"
		},
		"11395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"11397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"11398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"11400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"11402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"11403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"11405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"11407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"11408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"11410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"11412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"11413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"11415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"11417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"11418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"11419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"11420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"11422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"11424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"11426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"11427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "customHeaders"
		},
		"11428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"11429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"11431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"11433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"11434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "id"
		},
		"11435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"11436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"11437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"11438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"11439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"11440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"11441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"11442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"11444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"11446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"11447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "query"
		},
		"11448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "customHeaders"
		},
		"11449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"11450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"11452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"11454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"11455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "query"
		},
		"11456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"11457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"11458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"11460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"11462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"11463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "id"
		},
		"11464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"11465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"11466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"11467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "query"
		},
		"11468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"11469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource"
		},
		"11470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductsResource"
		},
		"11472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.variants"
		},
		"11474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"11475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"11476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "id"
		},
		"11477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"11478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"11479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"11480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "searchOptions"
		},
		"11481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"11482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"11483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"11484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "query"
		},
		"11485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"11486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource"
		},
		"11487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "RegionsResource"
		},
		"11489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"11491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"11492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"11493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"11494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"11495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "id"
		},
		"11496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"11497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"11498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"11500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"11502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"11503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "id"
		},
		"11504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"11505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"11506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"11507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"11508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource"
		},
		"11509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnsResource"
		},
		"11511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"11513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"11514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "payload"
		},
		"11515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"11516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"11517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"11519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"11521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"11522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "cart_id"
		},
		"11523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"11524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"11525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"11526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "query"
		},
		"11527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"11528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource"
		},
		"11529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "SwapsResource"
		},
		"11531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"11533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"11534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "payload"
		},
		"11535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"11536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"11537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"11538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "cart_id"
		},
		"11539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"11540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin"
		},
		"11541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "Admin"
		},
		"11543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.auth"
		},
		"11545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.batchJobs"
		},
		"11546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customers"
		},
		"11547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customerGroups"
		},
		"11548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.discounts"
		},
		"11549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.currencies"
		},
		"11550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.collections"
		},
		"11551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.draftOrders"
		},
		"11552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.giftCards"
		},
		"11553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.invites"
		},
		"11554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.inventoryItems"
		},
		"11555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notes"
		},
		"11556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.priceLists"
		},
		"11557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.products"
		},
		"11558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTags"
		},
		"11559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTypes"
		},
		"11560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.users"
		},
		"11561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returns"
		},
		"11562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orders"
		},
		"11563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orderEdits"
		},
		"11564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.publishableApiKeys"
		},
		"11565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returnReasons"
		},
		"11566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.variants"
		},
		"11567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.salesChannels"
		},
		"11568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.swaps"
		},
		"11569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingProfiles"
		},
		"11570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.stockLocations"
		},
		"11571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.store"
		},
		"11572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingOptions"
		},
		"11573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.regions"
		},
		"11574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.reservations"
		},
		"11575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notifications"
		},
		"11576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.taxRates"
		},
		"11577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.uploads"
		},
		"11578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.paymentCollections"
		},
		"11579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.payments"
		},
		"11580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productCategories"
		},
		"11581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.custom"
		},
		"11582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"11583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"11585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"11587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"11588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TQuery"
		},
		"11589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"11590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"11591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "query"
		},
		"11592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"11593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"11594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"11595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"11596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TPayload"
		},
		"11597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"11598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"11599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "payload"
		},
		"11600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"11601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"11602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"11603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"11604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"11605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"11606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"11607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"11608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"11609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"11611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"11613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"11614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"11616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"11617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"11619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"11620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"11621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"11623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"11624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"11625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"11626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"11627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"11629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"11631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"11632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "payload"
		},
		"11633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"11634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"11635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"11636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "query"
		},
		"11637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"11638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"11639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"11640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"11641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"11642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"11643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"11644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"11645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"11646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"11647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"11648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"11649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"11650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"11651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"11653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"11655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"11656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"11657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"11659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"11660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"11661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"11662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"11664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"11665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"11666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"11668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"11669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"11670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"11672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"11673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "query"
		},
		"11674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"11676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"11677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"11678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"11679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"11681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"11682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"11683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"11684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"11685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"11686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"11688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"11690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"11691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "query"
		},
		"11692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"11693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"11694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"11695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "code"
		},
		"11696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "payload"
		},
		"11697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"11698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"11699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"11701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"11703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"11704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"11705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"11707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"11708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"11710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"11712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"11713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"11715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"11717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"11718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"11721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"11722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"11723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"11725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"11726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"11728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"11730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"11731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"11733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"11735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"11736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"11737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"11738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"11739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"11740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"11742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"11744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"11745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"11746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"11748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"11749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"11750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"11751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"11753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"11754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"11755": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11756": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"11757": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"11758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "query"
		},
		"11759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"11760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"11761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"11763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"11765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"11766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"11768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"11770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"11771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"11774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"11775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"11779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"11780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"11784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"11785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"11788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"11789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"11791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"11793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"11794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"11798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"11799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"11800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"11802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"11803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"11806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"11807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"11808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"11809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"11811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"11812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"11817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"11818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"11820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"11824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"11825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"11827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"11829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"11830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"11832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"11835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"11836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"11838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"11840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"11842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"11843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"11844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"11845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"11846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"11847": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"11848": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11849": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"11850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"11852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"11853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"11854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"11856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"11857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"11859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"11861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"11862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"11865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"11866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"11868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"11870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"11871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"11874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"11875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "query"
		},
		"11876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"11878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"11879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"11882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"11883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"11885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"11887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"11888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"11889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"11890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"11891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"11892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"11893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"11895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"11897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"11898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"11899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"11901": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"11902": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"11903": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"11904": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11905": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"11906": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"11907": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"11908": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11909": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"11910": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"11911": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"11912": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11913": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"11914": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"11915": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "query"
		},
		"11916": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"11917": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"11918": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11919": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"11920": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11921": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"11922": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"11923": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11924": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11925": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11926": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"11927": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"11928": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11929": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"11930": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11931": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11932": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"11933": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"11934": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11935": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11936": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"11937": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"11938": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"11939": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11940": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11941": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"11942": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"11943": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11944": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11945": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"11946": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"11947": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11948": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"11949": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"11950": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11951": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11952": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"11953": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"11954": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11955": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"11956": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11957": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11958": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"11959": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"11960": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11961": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"11962": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11963": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"11964": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"11965": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"11966": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"11967": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"11968": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"11969": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11970": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"11971": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11972": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"11973": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"11974": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"11975": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"11976": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"11977": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"11978": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"11979": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"11980": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"11981": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"11982": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"11983": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"11984": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"11985": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"11986": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"11987": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"11988": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"11989": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"11990": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"11991": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"11992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"11993": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"11994": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"11995": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"11996": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"11997": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"11998": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"11999": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"12000": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"12001": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"12002": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"12003": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"12004": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"12005": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"12006": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"12007": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"12008": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"12009": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"12010": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"12011": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"12012": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"12013": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"12014": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "query"
		},
		"12015": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"12016": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"12017": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12018": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"12019": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12020": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"12021": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"12022": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "query"
		},
		"12023": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"12024": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"12025": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"12026": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "id"
		},
		"12027": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "payload"
		},
		"12028": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"12029": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"12030": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12031": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"12032": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12033": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"12034": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"12035": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12036": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12037": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12038": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"12039": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"12040": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12041": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"12042": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12043": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"12044": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"12045": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"12046": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12047": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"12048": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"12049": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12050": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12051": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"12052": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"12053": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12054": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12055": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"12056": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"12057": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12058": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12059": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12060": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"12061": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"12062": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12063": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12064": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12065": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"12066": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"12067": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12068": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"12069": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12070": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"12071": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"12072": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12073": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"12074": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"12075": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12076": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"12077": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"12078": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12079": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"12080": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"12081": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12082": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"12083": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"12084": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12085": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12086": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12087": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"12088": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"12089": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12090": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12091": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12092": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"12093": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"12094": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12095": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12096": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"12097": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"12098": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12099": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"12102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"12103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"12106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"12107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"12111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"12112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"12114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"12116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"12117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"12119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"12122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"12123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"12125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12126": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12127": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"12128": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"12129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"12131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"12133": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"12134": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12135": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"12138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"12139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"12141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"12143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"12144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"12146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"12149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"12150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"12152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"12155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"12156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"12157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"12158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"12159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"12161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"12163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"12165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"12166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"12168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"12170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"12171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"12172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"12174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"12175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"12176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"12178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"12179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"12181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"12183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"12184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"12187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"12188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"12190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"12192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"12193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"12194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemChangeId"
		},
		"12195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"12197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"12198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"12201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"12202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"12205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"12206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"12207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"12209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"12210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"12211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"12212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"12213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"12215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"12216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"12217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"12218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"12220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"12222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"12224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"12225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"12226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"12228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"12229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"12231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"12233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"12234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"12237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"12238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"12241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"12242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"12243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"12245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"12246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"12248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"12250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"12251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"12253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"12255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"12256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"12257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"12258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"12260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"12261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"12262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "productId"
		},
		"12263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"12265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"12266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"12267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "variantId"
		},
		"12268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"12270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"12271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"12272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"12273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"12274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"12275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"12277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"12279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"12280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "query"
		},
		"12281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"12282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"12284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"12286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"12287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "query"
		},
		"12288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"12289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"12290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"12292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"12294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"12295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"12298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"12299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"12302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"12303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"12307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"12308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"12311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"12312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"12313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"12318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"12319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"12321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"12322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"12326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"12327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"12331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"12332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"12334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"12337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"12338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"12340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"12342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"12343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"12345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"12347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"12348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"12352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"12353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"12355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"12356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"12358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"12359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"12360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"12361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"12363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"12365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"12367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"12368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"12371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"12372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"12373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"12375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"12376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"12377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"12379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"12380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"12382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"12384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"12385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"12388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"12389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"12392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"12393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"12395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"12397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"12398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"12400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"12402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"12403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"12404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"12405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"12406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"12407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"12409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"12411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"12412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"12413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"12415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"12416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"12418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"12420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"12421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"12424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"12425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"12428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"12429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "query"
		},
		"12430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"12432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"12433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"12435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"12437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"12438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "country_code"
		},
		"12440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"12442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"12443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"12445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"12447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"12448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"12450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"12452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"12453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"12456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"12457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"12459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"12461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"12462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"12463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"12464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"12466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"12468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"12470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"12471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"12472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"12473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"12474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"12475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "query"
		},
		"12476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"12477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"12478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"12479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"12480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"12481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"12482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"12483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"12484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"12485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"12486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"12487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"12488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"12489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"12490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"12491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"12493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"12495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"12496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"12497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"12499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"12500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"12501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"12502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"12504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"12505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"12506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"12508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"12509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"12510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"12512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"12513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"12515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"12517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"12519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"12520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"12521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"12522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"12523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"12524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"12525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "payload"
		},
		"12526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"12527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"12528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"12529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "query"
		},
		"12530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"12531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"12532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"12534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"12536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"12537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"12540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"12541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"12544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"12545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"12549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"12550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "query"
		},
		"12551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"12553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"12554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"12557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"12558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"12562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"12563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"12567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"12568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"12572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"12573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"12574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"12575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"12576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"12577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"12579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"12581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"12582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"12583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"12585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"12586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"12587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"12588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"12590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"12591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"12592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"12594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"12595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"12596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"12598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"12599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "query"
		},
		"12600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"12602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"12604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"12606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"12607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"12608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"12609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"12610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"12611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"12612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"12613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"12614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"12615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"12616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"12617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"12618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"12619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"12620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"12621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"12622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"12623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"12624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"12625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"12626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"12628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"12630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"12631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"12632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"12633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"12634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"12635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "itemId"
		},
		"12636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"12637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"12638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"12639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "stockLocationId"
		},
		"12640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"12641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"12642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"12643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"12644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "id"
		},
		"12645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"12646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"12647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"12648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "query"
		},
		"12649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"12650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"12651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"12653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"12655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"12656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "payload"
		},
		"12657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"12659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"12660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"12661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"12663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"12664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"12665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"12667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"12668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"12670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"12671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"12673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"12674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"12675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"12676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"12678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"12680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"12681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "id"
		},
		"12682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"12683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"12684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"12685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "query"
		},
		"12686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"12687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"12688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"12690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"12692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"12693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"12697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"12698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"12701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"12702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"12706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"12707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"12712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"12713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"12718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"12719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"12724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"12725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"12730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"12731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"12736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"12737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"12742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"12743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"12745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"12746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"12748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"12749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"12750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"12751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"12752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"12754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"12759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"12760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"12761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"12762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"12763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"12764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"12765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"12766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"12767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"12768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"12769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"12770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"12771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"12772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"12773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"12774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"12775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"12776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"12778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"12780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"12781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"12782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"12784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"12785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"12786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"12788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"12789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"12790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"12792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"12793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"12794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"12796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"12797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"12798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"12799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"12801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"12802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"12803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"12805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"12806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "query"
		},
		"12807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"12808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"12809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"12811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"12813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"12814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"12815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"12816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"12817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"12818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "id"
		},
		"12819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"12820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"12821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"12822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"12823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "variantId"
		},
		"12824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"12825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"12826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"12828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"12830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"12831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "query"
		},
		"12833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"12835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"12836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"12838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"12840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"12841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"12844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"12845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12847": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"12848": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12849": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"12850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"12852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"12853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"12854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "query"
		},
		"12855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"12856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"12857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"12858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"12859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"12860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"12861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"12862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"12863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "payload"
		},
		"12864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"12865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"12866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"12868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"12870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"12871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"12872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"12873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"12875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"12876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"12877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"12879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"12880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"12881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"12882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"12884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"12885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"12886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"12888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"12889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"12890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"12892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"12893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"12894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"12895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"12897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"12898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"12899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"12900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		}
	}
}