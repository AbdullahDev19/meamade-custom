{
	"id": 20690,
	"name": "notification",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 20691,
			"name": "ReturnedData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The details of a sent or resent notification."
					}
				]
			},
			"children": [
				{
					"id": 20692,
					"name": "to",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The receiver of the Notification. For example, if you sent an email to the customer then "
							},
							{
								"kind": "code",
								"text": "`to`"
							},
							{
								"kind": "text",
								"text": " is the email address of the customer.\nIn other cases, it might be a phone number or a username."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 20693,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The status of the sent notification. There are no restriction on the returned status."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 20694,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The data used to send the Notification. For example, if you sent an order confirmation email to the customer, then the "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object\nmight include the order items or the subject of the email. This "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " is necessary if the notification is resent later as you can use the same data."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						20692,
						20693,
						20694
					]
				}
			]
		},
		{
			"id": 20695,
			"name": "INotificationService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\n:::note[Prerequisites]\n\nBefore creating a Notification Provider, [install an event bus module](https://docs.medusajs.com/development/events/modules/redis).\n\n:::\n\nA Notification Provider is a provider that handles sending and resending of notifications.\n\nTo create a Notification Provider, create a TypeScript or JavaScript file in "
					},
					{
						"kind": "code",
						"text": "`src/services`"
					},
					{
						"kind": "text",
						"text": ". The name of the file is the name of the provider\n(for example, "
					},
					{
						"kind": "code",
						"text": "`sendgrid.ts`"
					},
					{
						"kind": "text",
						"text": "). The file must export a class that extends the "
					},
					{
						"kind": "code",
						"text": "`AbstractNotificationService`"
					},
					{
						"kind": "text",
						"text": " class imported from "
					},
					{
						"kind": "code",
						"text": "`@medusajs/medusa`"
					},
					{
						"kind": "text",
						"text": ".\n\nFor example, create the file "
					},
					{
						"kind": "code",
						"text": "`src/services/email-sender.ts`"
					},
					{
						"kind": "text",
						"text": " with the following content:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/services/email-sender.ts\"\nimport { AbstractNotificationService } from \"@medusajs/medusa\"\nimport { EntityManager } from \"typeorm\"\n\nclass EmailSenderService extends AbstractNotificationService {\n  protected manager_: EntityManager\n  protected transactionManager_: EntityManager\n\n  sendNotification(\n    event: string,\n    data: unknown,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    throw new Error(\"Method not implemented.\")\n  }\n  resendNotification(\n    notification: unknown,\n    config: unknown,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    throw new Error(\"Method not implemented.\")\n  }\n\n}\n\nexport default EmailSenderService\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Identifier Property\n\nThe "
					},
					{
						"kind": "code",
						"text": "`NotificationProvider`"
					},
					{
						"kind": "text",
						"text": " entity has 2 properties: "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " and "
					},
					{
						"kind": "code",
						"text": "`is_installed`"
					},
					{
						"kind": "text",
						"text": ". The value of the "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " property in the notification provider\nclass is used when the Notification Provider is created in the database.\n\nThe value of this property is also used later when you want to subscribe the Notification Provider to events in a [Loader](https://docs.medusajs.com/development/loaders/overview).\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nclass EmailSenderService extends AbstractNotificationService {\n  static identifier = \"email-sender\"\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 20696,
					"name": "sendNotification",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 20697,
							"name": "sendNotification",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When an event is triggered that your Notification Provider is registered as a handler for, the ["
									},
									{
										"kind": "code",
										"text": "`NotificationService`"
									},
									{
										"kind": "text",
										"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService)\nin the Medusa backend executes this method of your Notification Provider.\n\nIn this method, you can perform the necessary operation to send the Notification. For example, you can send an email to the customer when they place an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The sending details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass EmailSenderService extends AbstractNotificationService {\n  // ...\n  async sendNotification(\n    event: string,\n    data: any,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    if (event === \"order.placed\") {\n      // retrieve order\n      const order = await this.orderService.retrieve(data.id)\n      // TODO send email\n\n      console.log(\"Notification sent\")\n      return {\n        to: order.email,\n        status: \"done\",\n        data: {\n          // any data necessary to send the email\n          // for example:\n          subject: \"You placed a new order!\",\n          items: order.items,\n        },\n      }\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20698,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event that was triggered. For example, "
											},
											{
												"kind": "code",
												"text": "`order.placed`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20699,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data payload of the event that was triggered. For example, if the "
											},
											{
												"kind": "code",
												"text": "`order.placed`"
											},
											{
												"kind": "text",
												"text": " event is triggered,\nthe "
											},
											{
												"kind": "code",
												"text": "`eventData`"
											},
											{
												"kind": "text",
												"text": " object contains the property "
											},
											{
												"kind": "code",
												"text": "`id`"
											},
											{
												"kind": "text",
												"text": " which is the ID of the order that was placed. You can refer to the\n[Events reference](https://docs.medusajs.com/development/events/events-list) for information on all events and their payloads."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20700,
									"name": "attachmentGenerator",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If you’ve previously register an attachment generator to the "
											},
											{
												"kind": "code",
												"text": "`NotificationService`"
											},
											{
												"kind": "text",
												"text": " using the\n["
											},
											{
												"kind": "code",
												"text": "`registerAttachmentGenerator`"
											},
											{
												"kind": "text",
												"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService#registerattachmentgenerator) method,\nyou have access to it here. You can use the "
											},
											{
												"kind": "code",
												"text": "`attachmentGenerator`"
											},
											{
												"kind": "text",
												"text": " to generate on-demand invoices or other documents. The default value of this parameter is "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 20691,
										"name": "ReturnedData",
										"package": "@medusajs/medusa"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 20701,
					"name": "resendNotification",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 20702,
							"name": "resendNotification",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to resend notifications, which is typically triggered by the\n[Resend Notification API Route](https://docs.medusajs.com/api/admin#notifications_postnotificationsnotificationresend)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The resend details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass EmailSenderService extends AbstractNotificationService {\n  // ...\n  async resendNotification(\n    notification: any,\n    config: any,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    // check if the receiver should be changed\n    const to: string = config.to || notification.to\n\n    // TODO resend the notification using the same data\n    // that is saved under notification.data\n\n    console.log(\"Notification resent\")\n    return {\n      to,\n      status: \"done\",\n      data: notification.data, // make changes to the data\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20703,
									"name": "notification",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The original [Notification record](https://docs.medusajs.com/references/entities/classes/Notification) that was created after you sent the\nnotification with "
											},
											{
												"kind": "code",
												"text": "`sendNotification`"
											},
											{
												"kind": "text",
												"text": ". It includes the "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " attributes which are populated originally using the "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " properties of\nthe object you return in "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "sendNotification",
												"target": 20696,
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20704,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The new configuration used to resend the notification. The [Resend Notification API Route](https://docs.medusajs.com/api/admin#notifications_postnotificationsnotificationresend),\nallows you to pass a new "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " field. If specified, it will be available in this config object."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20705,
									"name": "attachmentGenerator",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "f you’ve previously register an attachment generator to the "
											},
											{
												"kind": "code",
												"text": "`NotificationService`"
											},
											{
												"kind": "text",
												"text": " using the\n["
											},
											{
												"kind": "code",
												"text": "`registerAttachmentGenerator`"
											},
											{
												"kind": "text",
												"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService#registerattachmentgenerator) method,\nyou have access to it here. You can use the "
											},
											{
												"kind": "code",
												"text": "`attachmentGenerator`"
											},
											{
												"kind": "text",
												"text": " to generate on-demand invoices or other documents. The default value of this parameter is "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 20691,
										"name": "ReturnedData",
										"package": "@medusajs/medusa"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 20706,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					}
				},
				{
					"id": 20707,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					}
				},
				{
					"id": 20708,
					"name": "activeManager_",
					"variant": "declaration",
					"kind": 262144,
					"flags": {
						"isProtected": true
					},
					"getSignature": {
						"id": 20709,
						"name": "activeManager_",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
								"qualifiedName": "EntityManager"
							},
							"name": "EntityManager",
							"package": "typeorm"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "TransactionBaseService.activeManager_"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.activeManager_"
					}
				},
				{
					"id": 20710,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					}
				},
				{
					"id": 20711,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					}
				},
				{
					"id": 20712,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					}
				},
				{
					"id": 20713,
					"name": "withTransaction",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 20714,
							"name": "withTransaction",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 20715,
									"name": "transactionManager",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
											"qualifiedName": "EntityManager"
										},
										"name": "EntityManager",
										"package": "typeorm"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.withTransaction"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.withTransaction"
					}
				},
				{
					"id": 20716,
					"name": "shouldRetryTransaction_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 20717,
							"name": "shouldRetryTransaction_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 20718,
									"name": "err",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 20719,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 20720,
															"name": "code",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																20720
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.shouldRetryTransaction_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.shouldRetryTransaction_"
					}
				},
				{
					"id": 20721,
					"name": "atomicPhase_",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 20722,
							"name": "atomicPhase_",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Wraps some work within a transactional block. If the service already has\na transaction manager attached this will be reused, otherwise a new\ntransaction manager is created."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the result of the transactional work"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 20723,
									"name": "TResult",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								},
								{
									"id": 20724,
									"name": "TError",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 20725,
									"name": "work",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the transactional work to be done"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 20726,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 20727,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 20728,
															"name": "transactionManager",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
																	"qualifiedName": "EntityManager"
																},
																"name": "EntityManager",
																"package": "typeorm"
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 20723,
																"name": "TResult",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 20729,
									"name": "isolationOrErrorHandler",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the isolation level to be used for the work."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../node_modules/typeorm/driver/types/IsolationLevel.d.ts",
													"qualifiedName": "IsolationLevel"
												},
												"name": "IsolationLevel",
												"package": "typeorm"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 20730,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"signatures": [
														{
															"id": 20731,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 20732,
																	"name": "error",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 20724,
																		"name": "TError",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "void"
																			},
																			{
																				"type": "reference",
																				"target": 20723,
																				"name": "TResult",
																				"package": "@medusajs/medusa",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 20733,
									"name": "maybeErrorHandlerOrDontFail",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Potential error handler"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 20734,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 20735,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 20736,
															"name": "error",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 20724,
																"name": "TError",
																"package": "@medusajs/medusa",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	},
																	{
																		"type": "reference",
																		"target": 20723,
																		"name": "TResult",
																		"package": "@medusajs/medusa",
																		"refersToTypeParameter": true
																	}
																]
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 20723,
										"name": "TResult",
										"package": "@medusajs/medusa",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.atomicPhase_"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.atomicPhase_"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						20706,
						20707,
						20710,
						20711,
						20712
					]
				},
				{
					"title": "Accessors",
					"children": [
						20708
					]
				},
				{
					"title": "Methods",
					"children": [
						20696,
						20701,
						20713,
						20716,
						20721
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 20737,
					"name": "AbstractNotificationService"
				}
			]
		},
		{
			"id": 20737,
			"name": "AbstractNotificationService",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 20739,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 20743,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 20744,
							"name": "new AbstractNotificationService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your notification provider to access the different services in Medusa through dependency injection.\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party provider’s APIs,\nyou can initialize it in the constructor and use it in other methods in the service.\n\nAdditionally, if you’re creating your notification provider as an external plugin to be installed on any Medusa backend and you want to access the options\nadded for the plugin, you can access it in the constructor."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// ...\nimport { AbstractNotificationService, OrderService } from \"@medusajs/medusa\"\nimport { EntityManager } from \"typeorm\"\n\nclass EmailSenderService extends AbstractNotificationService {\n  // ...\n  protected orderService: OrderService\n\n  constructor(container, options) {\n    super(container)\n    // you can access options here in case you're\n    // using a plugin\n\n    this.orderService = container.orderService\n\n    // you can also initialize a client that\n    // communicates with a third-party service.\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default EmailSenderService\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20745,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources, such as services, in your Medusa backend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 20746,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this notification provider is created in a plugin, the plugin's options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 20737,
								"name": "AbstractNotificationService",
								"package": "@medusajs/medusa"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TransactionBaseService.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.constructor"
					}
				},
				{
					"id": 20749,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources, such as services, in your Medusa backend."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 20750,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this notification provider is created in a plugin, the plugin's options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 20751,
					"name": "sendNotification",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 20752,
							"name": "sendNotification",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When an event is triggered that your Notification Provider is registered as a handler for, the ["
									},
									{
										"kind": "code",
										"text": "`NotificationService`"
									},
									{
										"kind": "text",
										"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService)\nin the Medusa backend executes this method of your Notification Provider.\n\nIn this method, you can perform the necessary operation to send the Notification. For example, you can send an email to the customer when they place an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The sending details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass EmailSenderService extends AbstractNotificationService {\n  // ...\n  async sendNotification(\n    event: string,\n    data: any,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    if (event === \"order.placed\") {\n      // retrieve order\n      const order = await this.orderService.retrieve(data.id)\n      // TODO send email\n\n      console.log(\"Notification sent\")\n      return {\n        to: order.email,\n        status: \"done\",\n        data: {\n          // any data necessary to send the email\n          // for example:\n          subject: \"You placed a new order!\",\n          items: order.items,\n        },\n      }\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20753,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event that was triggered. For example, "
											},
											{
												"kind": "code",
												"text": "`order.placed`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20754,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data payload of the event that was triggered. For example, if the "
											},
											{
												"kind": "code",
												"text": "`order.placed`"
											},
											{
												"kind": "text",
												"text": " event is triggered,\nthe "
											},
											{
												"kind": "code",
												"text": "`eventData`"
											},
											{
												"kind": "text",
												"text": " object contains the property "
											},
											{
												"kind": "code",
												"text": "`id`"
											},
											{
												"kind": "text",
												"text": " which is the ID of the order that was placed. You can refer to the\n[Events reference](https://docs.medusajs.com/development/events/events-list) for information on all events and their payloads."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20755,
									"name": "attachmentGenerator",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If you’ve previously register an attachment generator to the "
											},
											{
												"kind": "code",
												"text": "`NotificationService`"
											},
											{
												"kind": "text",
												"text": " using the\n["
											},
											{
												"kind": "code",
												"text": "`registerAttachmentGenerator`"
											},
											{
												"kind": "text",
												"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService#registerattachmentgenerator) method,\nyou have access to it here. You can use the "
											},
											{
												"kind": "code",
												"text": "`attachmentGenerator`"
											},
											{
												"kind": "text",
												"text": " to generate on-demand invoices or other documents. The default value of this parameter is "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 20691,
										"name": "ReturnedData",
										"package": "@medusajs/medusa"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 20697,
								"name": "INotificationService.sendNotification"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 20696,
						"name": "INotificationService.sendNotification"
					}
				},
				{
					"id": 20756,
					"name": "resendNotification",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 20757,
							"name": "resendNotification",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to resend notifications, which is typically triggered by the\n[Resend Notification API Route](https://docs.medusajs.com/api/admin#notifications_postnotificationsnotificationresend)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The resend details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass EmailSenderService extends AbstractNotificationService {\n  // ...\n  async resendNotification(\n    notification: any,\n    config: any,\n    attachmentGenerator: unknown\n  ): Promise<{\n      to: string;\n      status: string;\n      data: Record<string, unknown>;\n    }> {\n    // check if the receiver should be changed\n    const to: string = config.to || notification.to\n\n    // TODO resend the notification using the same data\n    // that is saved under notification.data\n\n    console.log(\"Notification resent\")\n    return {\n      to,\n      status: \"done\",\n      data: notification.data, // make changes to the data\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 20758,
									"name": "notification",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The original [Notification record](https://docs.medusajs.com/references/entities/classes/Notification) that was created after you sent the\nnotification with "
											},
											{
												"kind": "code",
												"text": "`sendNotification`"
											},
											{
												"kind": "text",
												"text": ". It includes the "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " attributes which are populated originally using the "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " properties of\nthe object you return in "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "sendNotification",
												"target": 20696,
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20759,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The new configuration used to resend the notification. The [Resend Notification API Route](https://docs.medusajs.com/api/admin#notifications_postnotificationsnotificationresend),\nallows you to pass a new "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " field. If specified, it will be available in this config object."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 20760,
									"name": "attachmentGenerator",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "f you’ve previously register an attachment generator to the "
											},
											{
												"kind": "code",
												"text": "`NotificationService`"
											},
											{
												"kind": "text",
												"text": " using the\n["
											},
											{
												"kind": "code",
												"text": "`registerAttachmentGenerator`"
											},
											{
												"kind": "text",
												"text": "](https://docs.medusajs.com/references/services/classes/services.NotificationService#registerattachmentgenerator) method,\nyou have access to it here. You can use the "
											},
											{
												"kind": "code",
												"text": "`attachmentGenerator`"
											},
											{
												"kind": "text",
												"text": " to generate on-demand invoices or other documents. The default value of this parameter is "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 20691,
										"name": "ReturnedData",
										"package": "@medusajs/medusa"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 20702,
								"name": "INotificationService.resendNotification"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 20701,
						"name": "INotificationService.resendNotification"
					}
				},
				{
					"id": 20761,
					"name": "manager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.manager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 20706,
						"name": "INotificationService.manager_"
					}
				},
				{
					"id": 20762,
					"name": "transactionManager_",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
									"qualifiedName": "EntityManager"
								},
								"name": "EntityManager",
								"package": "typeorm"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.transactionManager_"
					},
					"implementationOf": {
						"type": "reference",
						"target": 20707,
						"name": "INotificationService.transactionManager_"
					}
				},
				{
					"id": 20765,
					"name": "__container__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__container__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 20710,
						"name": "INotificationService.__container__"
					}
				},
				{
					"id": 20766,
					"name": "__configModule__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__configModule__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 20711,
						"name": "INotificationService.__configModule__"
					}
				},
				{
					"id": 20767,
					"name": "__moduleDeclaration__",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isOptional": true,
						"isReadonly": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TransactionBaseService.__moduleDeclaration__"
					},
					"implementationOf": {
						"type": "reference",
						"target": 20712,
						"name": "INotificationService.__moduleDeclaration__"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						20743
					]
				},
				{
					"title": "Properties",
					"children": [
						20739,
						20749,
						20750,
						20761,
						20762,
						20765,
						20766,
						20767
					]
				},
				{
					"title": "Methods",
					"children": [
						20751,
						20756
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
						"qualifiedName": "TransactionBaseService"
					},
					"name": "TransactionBaseService",
					"package": "@medusajs/medusa"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 20695,
					"name": "INotificationService",
					"package": "@medusajs/medusa"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				20737
			]
		},
		{
			"title": "Interfaces",
			"children": [
				20691,
				20695
			]
		}
	],
	"packageName": "@medusajs/medusa",
	"symbolIdMap": {
		"20690": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": ""
		},
		"20691": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "ReturnedData"
		},
		"20692": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "__type.to"
		},
		"20693": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "__type.status"
		},
		"20694": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "__type.data"
		},
		"20695": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "INotificationService"
		},
		"20696": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "INotificationService.sendNotification"
		},
		"20697": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "INotificationService.sendNotification"
		},
		"20698": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "event"
		},
		"20699": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "data"
		},
		"20700": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "attachmentGenerator"
		},
		"20701": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "INotificationService.resendNotification"
		},
		"20702": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "INotificationService.resendNotification"
		},
		"20703": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "notification"
		},
		"20704": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "config"
		},
		"20705": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "attachmentGenerator"
		},
		"20706": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"20707": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"20708": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"20709": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"20710": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"20711": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"20712": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"20713": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"20714": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"20715": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"20716": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"20717": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"20718": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"20719": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20720": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"20721": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"20722": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"20723": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"20724": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"20725": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"20726": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20727": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20728": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"20729": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"20730": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20731": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20732": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"20733": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"20734": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20735": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20736": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"20737": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService"
		},
		"20739": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.identifier"
		},
		"20743": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.__constructor"
		},
		"20744": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService"
		},
		"20745": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "container"
		},
		"20746": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "config"
		},
		"20749": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.container"
		},
		"20750": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.config"
		},
		"20751": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.sendNotification"
		},
		"20752": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.sendNotification"
		},
		"20753": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "event"
		},
		"20754": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "data"
		},
		"20755": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "attachmentGenerator"
		},
		"20756": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.resendNotification"
		},
		"20757": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "AbstractNotificationService.resendNotification"
		},
		"20758": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "notification"
		},
		"20759": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "config"
		},
		"20760": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/notification-service.ts",
			"qualifiedName": "attachmentGenerator"
		},
		"20761": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.manager_"
		},
		"20762": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.transactionManager_"
		},
		"20763": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"20764": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.activeManager_"
		},
		"20765": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__container__"
		},
		"20766": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__configModule__"
		},
		"20767": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.__moduleDeclaration__"
		},
		"20768": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"20769": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.withTransaction"
		},
		"20770": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"20771": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"20772": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.shouldRetryTransaction_"
		},
		"20773": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "err"
		},
		"20774": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20775": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type.code"
		},
		"20776": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"20777": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TransactionBaseService.atomicPhase_"
		},
		"20778": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TResult"
		},
		"20779": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "TError"
		},
		"20780": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "work"
		},
		"20781": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20782": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20783": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "transactionManager"
		},
		"20784": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "isolationOrErrorHandler"
		},
		"20785": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20786": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20787": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		},
		"20788": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "maybeErrorHandlerOrDontFail"
		},
		"20789": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20790": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "__type"
		},
		"20791": {
			"sourceFileName": "../../../packages/medusa/src/interfaces/transaction-base-service.ts",
			"qualifiedName": "error"
		}
	}
}