{
	"id": 12272,
	"name": "js-client",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 12273,
			"name": "AddressesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Address API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.addresses`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 12294
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 12277,
					"name": "addAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12278,
							"name": "addAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add an address to the logged-in customer's saved addresses."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.addAddress({\n  address: {\n    first_name: \"Celia\",\n    last_name: \"Schumm\",\n    address_1: \"225 Bednar Curve\",\n    city: \"Danielville\",\n    country_code: \"US\",\n    postal_code: \"85137\",\n    phone: \"981-596-6748 x90188\",\n    company: \"Wyman LLC\",\n    province: \"Georgia\",\n  }\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12279,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesReq"
										},
										"name": "StorePostCustomersCustomerAddressesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12280,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12281,
					"name": "deleteAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12282,
							"name": "deleteAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.deleteAddress(addressId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12283,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the address to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12284,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12285,
					"name": "updateAddress",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12286,
							"name": "updateAddress",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an address of the logged-in customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details, including the customer's addresses in the "
											},
											{
												"kind": "code",
												"text": "`shipping_addresses`"
											},
											{
												"kind": "text",
												"text": " attribute."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.addresses.updateAddress(addressId, {\n  first_name: \"Gina\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12287,
									"name": "address_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The address's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12288,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the address."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-address.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAddressesAddressReq"
										},
										"name": "StorePostCustomersCustomerAddressesAddressReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12289,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12274,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12275,
							"name": "new AddressesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12276,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12273,
								"name": "AddressesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12274
					]
				},
				{
					"title": "Methods",
					"children": [
						12277,
						12281,
						12285
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12700,
			"name": "AdminAuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth_getauth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allow admin users to manage their session, such as login or log out.\nYou can send authenticated requests for an admin user either using the Cookie header, their API token, or the JWT Token.\nWhen you log the admin user in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "createSession",
						"target": 12710,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement user profiles](https://docs.medusajs.com/modules/users/admin/manage-profile)."
					}
				]
			},
			"children": [
				{
					"id": 12704,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12705,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the currently logged in user's details. Can also be used to check if there is an authenticated user."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.auth.getSession()\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12706,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12707,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12708,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the user and remove their authentication session. This will only work if you're using Cookie session for authentication. If the API token is still passed in the header,\nthe user is still authorized to perform admin functionalities in other API Routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when user is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in\nmedusa.admin.auth.deleteSession()\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12709,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12710,
					"name": "createSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12711,
							"name": "createSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log a User in using their credentials. If the user is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.AdminAuthResource.createSession({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12712,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12713,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminAuthRes"
										},
										"name": "AdminAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12714,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12715,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the user and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the user, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.admin.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12716,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/create-session.d.ts",
											"qualifiedName": "AdminPostAuthReq"
										},
										"name": "AdminPostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12717,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/auth/index.d.ts",
											"qualifiedName": "AdminBearerAuthRes"
										},
										"name": "AdminBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12701,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12702,
							"name": "new AdminAuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12703,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12700,
								"name": "AdminAuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12701
					]
				},
				{
					"title": "Methods",
					"children": [
						12704,
						12707,
						12710,
						12714
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12718,
			"name": "AdminBatchJobsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.batchJobs`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA batch job is a task that is performed by the Medusa backend asynchronusly. For example, the Import Product feature is implemented using batch jobs.\nThe methods in this class allow admins to manage the batch jobs and their state.\n\nRelated Guide: [How to import products](https://docs.medusajs.com/modules/products/admin/import-products)."
					}
				]
			},
			"children": [
				{
					"id": 12722,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12723,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Batch Job to be executed asynchronously in the Medusa backend. If "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ", the batch job will not be executed until the it is confirmed,\nwhich can be done using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirm",
										"target": 12734,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.create({\n  type: 'product-export',\n  context: {},\n  dry_run: false\n}).then((({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12724,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the batch job to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/create-batch-job.d.ts",
											"qualifiedName": "AdminPostBatchesReq"
										},
										"name": "AdminPostBatchesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12725,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12726,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12727,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Batch Jobs. The batch jobs can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`confirmed_at`"
									},
									{
										"kind": "text",
										"text": ". The batch jobs can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of batch jobs with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list()\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the batch jobs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\"\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.list({\n  expand: \"created_by_user\",\n  limit,\n  offset\n})\n.then(({ batch_jobs, limit, offset, count }) => {\n  console.log(batch_jobs.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12728,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved batch jobs."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/list-batch-jobs.d.ts",
											"qualifiedName": "AdminGetBatchParams"
										},
										"name": "AdminGetBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12729,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobListRes"
										},
										"name": "AdminBatchJobListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12730,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12731,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a batch job as canceled. When a batch job is canceled, the processing of the batch job doesn’t automatically stop."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.cancel(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12732,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12733,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12734,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12735,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When a batch job is created, it's not executed automatically if "
									},
									{
										"kind": "code",
										"text": "`dry_run`"
									},
									{
										"kind": "text",
										"text": " is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ". This method confirms that the batch job should be executed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.confirm(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12736,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12737,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12738,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12739,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a batch job."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the batch job's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.batchJobs.retrieve(batchJobId)\n.then(({ batch_job }) => {\n  console.log(batch_job.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12740,
									"name": "batchJobId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the batch job."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12741,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/batch/index.d.ts",
											"qualifiedName": "AdminBatchJobRes"
										},
										"name": "AdminBatchJobRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12719,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12720,
							"name": "new AdminBatchJobsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12721,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12718,
								"name": "AdminBatchJobsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12719
					]
				},
				{
					"title": "Methods",
					"children": [
						12722,
						12726,
						12730,
						12734,
						12738
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12742,
			"name": "AdminCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection."
					}
				]
			},
			"children": [
				{
					"id": 12746,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12747,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.create({\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12748,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the product collection to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/create-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsReq"
										},
										"name": "AdminPostCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12749,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12750,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12751,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.update(collectionId, {\n  title: \"New Collection\"\n})\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12752,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12753,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the product collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/update-collection.d.ts",
											"qualifiedName": "AdminPostCollectionsCollectionReq"
										},
										"name": "AdminPostCollectionsCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12754,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12755,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12756,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product collection. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.delete(collectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12757,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12758,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12759,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12760,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection by its ID. The products associated with it are expanded and returned as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12761,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12762,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12763,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12764,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": ". The collections can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12765,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/list-collections.d.ts",
											"qualifiedName": "AdminGetCollectionsParams"
										},
										"name": "AdminGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12766,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsListRes"
										},
										"name": "AdminCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12767,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12768,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.addProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ collection }) => {\n  console.log(collection.products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12769,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12770,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/add-products.d.ts",
											"qualifiedName": "AdminPostProductsToCollectionReq"
										},
										"name": "AdminPostProductsToCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12771,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminCollectionsRes"
										},
										"name": "AdminCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12772,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12773,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a collection. This would not delete the product, only the association between the product and the collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.collections.removeProducts(collectionId, {\n  product_ids: [\n    productId1,\n    productId2\n  ]\n})\n.then(({ id, object, removed_products }) => {\n  console.log(removed_products)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12774,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the product collection"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12775,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/remove-products.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionReq"
										},
										"name": "AdminDeleteProductsFromCollectionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12776,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/collections/index.d.ts",
											"qualifiedName": "AdminDeleteProductsFromCollectionRes"
										},
										"name": "AdminDeleteProductsFromCollectionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12743,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12744,
							"name": "new AdminCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12745,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12742,
								"name": "AdminCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12743
					]
				},
				{
					"title": "Methods",
					"children": [
						12746,
						12750,
						12755,
						12759,
						12763,
						12767,
						12772
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12777,
			"name": "AdminCurrenciesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.currencies`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA store can use unlimited currencies, and each region must be associated with at least one currency.\nCurrencies are defined within the Medusa backend. The methods in this class allow admins to list and update currencies.\n\nRelated Guide: [How to manage currencies](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-currencies)."
					}
				]
			},
			"children": [
				{
					"id": 12781,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12782,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of currencies. The currencies can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`code`"
									},
									{
										"kind": "text",
										"text": ". The currencies can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of currencies with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list currencies:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list()\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.list({\n  limit,\n  offset\n})\n.then(({ currencies, count, offset, limit }) => {\n  console.log(currencies.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12783,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved currencies."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/list-currencies.d.ts",
											"qualifiedName": "AdminGetCurrenciesParams"
										},
										"name": "AdminGetCurrenciesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12784,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesListRes"
										},
										"name": "AdminCurrenciesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12785,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12786,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Currency's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the currency's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.currencies.update(code, {\n  includes_tax: true\n})\n.then(({ currency }) => {\n  console.log(currency.code);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12787,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12788,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the currency."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/update-currency.d.ts",
											"qualifiedName": "AdminPostCurrenciesCurrencyReq"
										},
										"name": "AdminPostCurrenciesCurrencyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12789,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/currencies/index.d.ts",
											"qualifiedName": "AdminCurrenciesRes"
										},
										"name": "AdminCurrenciesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12778,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12779,
							"name": "new AdminCurrenciesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12780,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12777,
								"name": "AdminCurrenciesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12778
					]
				},
				{
					"title": "Methods",
					"children": [
						12781,
						12785
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12674,
			"name": "AdminCustomResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests custom API Routes. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.custom`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 12678,
					"name": "get",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12679,
							"name": "get",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`GET`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TQuery`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted query parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostsResponse = {\nposts: Post[]\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.get<Record<string, any>, PostsResponse>(\n  \"/blog/posts\"\n)\n.then(({ posts }) => {\n  console.log(posts.length);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 12680,
									"name": "TQuery",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 12681,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 12682,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12683,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Query path parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 12680,
										"name": "TQuery",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 12684,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 12685,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 12681,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12686,
					"name": "post",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12687,
							"name": "post",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`POST`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a tuple of type parameters: the first "
									},
									{
										"kind": "code",
										"text": "`TPayload`"
									},
									{
										"kind": "text",
										"text": " is the type of accepted body parameters,\nwhich defaults to "
									},
									{
										"kind": "code",
										"text": "`Record<string, any>`"
									},
									{
										"kind": "text",
										"text": "; the second "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " is the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\ntype PostRequest = {\n  title: string\n}\ntype PostResponse = {\n  post: Post\n}\n// must be previously logged in or use api token\nmedusa.admin.custom.post<PostRequest, PostResponse>(\n  \"/blog/posts\",\n  {\n    title: \"My post\",\n  }\n)\n.then(({ post }) => {\n  console.log(post.id);\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 12688,
									"name": "TPayload",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 12689,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 12690,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12691,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Body parameters to pass in the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 12688,
										"name": "TPayload",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 12692,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 12693,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 12689,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12694,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12695,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Send a "
									},
									{
										"kind": "code",
										"text": "`DELETE`"
									},
									{
										"kind": "text",
										"text": " request to a custom API Route. The method accepts a type parameters "
									},
									{
										"kind": "code",
										"text": "`TResponse`"
									},
									{
										"kind": "text",
										"text": " indicating the type of response, which defaults to "
									},
									{
										"kind": "code",
										"text": "`any`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The response data."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.custom.delete(\n  `/blog/posts/${postId}`\n)\n.then(() => {\n  // deleted successfully\n})\n```"
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 12696,
									"name": "TResponse",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"parameters": [
								{
									"id": 12697,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The path of the custom API Route."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12698,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "RequestOptions"
										},
										"name": "RequestOptions",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 12699,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 12696,
										"name": "TResponse",
										"package": "@medusajs/medusa-js",
										"refersToTypeParameter": true
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12675,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12676,
							"name": "new AdminCustomResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12677,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12674,
								"name": "AdminCustomResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12675
					]
				},
				{
					"title": "Methods",
					"children": [
						12678,
						12686,
						12694
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12790,
			"name": "AdminCustomerGroupsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customerGroups`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nCustomer Groups can be used to organize customers that share similar data or attributes into dedicated groups.\nThis can be useful for different purposes such as setting a different price for a specific customer group.\n\nRelated Guide: [How to manage customer groups](https://docs.medusajs.com/modules/customers/admin/manage-customer-groups)."
					}
				]
			},
			"children": [
				{
					"id": 12794,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12795,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.create({\n  name: \"VIP\"\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12796,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the customer group to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/create-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsReq"
										},
										"name": "AdminPostCustomerGroupsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12797,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12798,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12799,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.retrieve(customerGroupId)\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12800,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12801,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/get-customer-group.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsGroupParams"
										},
										"name": "AdminGetCustomerGroupsGroupParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12802,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12803,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12804,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer group's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12805,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12806,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/update-customer-group.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupReq"
										},
										"name": "AdminPostCustomerGroupsGroupReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12807,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12808,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12809,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a customer group. This doesn't delete the customers associated with the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.delete(customerGroupId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12810,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12811,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12812,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12813,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customer groups. The customer groups can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": ". The customer groups can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customer groups with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list()\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customer groups:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  expand: \"customers\"\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.list({\n  \"expand\": \"customers\",\n  limit,\n  offset\n})\n.then(({ customer_groups, limit, offset, count }) => {\n  console.log(customer_groups.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12814,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customer groups."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/list-customer-groups.d.ts",
											"qualifiedName": "AdminGetCustomerGroupsParams"
										},
										"name": "AdminGetCustomerGroupsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12815,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsListRes"
										},
										"name": "AdminCustomerGroupsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12816,
					"name": "addCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12817,
							"name": "addCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of customers to a customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12818,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12819,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to add to the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/add-customers-batch.d.ts",
											"qualifiedName": "AdminPostCustomerGroupsGroupCustomersBatchReq"
										},
										"name": "AdminPostCustomerGroupsGroupCustomersBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12820,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12821,
					"name": "removeCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12822,
							"name": "removeCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of customers from a customer group. This doesn't delete the customer, only the association between the customer and the customer group."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer group's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.removeCustomers(customerGroupId, {\n  customer_ids: [\n    {\n      id: customerId\n    }\n  ]\n})\n.then(({ customer_group }) => {\n  console.log(customer_group.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12823,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12824,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customers to remove from the customer group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/delete-customers-batch.d.ts",
											"qualifiedName": "AdminDeleteCustomerGroupsGroupCustomerBatchReq"
										},
										"name": "AdminDeleteCustomerGroupsGroupCustomerBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12825,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customer-groups/index.d.ts",
											"qualifiedName": "AdminCustomerGroupsRes"
										},
										"name": "AdminCustomerGroupsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12826,
					"name": "listCustomers",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12827,
							"name": "listCustomers",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of customers in a customer group. The customers can be filtered by the "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " field. The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customerGroups.listCustomers(customerGroupId)\n.then(({ customers }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12828,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the customer group."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12829,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12830,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12791,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12792,
							"name": "new AdminCustomerGroupsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12793,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12790,
								"name": "AdminCustomerGroupsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12791
					]
				},
				{
					"title": "Methods",
					"children": [
						12794,
						12798,
						12803,
						12808,
						12812,
						12816,
						12821,
						12826
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12831,
			"name": "AdminCustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nCustomers can either be created when they register through the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CustomersResource.create",
						"target": 12387
					},
					{
						"kind": "text",
						"text": " method, or created by the admin using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "create",
						"target": 12835,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method.\n\nRelated Guide: [How to manage customers](https://docs.medusajs.com/modules/customers/admin/manage-customers)."
					}
				]
			},
			"children": [
				{
					"id": 12835,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12836,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a customer as an admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.create({\n  email: \"user@example.com\",\n  first_name: \"Caterina\",\n  last_name: \"Yost\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12837,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/create-customer.d.ts",
											"qualifiedName": "AdminPostCustomersReq"
										},
										"name": "AdminPostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12838,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12839,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12840,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a customer's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.update(customerId, {\n  first_name: \"Dolly\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12841,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12842,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/update-customer.d.ts",
											"qualifiedName": "AdminPostCustomersCustomerReq"
										},
										"name": "AdminPostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12843,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12844,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12845,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of a customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.retrieve(customerId)\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12846,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The customer's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12847,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersRes"
										},
										"name": "AdminCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12848,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12849,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Customers. The customers can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`groups`"
									},
									{
										"kind": "text",
										"text": ". The customers can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of customers with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list()\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the customers:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\"\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.customers.list({\n  expand: \"billing_address\",\n  limit,\n  offset\n})\n.then(({ customers, limit, offset, count }) => {\n  console.log(customers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12850,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved customers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/list-customers.d.ts",
											"qualifiedName": "AdminGetCustomersParams"
										},
										"name": "AdminGetCustomersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12851,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/customers/index.d.ts",
											"qualifiedName": "AdminCustomersListRes"
										},
										"name": "AdminCustomersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12832,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12833,
							"name": "new AdminCustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12834,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12831,
								"name": "AdminCustomersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12832
					]
				},
				{
					"title": "Methods",
					"children": [
						12835,
						12839,
						12844,
						12848
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12852,
			"name": "AdminDiscountsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.discounts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create discounts with conditions and rules, providing them with advanced settings for variety of cases.\nThe methods in this class can be used to manage discounts, their conditions, resources, and more.\n\nRelated Guide: [How to manage discounts](https://docs.medusajs.com/modules/discounts/admin/manage-discounts)."
					}
				]
			},
			"children": [
				{
					"id": 12856,
					"name": "addRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12857,
							"name": "addRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a Region to the list of Regions a Discount can be used in."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12858,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12859,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to add."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12860,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12861,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12862,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount with a given set of rules that defines how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.create({\n  code: \"TEST\",\n  rule: {\n    type: DiscountRuleType.FIXED,\n    value: 10,\n    allocation: AllocationType.ITEM\n  },\n  regions: [\"reg_XXXXXXXX\"],\n  is_dynamic: false,\n  is_disabled: false\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12863,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsReq"
										},
										"name": "AdminPostDiscountsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12864,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12865,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12866,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount with a given set of rules that define how the discount is applied."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.update(discountId, {\n  code: \"TEST\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12867,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12868,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-discount.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountReq"
										},
										"name": "AdminPostDiscountsDiscountReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12869,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12870,
					"name": "createDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12871,
							"name": "createDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a dynamic unique code that can map to a parent discount. This is useful if you want to automatically generate codes with the same rules and conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createDynamicCode(discountId, {\n  code: \"TEST\",\n  usage_limit: 1\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12872,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12873,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The dynamic code to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-dynamic-code.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountDynamicCodesReq"
										},
										"name": "AdminPostDiscountsDiscountDynamicCodesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12874,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12875,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12876,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount. Deleting the discount will make it unavailable for customers to use."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.delete(discountId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12877,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12878,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12879,
					"name": "deleteDynamicCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12880,
							"name": "deleteDynamicCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a dynamic code from a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteDynamicCode(discountId, code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12881,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12882,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the dynamic code to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12883,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12884,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12885,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieve(discountId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12886,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12887,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-discount.d.ts",
											"qualifiedName": "AdminGetDiscountParams"
										},
										"name": "AdminGetDiscountParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12888,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12889,
					"name": "retrieveByCode",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12890,
							"name": "retrieveByCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a discount's details by its discount code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.retrieveByCode(code)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12891,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12892,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12893,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12894,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Discounts. The discounts can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`rule`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_dynamic`"
									},
									{
										"kind": "text",
										"text": ". The discounts can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of discounts with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list()\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the discounts:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\"\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.list({\n  expand: \"rule\",\n  limit,\n  offset\n})\n.then(({ discounts, limit, offset, count }) => {\n  console.log(discounts.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12895,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved discounts."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/list-discounts.d.ts",
											"qualifiedName": "AdminGetDiscountsParams"
										},
										"name": "AdminGetDiscountsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12896,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsListRes"
										},
										"name": "AdminDiscountsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12897,
					"name": "removeRegion",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12898,
							"name": "removeRegion",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Region from the list of Regions that a Discount can be used in. This does not delete a region, only the association between it and the discount."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.removeRegion(discountId, regionId)\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12899,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12900,
									"name": "regionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the region to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12901,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12902,
					"name": "createCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12903,
							"name": "createCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To create a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nimport { DiscountConditionOperator } from \"@medusajs/medusa\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.createCondition(discountId, {\n  operator: DiscountConditionOperator.IN,\n  products: [productId]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12904,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12905,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount condition to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditions"
										},
										"name": "AdminPostDiscountsDiscountConditions",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12906,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/create-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 12907,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12908,
					"name": "updateCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12909,
							"name": "updateCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a discount condition. Only one of "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_types`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_collections`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`product_tags`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`customer_groups`"
									},
									{
										"kind": "text",
										"text": " should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter,\nbased on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": " field should be provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To update a condition in a discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved as part of the response:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.updateCondition(discountId, conditionId, {\n  products: [\n    productId\n  ]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12910,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12911,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12912,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsCondition"
										},
										"name": "AdminPostDiscountsDiscountConditionsCondition",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12913,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/update-condition.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									},
									"defaultValue": "{}"
								},
								{
									"id": 12914,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12915,
					"name": "deleteCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12916,
							"name": "deleteCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a discount condition. This doesn't delete resources associated to the discount condition."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteCondition(discountId, conditionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12917,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The discount's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12918,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12919,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12920,
					"name": "getCondition",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12921,
							"name": "getCondition",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Discount Condition's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the discount condition details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a discount condition by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId)\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.getCondition(discountId, conditionId, {\n  expand: \"discount_rule\"\n})\n.then(({ discount_condition }) => {\n  console.log(discount_condition.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12922,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount that the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12923,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12924,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/get-condition.d.ts",
											"qualifiedName": "AdminGetDiscountsDiscountConditionsConditionParams"
										},
										"name": "AdminGetDiscountsDiscountConditionsConditionParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12925,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountConditionsRes"
										},
										"name": "AdminDiscountConditionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12926,
					"name": "addConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12927,
							"name": "addConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a batch of resources to a discount condition. The type of resource depends on the type of discount condition. For example, if the discount condition's type is "
									},
									{
										"kind": "code",
										"text": "`products`"
									},
									{
										"kind": "text",
										"text": ",\nthe resources being added should be products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add resources to a discount condition:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations to include in the returned discount:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n}, {\n  expand: \"rule\"\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12928,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12929,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12930,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to add to the discount condition."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12931,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved discount."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/add-resources-to-condition-batch.d.ts",
											"qualifiedName": "AdminPostDiscountsDiscountConditionsConditionBatchParams"
										},
										"name": "AdminPostDiscountsDiscountConditionsConditionBatchParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12932,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12933,
					"name": "deleteConditionResourceBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12934,
							"name": "deleteConditionResourceBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a batch of resources from a discount condition. This will only remove the association between the resource and the discount condition, not the resource itself."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the discount."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.discounts.deleteConditionResourceBatch(discountId, conditionId, {\n  resources: [{ id: itemId }]\n})\n.then(({ discount }) => {\n  console.log(discount.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12935,
									"name": "discountId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount the condition belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12936,
									"name": "conditionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the discount condition."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12937,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The resources to remove."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/delete-resources-from-condition-batch.d.ts",
											"qualifiedName": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq"
										},
										"name": "AdminDeleteDiscountsDiscountConditionsConditionBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12938,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/discounts/index.d.ts",
											"qualifiedName": "AdminDiscountsRes"
										},
										"name": "AdminDiscountsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12853,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12854,
							"name": "new AdminDiscountsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12855,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12852,
								"name": "AdminDiscountsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12853
					]
				},
				{
					"title": "Methods",
					"children": [
						12856,
						12861,
						12865,
						12870,
						12875,
						12879,
						12884,
						12889,
						12893,
						12897,
						12902,
						12908,
						12915,
						12920,
						12926,
						12933
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12939,
			"name": "AdminDraftOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.draftOrders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA draft order is an order created manually by the admin. It allows admins to create orders without direct involvement from the customer.\n\nRelated Guide: [How to manage draft orders](https://docs.medusajs.com/modules/orders/admin/manage-draft-orders)."
					}
				]
			},
			"children": [
				{
					"id": 12943,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12944,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Draft Order. A draft order is not transformed into an order until payment is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.create({\n  email: \"user@example.com\",\n  region_id,\n  items: [\n    {\n      quantity: 1\n    }\n  ],\n  shipping_methods: [\n    {\n      option_id\n    }\n  ],\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12945,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The draft order to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersReq"
										},
										"name": "AdminPostDraftOrdersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12946,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12947,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12948,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Line Item in the Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.addLineItem(draftOrderId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12949,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12950,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/create-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12951,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12952,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12953,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.delete(draftOrderId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12954,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12955,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12956,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12957,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Line Item from a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.removeLineItem(draftOrderId, itemId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12958,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12959,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete from the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12960,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12961,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12962,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.retrieve(draftOrderId)\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12963,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12964,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12965,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12966,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an list of Draft Orders. The draft orders can be filtered by parameters such as "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The draft orders can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of draft orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list draft orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list()\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.list({\n  limit,\n  offset\n})\n.then(({ draft_orders, limit, offset, count }) => {\n  console.log(draft_orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12967,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved draft orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/list-draft-orders.d.ts",
											"qualifiedName": "AdminGetDraftOrdersParams"
										},
										"name": "AdminGetDraftOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12968,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersListRes"
										},
										"name": "AdminDraftOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12969,
					"name": "markPaid",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12970,
							"name": "markPaid",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture the draft order's payment. This will also set the draft order's status to "
									},
									{
										"kind": "code",
										"text": "`completed`"
									},
									{
										"kind": "text",
										"text": " and create an order from the draft order. The payment is captured through Medusa's system payment,\nwhich is manual payment that isn't integrated with any third-party payment provider. It is assumed that the payment capturing is handled manually by the admin."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.markPaid(draftOrderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12971,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12972,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes"
										},
										"name": "AdminPostDraftOrdersDraftOrderRegisterPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12973,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12974,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Draft Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.update(draftOrderId, {\n  email: \"user@example.com\"\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12975,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12976,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the draft order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-draft-order.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12977,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12978,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12979,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Line Item in a Draft Order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the draft order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.draftOrders.updateLineItem(draftOrderId, lineId, {\n  quantity: 1\n})\n.then(({ draft_order }) => {\n  console.log(draft_order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12980,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the draft order that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12981,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12982,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/update-line-item.d.ts",
											"qualifiedName": "AdminPostDraftOrdersDraftOrderLineItemsItemReq"
										},
										"name": "AdminPostDraftOrdersDraftOrderLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12983,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/draft-orders/index.d.ts",
											"qualifiedName": "AdminDraftOrdersRes"
										},
										"name": "AdminDraftOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12940,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12941,
							"name": "new AdminDraftOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12942,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12939,
								"name": "AdminDraftOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12940
					]
				},
				{
					"title": "Methods",
					"children": [
						12943,
						12947,
						12952,
						12956,
						12961,
						12965,
						12969,
						12973,
						12978
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12984,
			"name": "AdminGiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nAdmins can create gift cards and send them directly to customers, specifying options like their balance, region, and more.\nThese gift cards are different than the saleable gift cards in a store, which are created and managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 13381
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-custom-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 12988,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12989,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a gift card that can redeemed by its unique code. The Gift Card is only valid within one region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.create({\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12990,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The gift card to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/create-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsReq"
										},
										"name": "AdminPostGiftCardsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12991,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12992,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12993,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.update(giftCardId, {\n  region_id\n})\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12994,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12995,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the gift card."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/update-gift-card.d.ts",
											"qualifiedName": "AdminPostGiftCardsGiftCardReq"
										},
										"name": "AdminPostGiftCardsGiftCardReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12996,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12997,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12998,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a gift card. Once deleted, it can't be used by customers."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.delete(giftCardId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12999,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13000,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13001,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13002,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a gift card's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the gift card's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.retrieve(giftCardId)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13003,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13004,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsRes"
										},
										"name": "AdminGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13005,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13006,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of gift cards. The gift cards can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The gift cards can also paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of gift cards with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list gift cards:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list()\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.giftCards.list({\n  limit,\n  offset\n})\n.then(({ gift_cards, limit, offset, count }) => {\n  console.log(gift_cards.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13007,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved gift cards."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/list-gift-cards.d.ts",
											"qualifiedName": "AdminGetGiftCardsParams"
										},
										"name": "AdminGetGiftCardsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13008,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/gift-cards/index.d.ts",
											"qualifiedName": "AdminGiftCardsListRes"
										},
										"name": "AdminGiftCardsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12985,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12986,
							"name": "new AdminGiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12987,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12984,
								"name": "AdminGiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12985
					]
				},
				{
					"title": "Methods",
					"children": [
						12988,
						12992,
						12997,
						13001,
						13005
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12632,
			"name": "Admin",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class includes properties used to send requests to the [Admin API Routes](https://docs.medusajs.com/api/admin). All its properties\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 12636,
					"name": "auth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminAuthResource",
								"target": 12700,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/api/admin#auth)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12700,
						"name": "AdminAuthResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12637,
					"name": "batchJobs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminBatchJobsResource",
								"target": 12718,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/api/admin#batch-jobs)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12718,
						"name": "AdminBatchJobsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12638,
					"name": "customers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomersResource",
								"target": 12831,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/api/admin#customers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12831,
						"name": "AdminCustomersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12639,
					"name": "customerGroups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomerGroupsResource",
								"target": 12790,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/api/admin#customer-groups)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12790,
						"name": "AdminCustomerGroupsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12640,
					"name": "discounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDiscountsResource",
								"target": 12852,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/api/admin#discounts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12852,
						"name": "AdminDiscountsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12641,
					"name": "currencies",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCurrenciesResource",
								"target": 12777,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/api/admin#currencies_getcurrencies)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12777,
						"name": "AdminCurrenciesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12642,
					"name": "collections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCollectionsResource",
								"target": 12742,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/api/admin#product-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12742,
						"name": "AdminCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12643,
					"name": "draftOrders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminDraftOrdersResource",
								"target": 12939,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/api/admin#draft-orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12939,
						"name": "AdminDraftOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12644,
					"name": "giftCards",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminGiftCardsResource",
								"target": 12984,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/api/admin#gift-cards)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12984,
						"name": "AdminGiftCardsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12645,
					"name": "invites",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInvitesResource",
								"target": 13060,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13060,
						"name": "AdminInvitesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12646,
					"name": "inventoryItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminInventoryItemsResource",
								"target": 13009,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13009,
						"name": "AdminInventoryItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12647,
					"name": "notes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotesResource",
								"target": 13083,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13083,
						"name": "AdminNotesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12648,
					"name": "priceLists",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPriceListResource",
								"target": 13311,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13311,
						"name": "AdminPriceListResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12649,
					"name": "products",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductsResource",
								"target": 13381,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13381,
						"name": "AdminProductsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12650,
					"name": "productTags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTagsResource",
								"target": 13366,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13366,
						"name": "AdminProductTagsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12651,
					"name": "productTypes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductTypesResource",
								"target": 13373,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13373,
						"name": "AdminProductTypesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12652,
					"name": "users",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUsersResource",
								"target": 13867,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13867,
						"name": "AdminUsersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12653,
					"name": "returns",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnsResource",
								"target": 13606,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13606,
						"name": "AdminReturnsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12654,
					"name": "orders",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrdersResource",
								"target": 13121,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13121,
						"name": "AdminOrdersResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12655,
					"name": "orderEdits",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminOrderEditsResource",
								"target": 13252,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13252,
						"name": "AdminOrderEditsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12656,
					"name": "publishableApiKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPublishableApiKeyResource",
								"target": 13454,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13454,
						"name": "AdminPublishableApiKeyResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12657,
					"name": "returnReasons",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReturnReasonsResource",
								"target": 13582,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13582,
						"name": "AdminReturnReasonsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12658,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@props",
								"content": [
									{
										"kind": "text",
										"text": "variants - An instance of "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "AdminVariantsResource",
										"target": 13900,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants)."
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13900,
						"name": "AdminVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12659,
					"name": "salesChannels",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSalesChannelsResource",
								"target": 13623,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13623,
						"name": "AdminSalesChannelsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12660,
					"name": "swaps",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminSwapsResource",
								"target": 13767,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13767,
						"name": "AdminSwapsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12661,
					"name": "shippingProfiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingProfilesResource",
								"target": 13693,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13693,
						"name": "AdminShippingProfilesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12662,
					"name": "stockLocations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStockLocationsResource",
								"target": 13717,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13717,
						"name": "AdminStockLocationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12663,
					"name": "store",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminStoresResource",
								"target": 13742,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13742,
						"name": "AdminStoresResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12664,
					"name": "shippingOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminShippingOptionsResource",
								"target": 13668,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13668,
						"name": "AdminShippingOptionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12665,
					"name": "regions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminRegionsResource",
								"target": 13498,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13498,
						"name": "AdminRegionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12666,
					"name": "reservations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminReservationsResource",
								"target": 13557,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13557,
						"name": "AdminReservationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12667,
					"name": "notifications",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminNotificationsResource",
								"target": 13108,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13108,
						"name": "AdminNotificationsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12668,
					"name": "taxRates",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminTaxRatesResource",
								"target": 13779,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13779,
						"name": "AdminTaxRatesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12669,
					"name": "uploads",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminUploadsResource",
								"target": 13843,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13843,
						"name": "AdminUploadsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12670,
					"name": "paymentCollections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentCollectionsResource",
								"target": 13917,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13917,
						"name": "AdminPaymentCollectionsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12671,
					"name": "payments",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminPaymentsResource",
								"target": 13939,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13939,
						"name": "AdminPaymentsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12672,
					"name": "productCategories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminProductCategoriesResource",
								"target": 13957,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13957,
						"name": "AdminProductCategoriesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12673,
					"name": "custom",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AdminCustomResource",
								"target": 12674,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to custom API Routes."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12674,
						"name": "AdminCustomResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12633,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12634,
							"name": "new Admin",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12635,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12632,
								"name": "Admin",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12633
					]
				},
				{
					"title": "Properties",
					"children": [
						12636,
						12637,
						12638,
						12639,
						12640,
						12641,
						12642,
						12643,
						12644,
						12645,
						12646,
						12647,
						12648,
						12649,
						12650,
						12651,
						12652,
						12653,
						12654,
						12655,
						12656,
						12657,
						12658,
						12659,
						12660,
						12661,
						12662,
						12663,
						12664,
						12665,
						12666,
						12667,
						12668,
						12669,
						12670,
						12671,
						12672,
						12673
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13009,
			"name": "AdminInventoryItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/api/admin#inventory-items). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend. All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.inventoryItems`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nInventory items, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), can be used to manage the inventory of saleable items in your store.\n\nRelated Guide: [How to manage inventory items](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-inventory-items)."
					}
				]
			},
			"children": [
				{
					"id": 13013,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13014,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.retrieve(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13015,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13016,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations applied on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/get-inventory-item.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemParams"
										},
										"name": "AdminGetInventoryItemsItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13017,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13018,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13019,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Inventory Item's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.update(inventoryItemId, {\n  origin_country: \"US\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13020,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13021,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemReq"
										},
										"name": "AdminPostInventoryItemsInventoryItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13022,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsInventoryItemParams"
										},
										"name": "AdminPostInventoryItemsInventoryItemParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13023,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13024,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13025,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an Inventory Item. This does not delete the associated product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.delete(inventoryItemId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13026,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13027,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13028,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13029,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an Inventory Item for a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.create({\n  variant_id: \"variant_123\",\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13030,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The inventory item to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsReq"
										},
										"name": "AdminPostInventoryItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13031,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-inventory-item.d.ts",
											"qualifiedName": "AdminPostInventoryItemsParams"
										},
										"name": "AdminPostInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13032,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13033,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13034,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory items. The inventory items can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe inventory items can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of inventory items with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list inventory items:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list()\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.list({\n  limit,\n  offset\n})\n.then(({ inventory_items, count, offset, limit }) => {\n  console.log(inventory_items.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13035,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved inventory items."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-inventory-items.d.ts",
											"qualifiedName": "AdminGetInventoryItemsParams"
										},
										"name": "AdminGetInventoryItemsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13036,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes"
										},
										"name": "AdminInventoryItemsListWithVariantsAndLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13037,
					"name": "updateLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13038,
							"name": "updateLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a location level's details for a given inventory item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.updateLocationLevel(inventoryItemId, locationId, {\n  stocked_quantity: 15,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13039,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13040,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13041,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the location level."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13042,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/update-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsLevelParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsLevelParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13043,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13044,
					"name": "createLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13045,
							"name": "createLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Location Level for a given Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.createLocationLevel(inventoryItemId, {\n  location_id: \"sloc_123\",\n  stocked_quantity: 10,\n})\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13046,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location level belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13047,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The location level to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsReq"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13048,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the returned inventory item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/create-location-level.d.ts",
											"qualifiedName": "AdminPostInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminPostInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13049,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13050,
					"name": "deleteLocationLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13051,
							"name": "deleteLocationLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a location level of an Inventory Item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the inventory item's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.deleteLocationLevel(inventoryItemId, locationId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13052,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13053,
									"name": "locationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the location level to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13054,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsRes"
										},
										"name": "AdminInventoryItemsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13055,
					"name": "listLocationLevels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13056,
							"name": "listLocationLevels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of inventory levels of an inventory item. The inventory levels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The inventory item's details and list of location levels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.inventoryItems.listLocationLevels(inventoryItemId)\n.then(({ inventory_item }) => {\n  console.log(inventory_item.location_levels);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13057,
									"name": "inventoryItemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the inventory item that the location levels belong to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13058,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved location levels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/list-location-levels.d.ts",
											"qualifiedName": "AdminGetInventoryItemsItemLocationLevelsParams"
										},
										"name": "AdminGetInventoryItemsItemLocationLevelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13059,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/inventory-items/index.d.ts",
											"qualifiedName": "AdminInventoryItemsLocationLevelsRes"
										},
										"name": "AdminInventoryItemsLocationLevelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13010,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13011,
							"name": "new AdminInventoryItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13012,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13009,
								"name": "AdminInventoryItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13010
					]
				},
				{
					"title": "Methods",
					"children": [
						13013,
						13018,
						13024,
						13028,
						13033,
						13037,
						13044,
						13050,
						13055
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13060,
			"name": "AdminInvitesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/api/admin#invites). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.invites`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can invite new users to manage their team. This would allow new users to authenticate as admins and perform admin functionalities.\n\nRelated Guide: [How to manage invites](https://docs.medusajs.com/modules/users/admin/manage-invites)."
					}
				]
			},
			"children": [
				{
					"id": 13064,
					"name": "accept",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13065,
							"name": "accept",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Accept an Invite. This will also delete the invite and create a new user that can log in and perform admin functionalities. \nThe user will have the email associated with the invite, and the password provided in the "
									},
									{
										"kind": "code",
										"text": "`payload`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is accepted successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.accept({\n  token,\n  user: {\n    first_name: \"Brigitte\",\n    last_name: \"Collier\",\n    password: \"supersecret\"\n  }\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13066,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user accepting the invite."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/accept-invite.d.ts",
											"qualifiedName": "AdminPostInvitesInviteAcceptReq"
										},
										"name": "AdminPostInvitesInviteAcceptReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13067,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13068,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13069,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an invite. This will generate a token associated with the invite and trigger an "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event. If you have a Notification Provider installed that handles this\nevent, a notification should be sent to the email associated with the invite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.create({\n  user: \"user@example.com\",\n  role: \"admin\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13070,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminPostInvitesPayload"
										},
										"name": "AdminPostInvitesPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 13071,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13072,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13073,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an invite. Only invites that weren't accepted can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.delete(inviteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13074,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13075,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13076,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13077,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of invites."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of invites."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.list()\n.then(({ invites }) => {\n  console.log(invites.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13078,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/invites/index.d.ts",
											"qualifiedName": "AdminListInvitesRes"
										},
										"name": "AdminListInvitesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13079,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13080,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend an invite. This renews the expiry date by seven days and generates a new token for the invite. It also triggers the "
									},
									{
										"kind": "code",
										"text": "`invite.created`"
									},
									{
										"kind": "text",
										"text": " event, \nso if you have a Notification Provider installed that handles this event, a notification should be sent to the email associated with the \ninvite to allow them to accept the invite."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the invite is resent successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.invites.resend(inviteId)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13081,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The invite's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13082,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13061,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13062,
							"name": "new AdminInvitesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13063,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13060,
								"name": "AdminInvitesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13061
					]
				},
				{
					"title": "Methods",
					"children": [
						13064,
						13068,
						13072,
						13076,
						13079
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13083,
			"name": "AdminNotesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Note API Routes](https://docs.medusajs.com/api/admin#notes). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nNotes are created by admins and can be associated with any resource. For example, an admin can add a note to an order for additional details or remarks."
					}
				]
			},
			"children": [
				{
					"id": 13087,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13088,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Note which can be associated with any resource."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.create({\n  resource_id,\n  resource_type: \"order\",\n  value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13089,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/create-note.d.ts",
											"qualifiedName": "AdminPostNotesReq"
										},
										"name": "AdminPostNotesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13090,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13091,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13092,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.update(noteId, {\n value: \"We delivered this order\"\n})\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13093,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13094,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the note."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/update-note.d.ts",
											"qualifiedName": "AdminPostNotesNoteReq"
										},
										"name": "AdminPostNotesNoteReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13095,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13096,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13097,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Note."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.delete(noteId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13098,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13099,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13100,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13101,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a note's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the note's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.retrieve(noteId)\n.then(({ note }) => {\n  console.log(note.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13102,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The note's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13103,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesRes"
										},
										"name": "AdminNotesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13104,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13105,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notes. The notes can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`resource_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The notes can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notes with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notes:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list()\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notes.list({\n  limit,\n  offset\n})\n.then(({ notes, limit, offset, count }) => {\n  console.log(notes.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13106,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on retrieved notes."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/list-notes.d.ts",
											"qualifiedName": "AdminGetNotesParams"
										},
										"name": "AdminGetNotesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13107,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notes/index.d.ts",
											"qualifiedName": "AdminNotesListRes"
										},
										"name": "AdminNotesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13084,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13085,
							"name": "new AdminNotesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13086,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13083,
								"name": "AdminNotesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13084
					]
				},
				{
					"title": "Methods",
					"children": [
						13087,
						13091,
						13096,
						13100,
						13104
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13108,
			"name": "AdminNotificationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/api/admin#notifications). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.notifications`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nNotifications are sent to customers to inform them of new updates. For example, a notification can be sent to the customer when their order is place or its state is updated.\nThe notification's type, such as an email or SMS, is determined by the notification provider installed on the Medusa backend."
					}
				]
			},
			"children": [
				{
					"id": 13112,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13113,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of notifications. The notifications can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`event_name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`resource_type`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe notifications can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of notifications with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list()\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the notifications:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\"\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.list({\n  expand: \"provider\",\n  limit,\n  offset\n})\n.then(({ notifications }) => {\n  console.log(notifications.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13114,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved notifications."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/list-notifications.d.ts",
											"qualifiedName": "AdminGetNotificationsParams"
										},
										"name": "AdminGetNotificationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13115,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsListRes"
										},
										"name": "AdminNotificationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13116,
					"name": "resend",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13117,
							"name": "resend",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resend a previously sent notifications, with the same data but optionally to a different address."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the notification's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.notifications.resend(notificationId)\n.then(({ notification }) => {\n  console.log(notification.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13118,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The notification's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13119,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details necessary to resend the notification."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/resend-notification.d.ts",
											"qualifiedName": "AdminPostNotificationsNotificationResendReq"
										},
										"name": "AdminPostNotificationsNotificationResendReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13120,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/notifications/index.d.ts",
											"qualifiedName": "AdminNotificationsRes"
										},
										"name": "AdminNotificationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13109,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13110,
							"name": "new AdminNotificationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13111,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13108,
								"name": "AdminNotificationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13109
					]
				},
				{
					"title": "Methods",
					"children": [
						13112,
						13116
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13252,
			"name": "AdminOrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/api/admin#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nAn admin can edit an order to remove, add, or update an item's quantity. When an admin edits an order, they're stored as an "
					},
					{
						"kind": "code",
						"text": "`OrderEdit`"
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to edit an order](https://docs.medusajs.com/modules/orders/admin/edit-order)."
					}
				]
			},
			"children": [
				{
					"id": 13256,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13257,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order edit by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.retrieve(orderEditId, {\n  expand: \"order\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13258,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13259,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/get-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsOrderEditParams"
										},
										"name": "GetOrderEditsOrderEditParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13260,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13261,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13262,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of order edits. The order edits can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`order_id`"
									},
									{
										"kind": "text",
										"text": " passed to the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order edits can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of order edits with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list()\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the order edits:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\"\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.list({\n  expand: \"order\",\n  limit,\n  offset\n})\n.then(({ order_edits, count, limit, offset }) => {\n  console.log(order_edits.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13263,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to retrieved order edits."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/list-order-edit.d.ts",
											"qualifiedName": "GetOrderEditsParams"
										},
										"name": "GetOrderEditsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13264,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsListRes"
										},
										"name": "AdminOrderEditsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13265,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13266,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.create({ orderId })\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13267,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order edit to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/create-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsReq"
										},
										"name": "AdminPostOrderEditsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13268,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13269,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13270,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.update(orderEditId, {\n  internal_note: \"internal reason XY\"\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13271,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13272,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in an order edit."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit.d.ts",
											"qualifiedName": "AdminPostOrderEditsOrderEditReq"
										},
										"name": "AdminPostOrderEditsOrderEditReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13273,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13274,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13275,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an order edit. Only order edits that have the status "
									},
									{
										"kind": "code",
										"text": "`created`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.delete(orderEditId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13276,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13277,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13278,
					"name": "addLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13279,
							"name": "addLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates adding an item in the original order. The item will not be added to the original order until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.addLineItem(orderEditId, {\n  variant_id,\n  quantity\n})\n.then(({ order_edit }) => {\n   console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13280,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to add the line item change to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13281,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item change to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/add-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13282,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13283,
					"name": "deleteItemChange",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13284,
							"name": "deleteItemChange",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item change that indicates the addition, deletion, or update of a line item in the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.deleteItemChange(orderEdit_id, itemChangeId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13285,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13286,
									"name": "itemChangeId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13287,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditItemChangeDeleteRes"
										},
										"name": "AdminOrderEditItemChangeDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13288,
					"name": "requestConfirmation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13289,
							"name": "requestConfirmation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request customer confirmation of an order edit. This would emit the event "
									},
									{
										"kind": "code",
										"text": "`order-edit.requested`"
									},
									{
										"kind": "text",
										"text": " which Notification Providers listen to and send\na notification to the customer about the order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.requestConfirmation(orderEditId)\n.then({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13290,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13291,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13292,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13293,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order edit."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.cancel(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13294,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to cancel."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13295,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13296,
					"name": "confirm",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13297,
							"name": "confirm",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Confirm an order edit. This will reflect the changes in the order edit on the associated order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.confirm(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13298,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit to confirm."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13299,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13300,
					"name": "updateLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13301,
							"name": "updateLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create or update a line item change in the order edit that indicates addition, deletion, or update of a line item into an original order. Line item changes\nare only reflected on the original order after the order edit is confirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.updateLineItem(orderEditId, lineItemId, {\n  quantity: 5\n})\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13302,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13303,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to create or update its line item change."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13304,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The creation or update of the line item change."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/update-order-edit-line-item.d.ts",
											"qualifiedName": "AdminPostOrderEditsEditLineItemsLineItemReq"
										},
										"name": "AdminPostOrderEditsEditLineItemsLineItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13305,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13306,
					"name": "removeLineItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13307,
							"name": "removeLineItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a line item change in the order edit that indicates deleting an item in the original order. The item in the original order will not be deleted until the order edit is\nconfirmed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orderEdits.removeLineItem(orderEditId, lineItemId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13308,
									"name": "orderEditId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit that the line item change belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13309,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13310,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/order-edits/index.d.ts",
											"qualifiedName": "AdminOrderEditsRes"
										},
										"name": "AdminOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13253,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13254,
							"name": "new AdminOrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13255,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13252,
								"name": "AdminOrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13253
					]
				},
				{
					"title": "Methods",
					"children": [
						13256,
						13261,
						13265,
						13269,
						13274,
						13278,
						13283,
						13288,
						13292,
						13296,
						13300,
						13306
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13121,
			"name": "AdminOrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Order API Routes](https://docs.medusajs.com/api/admin#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nOrders are purchases made by customers, typically through a storefront using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 12312
					},
					{
						"kind": "text",
						"text": ". Draft orders created by the admin are also transformed to an Order once the payment is captured.\nManaging orders include managing fulfillment, payment, claims, reservations, and more.\n\nRelated Guide: [How to manage orders](https://docs.medusajs.com/modules/orders/admin/manage-orders)."
					}
				]
			},
			"children": [
				{
					"id": 13125,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13126,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.update(orderId, {\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13127,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13128,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-order.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReq"
										},
										"name": "AdminPostOrdersOrderReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13129,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13130,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13131,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.retrieve(orderId, {\n  expand: \"customer\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13132,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13133,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "FindParams"
										},
										"name": "FindParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13134,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13135,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13136,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`display_id`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The order can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the orders:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\"\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.list({\n  expand: \"customers\",\n  limit,\n  offset\n})\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13137,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/list-orders.d.ts",
											"qualifiedName": "AdminGetOrdersParams"
										},
										"name": "AdminGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13138,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersListRes"
										},
										"name": "AdminOrdersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13139,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13140,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete an order and change its status. A canceled order can't be completed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.complete(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13141,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13142,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13143,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13144,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture all the payments associated with an order. The payment of canceled orders can't be captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.capturePayment(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13145,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose payments should be captured."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13146,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13147,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13148,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund an amount for an order. The amount must be less than or equal the "
									},
									{
										"kind": "code",
										"text": "`refundable_amount`"
									},
									{
										"kind": "text",
										"text": " of the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.refundPayment(orderId, {\n  amount: 1000,\n  reason: \"Do not like it\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13149,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order whose customer should be refunded."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13150,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/refund-payment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderRefundsReq"
										},
										"name": "AdminPostOrdersOrderRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13151,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13152,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13153,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment of an Order using the fulfillment provider, and change the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createFulfillment(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13154,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13155,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-fulfillment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13156,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13157,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13158,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelFulfillment(orderId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13159,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13160,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13161,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13162,
					"name": "cancelSwapFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13163,
							"name": "cancelSwapFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwapFulfillment(orderId, swapId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13164,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13165,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the swap the fulfillment belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13166,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13167,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13168,
					"name": "cancelClaimFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13169,
							"name": "cancelClaimFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim's fulfillment and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaimFulfillment(orderId, claimId, fulfillmentId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13170,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13171,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13172,
									"name": "fulfillmentId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13173,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13174,
					"name": "createShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13175,
							"name": "createShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment and mark a fulfillment as shipped. This changes the order's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createShipment(order_id, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13176,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13177,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShipmentReq"
										},
										"name": "AdminPostOrdersOrderShipmentReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13178,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13179,
					"name": "requestReturn",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13180,
							"name": "requestReturn",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Request and create a return for items in an order. If the return shipping method is specified, it will be automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the return under the "
											},
											{
												"kind": "code",
												"text": "`returns`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.requestReturn(orderId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13181,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13182,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/request-return.d.ts",
											"qualifiedName": "AdminPostOrdersOrderReturnsReq"
										},
										"name": "AdminPostOrdersOrderReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13183,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13184,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13185,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel an order and change its status. This will also cancel any associated fulfillments and payments, and it may fail if the payment or fulfillment Provider \nis unable to cancel the payment/fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancel(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13186,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13187,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13188,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13189,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to an order. If another shipping method exists with the same shipping profile, the previous shipping method will be replaced."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.addShippingMethod(orderId, {\n  price: 1000,\n  option_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13190,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13191,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to be added."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/add-shipping-method.d.ts",
											"qualifiedName": "AdminPostOrdersOrderShippingMethodsReq"
										},
										"name": "AdminPostOrdersOrderShippingMethodsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13192,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13193,
					"name": "archive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13194,
							"name": "archive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Archive an order and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.archive(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13195,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13196,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13197,
					"name": "createSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13198,
							"name": "createSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a swap for an order. This includes creating a return that is associated with the swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwap(orderId, {\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.swaps);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13199,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13200,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsReq"
										},
										"name": "AdminPostOrdersOrderSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13201,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13202,
					"name": "cancelSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13203,
							"name": "cancelSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a swap and change its status."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelSwap(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13204,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13205,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13206,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13207,
					"name": "fulfillSwap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13208,
							"name": "fulfillSwap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Swap and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": ". If it requires any additional actions,\nits fulfillment status may change to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillSwap(orderId, swapId, {\n  no_notification: true,\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13209,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13210,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13211,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-swap.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13212,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13213,
					"name": "createSwapShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13214,
							"name": "createSwapShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for a swap and mark its fulfillment as shipped. This changes the swap's fulfillment status to either "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on\nwhether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createSwapShipment(orderId, swapId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13215,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13216,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13217,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-swap-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderSwapsSwapShipmentsReq"
										},
										"name": "AdminPostOrdersOrderSwapsSwapShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13218,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13219,
					"name": "processSwapPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13220,
							"name": "processSwapPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Process a swap's payment either by refunding or issuing a payment. This depends on the "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " of the swap. If "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is negative, the amount is refunded.\nIf "
									},
									{
										"kind": "code",
										"text": "`difference_due`"
									},
									{
										"kind": "text",
										"text": " is positive, the amount is captured."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`swaps`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.processSwapPayment(orderId, swapId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13221,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the swap belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13222,
									"name": "swapId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13223,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13224,
					"name": "createClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13225,
							"name": "createClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a claim for an order. If a return shipping method is specified, a return will also be created and associated with the claim. If the claim's type is "
									},
									{
										"kind": "code",
										"text": "`refund`"
									},
									{
										"kind": "text",
										"text": ",\nthe refund is processed as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claim under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaim(orderId, {\n  type: 'refund',\n  claim_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13226,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13227,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsReq"
										},
										"name": "AdminPostOrdersOrderClaimsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13228,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13229,
					"name": "cancelClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13230,
							"name": "cancelClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Cancel a claim and change its status. A claim can't be canceled if it has a refund, if its fulfillments haven't been canceled, of if its associated return hasn't been canceled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.cancelClaim(orderId, claimId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13231,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13232,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13233,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13234,
					"name": "updateClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13235,
							"name": "updateClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a claim's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the claims under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.updateClaim(orderId, claimId, {\n  no_notification: true\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13236,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13237,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13238,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/update-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13239,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13240,
					"name": "fulfillClaim",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13241,
							"name": "fulfillClaim",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Fulfillment for a Claim, and change its fulfillment status to "
									},
									{
										"kind": "code",
										"text": "`partially_fulfilled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfilled`"
									},
									{
										"kind": "text",
										"text": " depending on whether all the items were fulfilled.\nIt may also change the status to "
									},
									{
										"kind": "code",
										"text": "`requires_action`"
									},
									{
										"kind": "text",
										"text": " if any actions are required."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.fulfillClaim(orderId, claimId, {\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13242,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13243,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13244,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/fulfill-claim.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimFulfillmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13245,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13246,
					"name": "createClaimShipment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13247,
							"name": "createClaimShipment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipment for the claim and mark its fulfillment as shipped. If the shipment is created successfully, this changes the claim's fulfillment status\nto either "
									},
									{
										"kind": "code",
										"text": "`partially_shipped`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`shipped`"
									},
									{
										"kind": "text",
										"text": ", depending on whether all the items were shipped."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order's details. You can access the swap under the "
											},
											{
												"kind": "code",
												"text": "`claims`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.orders.createClaimShipment(orderId, claimId, {\n  fulfillment_id\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13248,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order that the claim belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13249,
									"name": "claimId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13250,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipment to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/create-claim-shipment.d.ts",
											"qualifiedName": "AdminPostOrdersOrderClaimsClaimShipmentsReq"
										},
										"name": "AdminPostOrdersOrderClaimsClaimShipmentsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13251,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/orders/index.d.ts",
											"qualifiedName": "AdminOrdersRes"
										},
										"name": "AdminOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13122,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13123,
							"name": "new AdminOrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13124,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13121,
								"name": "AdminOrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13122
					]
				},
				{
					"title": "Methods",
					"children": [
						13125,
						13130,
						13135,
						13139,
						13143,
						13147,
						13152,
						13157,
						13162,
						13168,
						13174,
						13179,
						13184,
						13188,
						13193,
						13197,
						13202,
						13207,
						13213,
						13219,
						13224,
						13229,
						13234,
						13240,
						13246
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13917,
			"name": "AdminPaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/api/admin#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 13921,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13922,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n    console.log(payment_collection.id)\n  })\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"currency\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13923,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13924,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "AdminGetPaymentCollectionsParams"
										},
										"name": "AdminGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13925,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13926,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13927,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a payment collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.update(paymentCollectionId, {\n  description\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13928,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13929,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/update-payment-collection.d.ts",
											"qualifiedName": "AdminUpdatePaymentCollectionsReq"
										},
										"name": "AdminUpdatePaymentCollectionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13930,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13931,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13932,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment collection. Only payment collections with the statuses "
									},
									{
										"kind": "code",
										"text": "`canceled`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`not_paid`"
									},
									{
										"kind": "text",
										"text": " can be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.delete(paymentCollectionId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13933,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13934,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionDeleteRes"
										},
										"name": "AdminPaymentCollectionDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13935,
					"name": "markAsAuthorized",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13936,
							"name": "markAsAuthorized",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the status of a payment collection as "
									},
									{
										"kind": "code",
										"text": "`authorized`"
									},
									{
										"kind": "text",
										"text": ". This will also change the "
									},
									{
										"kind": "code",
										"text": "`authorized_amount`"
									},
									{
										"kind": "text",
										"text": " of the payment collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.paymentCollections.markAsAuthorized(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13937,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13938,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payment-collections/index.d.ts",
											"qualifiedName": "AdminPaymentCollectionsRes"
										},
										"name": "AdminPaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13918,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13919,
							"name": "new AdminPaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13920,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13917,
								"name": "AdminPaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13918
					]
				},
				{
					"title": "Methods",
					"children": [
						13921,
						13926,
						13931,
						13935
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13939,
			"name": "AdminPaymentsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/api/admin#payments). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.payments`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA payment can be related to an order, swap, return, or more. It can be captured or refunded."
					}
				]
			},
			"children": [
				{
					"id": 13943,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13944,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a payment's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.retrieve(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13945,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13946,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/get-payment.d.ts",
											"qualifiedName": "GetPaymentsParams"
										},
										"name": "GetPaymentsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13947,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13948,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13949,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capture a payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.capturePayment(paymentId)\n.then(({ payment }) => {\n  console.log(payment.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13950,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13951,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminPaymentRes"
										},
										"name": "AdminPaymentRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13952,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13953,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refund a payment. The payment must be captured first."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refund's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { RefundReason } from \"@medusajs/medusa\";\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.payments.refundPayment(paymentId, {\n  amount: 1000,\n  reason: RefundReason.RETURN,\n  note: \"Do not like it\",\n})\n.then(({ refund }) => {\n  console.log(refund.amount);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13954,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13955,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The refund to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/refund-payment.d.ts",
											"qualifiedName": "AdminPostPaymentRefundsReq"
										},
										"name": "AdminPostPaymentRefundsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13956,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/payments/index.d.ts",
											"qualifiedName": "AdminRefundRes"
										},
										"name": "AdminRefundRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13940,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13941,
							"name": "new AdminPaymentsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13942,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13939,
								"name": "AdminPaymentsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13940
					]
				},
				{
					"title": "Methods",
					"children": [
						13943,
						13948,
						13952
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13311,
			"name": "AdminPriceListResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/api/admin#price-lists). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.priceLists`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA price list are special prices applied to products based on a set of conditions, such as customer group.\n\nRelated Guide: [How to manage price lists](https://docs.medusajs.com/modules/price-lists/admin/manage-price-lists)."
					}
				]
			},
			"children": [
				{
					"id": 13315,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13316,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nmedusa.admin.priceLists.create({\n  name: \"New Price List\",\n  description: \"A new price list\",\n  type: PriceListType.SALE,\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13317,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The price list to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/create-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13318,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13319,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13320,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.update(priceListId, {\n  name: \"New Price List\"\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13321,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13322,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the price list."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/update-price-list.d.ts",
											"qualifiedName": "AdminPostPriceListsPriceListPriceListReq"
										},
										"name": "AdminPostPriceListsPriceListPriceListReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13323,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13324,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13325,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a price list and its associated prices."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.delete(priceListId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13326,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13327,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13328,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13329,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.retrieve(priceListId)\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13330,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13331,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13332,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13333,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of price lists. The price lists can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The price lists can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of price lists with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list()\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the price lists:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\"\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.list({\n  expand: \"prices\",\n  limit,\n  offset\n})\n.then(({ price_lists, limit, offset, count }) => {\n  console.log(price_lists.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13334,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved price lists."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-lists.d.ts",
											"qualifiedName": "AdminGetPriceListPaginationParams"
										},
										"name": "AdminGetPriceListPaginationParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13335,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsListRes"
										},
										"name": "AdminPriceListsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13336,
					"name": "listProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13337,
							"name": "listProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a price list's products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products in a price list:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId)\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.listProducts(priceListId, {\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13338,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13339,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/list-price-list-products.d.ts",
											"qualifiedName": "AdminGetPriceListsPriceListProductsParams"
										},
										"name": "AdminGetPriceListsPriceListProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13340,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListsProductsListRes"
										},
										"name": "AdminPriceListsProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13341,
					"name": "addPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13342,
							"name": "addPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add or update a list of prices in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the price list's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.addPrices(priceListId, {\n  prices: [\n    {\n      amount: 1000,\n      variant_id,\n      currency_code: \"eur\"\n    }\n  ]\n})\n.then(({ price_list }) => {\n  console.log(price_list.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13343,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13344,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of prices to add or update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/add-prices-batch.d.ts",
											"qualifiedName": "AdminPostPriceListPricesPricesReq"
										},
										"name": "AdminPostPriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13345,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListRes"
										},
										"name": "AdminPriceListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13346,
					"name": "deletePrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13347,
							"name": "deletePrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a list of prices in a price list"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deletePrices(priceListId, {\n  price_ids: [\n    price_id\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13348,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13349,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The prices to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListPricesPricesReq"
										},
										"name": "AdminDeletePriceListPricesPricesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13350,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13351,
					"name": "deleteProductPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13352,
							"name": "deleteProductPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductPrices(priceListId, productId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13353,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13354,
									"name": "productId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13355,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13356,
					"name": "deleteVariantPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13357,
							"name": "deleteVariantPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices related to a specific product variant in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteVariantPrices(priceListId, variantId)\n.then(({ ids, object, deleted }) => {\n  console.log(ids);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13358,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13359,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13360,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13361,
					"name": "deleteProductsPrices",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13362,
							"name": "deleteProductsPrices",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete all the prices associated with multiple products in a price list."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.priceLists.deleteProductsPrices(priceListId, {\n  product_ids: [\n    productId1,\n    productId2,\n  ]\n})\n.then(({ ids, object, deleted }) => {\n  console.log(ids.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13363,
									"name": "priceListId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the price list."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13364,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products whose prices should be deleted."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/delete-products-prices-batch.d.ts",
											"qualifiedName": "AdminDeletePriceListsPriceListProductsPricesBatchReq"
										},
										"name": "AdminDeletePriceListsPriceListProductsPricesBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13365,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/price-lists/index.d.ts",
											"qualifiedName": "AdminPriceListDeleteBatchRes"
										},
										"name": "AdminPriceListDeleteBatchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13312,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13313,
							"name": "new AdminPriceListResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13314,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13311,
								"name": "AdminPriceListResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13312
					]
				},
				{
					"title": "Methods",
					"children": [
						13315,
						13319,
						13324,
						13328,
						13332,
						13336,
						13341,
						13346,
						13351,
						13356,
						13361
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13957,
			"name": "AdminProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/api/admin#product-categories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nProducts can be categoriezed into categories. A product can be added into more than one category.\n\nRelated Guide: [How to manage product categories](https://docs.medusajs.com/modules/products/admin/manage-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 13961,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13962,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves an order by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.retrieve(productCategoryId, {\n  expand: \"category_children\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13963,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13964,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/get-product-category.d.ts",
											"qualifiedName": "AdminGetProductCategoryParams"
										},
										"name": "AdminGetProductCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13965,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13966,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13967,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.create({\n  name: \"Skinny Jeans\",\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13968,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product category's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/create-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesReq"
										},
										"name": "AdminPostProductCategoriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13969,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13970,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13971,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Updates a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.update(productCategoryId, {\n  name: \"Skinny Jeans\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13972,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13973,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product category."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/update-product-category.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryReq"
										},
										"name": "AdminPostProductCategoriesCategoryReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13974,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13975,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13976,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product category:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.list({\n  expand: \"category_children\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13977,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/list-product-categories.d.ts",
											"qualifiedName": "AdminGetProductCategoriesParams"
										},
										"name": "AdminGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13978,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesListRes"
										},
										"name": "AdminProductCategoriesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13979,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13980,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product category. This does not delete associated products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.delete(productCategoryId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13981,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13982,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13983,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13984,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.removeProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13985,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13986,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminDeleteProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13987,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13988,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13989,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a product category."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productCategories.addProducts(productCategoryId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13990,
									"name": "productCategoryId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13991,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/add-products-batch.d.ts",
											"qualifiedName": "AdminPostProductCategoriesCategoryProductsBatchReq"
										},
										"name": "AdminPostProductCategoriesCategoryProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13992,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-categories/index.d.ts",
											"qualifiedName": "AdminProductCategoriesCategoryRes"
										},
										"name": "AdminProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13958,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13959,
							"name": "new AdminProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13960,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13957,
								"name": "AdminProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13958
					]
				},
				{
					"title": "Methods",
					"children": [
						13961,
						13966,
						13970,
						13975,
						13979,
						13983,
						13988
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13366,
			"name": "AdminProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/api/admin#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nProduct tags are string values created when you create or update a product with a new tag.\nProducts can have more than one tag, and products can share tags. This allows admins to associate products to similar tags that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 13370,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13371,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13372,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/list-product-tags.d.ts",
											"qualifiedName": "AdminGetProductTagsParams"
										},
										"name": "AdminGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-tags/index.d.ts",
											"qualifiedName": "AdminProductTagsListRes"
										},
										"name": "AdminProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13367,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13368,
							"name": "new AdminProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13369,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13366,
								"name": "AdminProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13367
					]
				},
				{
					"title": "Methods",
					"children": [
						13370
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13373,
			"name": "AdminProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/api/admin#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nProduct types are string values created when you create or update a product with a new type.\nProducts can have one type, and products can share types. This allows admins to associate products with a type that can be used to filter products."
					}
				]
			},
			"children": [
				{
					"id": 13377,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13378,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13379,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/list-product-types.d.ts",
											"qualifiedName": "AdminGetProductTypesParams"
										},
										"name": "AdminGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13380,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/product-types/index.d.ts",
											"qualifiedName": "AdminProductTypesListRes"
										},
										"name": "AdminProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13374,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13375,
							"name": "new AdminProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13376,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13373,
								"name": "AdminProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13374
					]
				},
				{
					"title": "Methods",
					"children": [
						13377
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13381,
			"name": "AdminProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product API Routes](https://docs.medusajs.com/api/admin#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/admin/manage-gift-cards#manage-gift-card-product) in a store.\n\nRelated Guide: [How to manage products](https://docs.medusajs.com/modules/products/admin/manage-products)."
					}
				]
			},
			"children": [
				{
					"id": 13385,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13386,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a new Product. This API Route can also be used to create a gift card if the "
									},
									{
										"kind": "code",
										"text": "`is_giftcard`"
									},
									{
										"kind": "text",
										"text": " field is set to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.create({\n  title: \"Shirt\",\n  is_giftcard: false,\n  discountable: true\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13387,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-product.d.ts",
											"qualifiedName": "AdminPostProductsReq"
										},
										"name": "AdminPostProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13388,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13389,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13390,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13391,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13392,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13393,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13394,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Product's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.update(productId, {\n  title: \"Shirt\",\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13395,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13396,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in a product."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-product.d.ts",
											"qualifiedName": "AdminPostProductsProductReq"
										},
										"name": "AdminPostProductsProductReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13397,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13398,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13399,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product and its associated product variants and options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.delete(productId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13400,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13401,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteRes"
										},
										"name": "AdminProductsDeleteRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13402,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13403,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.list({\n  expand: \"images\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13404,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-products.d.ts",
											"qualifiedName": "AdminGetProductsParams"
										},
										"name": "AdminGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListRes"
										},
										"name": "AdminProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13409,
					"name": "listTags",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13410,
							"name": "listTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Product Tags with how many times each is used in products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tags."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listTags()\n.then(({ tags }) => {\n  console.log(tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13411,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListTagsRes"
										},
										"name": "AdminProductsListTagsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13412,
					"name": "setMetadata",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13413,
							"name": "setMetadata",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set the metadata of a product. It can be any key-value pair, which allows adding custom data to a product. Learn about how you can update and delete the metadata attribute\n[here](https://docs.medusajs.com/development/entities/overview#metadata-attribute)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.setMetadata(productId, {\n  key: \"test\",\n  value: \"true\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13414,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13415,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The metadata details to add, update, or delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/set-metadata.d.ts",
											"qualifiedName": "AdminPostProductsProductMetadataReq"
										},
										"name": "AdminPostProductsProductMetadataReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13416,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13417,
					"name": "createVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13418,
							"name": "createVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a product variant associated with a product. Each product variant must have a unique combination of product option values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.createVariant(productId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13419,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13420,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/create-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsReq"
										},
										"name": "AdminPostProductsProductVariantsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13421,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13422,
					"name": "updateVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13423,
							"name": "updateVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`variants`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateVariant(productId, variantId, {\n  title: \"Color\",\n  prices: [\n    {\n      amount: 1000,\n      currency_code: \"eur\"\n    }\n  ],\n  options: [\n    {\n      option_id,\n      value: \"S\"\n    }\n  ],\n  inventory_quantity: 100\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13424,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13425,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13426,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-variant.d.ts",
											"qualifiedName": "AdminPostProductsProductVariantsVariantReq"
										},
										"name": "AdminPostProductsProductVariantsVariantReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13427,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13428,
					"name": "deleteVariant",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13429,
							"name": "deleteVariant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.deleteVariant(productId, variantId)\n.then(({ variant_id, object, deleted, product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13430,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variant belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13431,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13432,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteVariantRes"
										},
										"name": "AdminProductsDeleteVariantRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13433,
					"name": "listVariants",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13434,
							"name": "listVariants",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the product variants associated with a product. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`manage_inventory`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.listVariants(productId, {\n  limit: 10,\n})\n.then(({ variants, limit, offset, count }) => {\n console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13435,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the variants belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13436,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants. If undefined, the first 100 records are retrieved."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/list-variants.d.ts",
											"qualifiedName": "AdminGetProductsVariantsParams"
										},
										"name": "AdminGetProductsVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13437,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsListVariantsRes"
										},
										"name": "AdminProductsListVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13438,
					"name": "addOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13439,
							"name": "addOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a product option to a product."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.addOption(productId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13440,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13441,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The option to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/add-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsReq"
										},
										"name": "AdminPostProductsProductOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13442,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13443,
					"name": "updateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13444,
							"name": "updateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a product option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details. You can access the variant under the "
											},
											{
												"kind": "code",
												"text": "`options`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.products.updateOption(productId, optionId, {\n  title: \"Size\"\n})\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13445,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13446,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13447,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the product option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/update-option.d.ts",
											"qualifiedName": "AdminPostProductsProductOptionsOption"
										},
										"name": "AdminPostProductsProductOptionsOption",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13448,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsRes"
										},
										"name": "AdminProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13449,
					"name": "deleteOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13450,
							"name": "deleteOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a product option. If there are product variants that use this product option, they must be deleted before deleting the product option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13451,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product that the option belongs to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13452,
									"name": "optionId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13453,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/products/index.d.ts",
											"qualifiedName": "AdminProductsDeleteOptionRes"
										},
										"name": "AdminProductsDeleteOptionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13382,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13383,
							"name": "new AdminProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13384,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13381,
								"name": "AdminProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13382
					]
				},
				{
					"title": "Methods",
					"children": [
						13385,
						13389,
						13393,
						13398,
						13402,
						13409,
						13412,
						13417,
						13422,
						13428,
						13433,
						13438,
						13443,
						13449
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13454,
			"name": "AdminPublishableApiKeyResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/api/admin#publishable-api-keys). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.publishableApiKeys`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nPublishable API Keys can be used to scope Store API calls with an API key, determining what resources are retrieved when querying the API.\nFor example, a publishable API key can be associated with one or more sales channels. When it is passed in the header of a request to the List Product store API Route,\nthe sales channels are inferred from the key and only products associated with those sales channels are retrieved.\nAdmins can manage publishable API keys and their associated resources. Currently, only Sales Channels are supported as a resource.\n\nRelated Guide: [How to manage publishable API keys](https://docs.medusajs.com/development/publishable-api-keys/admin/manage-publishable-api-keys)."
					}
				]
			},
			"children": [
				{
					"id": 13458,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13459,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishable API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.retrieve(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13460,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13461,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13462,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13463,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of publishable API keys. The publishable API keys can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": ". The publishable API keys can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of publishable API keys with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list publishable API keys:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list()\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.list({\n  limit,\n  offset\n})\n.then(({ publishable_api_keys, count, limit, offset }) => {\n  console.log(publishable_api_keys)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13464,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved publishable API keys."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-keys.d.ts",
											"qualifiedName": "GetPublishableApiKeysParams"
										},
										"name": "GetPublishableApiKeysParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13465,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListRes"
										},
										"name": "AdminPublishableApiKeysListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13466,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13467,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.create({\n title\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13468,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The publishable API key to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/create-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysReq"
										},
										"name": "AdminPostPublishableApiKeysReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13469,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13470,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13471,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a publishable API key's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.update(publishableApiKeyId, {\n  title: \"new title\"\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13472,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13473,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/update-publishable-api-key.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeysPublishableApiKeyReq"
										},
										"name": "AdminPostPublishableApiKeysPublishableApiKeyReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13474,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13475,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13476,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a publishable API key. Associated resources, such as sales channels, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the delete operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.delete(publishableApiKeyId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13477,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13478,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13479,
					"name": "revoke",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13480,
							"name": "revoke",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Revoke a publishable API key. Revoking the publishable API Key can't be undone, and the key can't be used in future requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.revoke(publishableApiKeyId)\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13481,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13482,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13483,
					"name": "addSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13484,
							"name": "addSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of sales channels to a publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.addSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13485,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13486,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/add-channels-batch.d.ts",
											"qualifiedName": "AdminPostPublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminPostPublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13487,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13488,
					"name": "deleteSalesChannelsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13489,
							"name": "deleteSalesChannelsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of sales channels from a publishable API key. This doesn't delete the sales channels and only removes the association between them and the publishable API key."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the publishbale API key's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.deleteSalesChannelsBatch(publishableApiKeyId, {\n  sales_channel_ids: [\n    {\n      id: channelId\n    }\n  ]\n})\n.then(({ publishable_api_key }) => {\n  console.log(publishable_api_key.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13490,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13491,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channels to delete from the publishable API key."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/delete-channels-batch.d.ts",
											"qualifiedName": "AdminDeletePublishableApiKeySalesChannelsBatchReq"
										},
										"name": "AdminDeletePublishableApiKeySalesChannelsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13492,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysRes"
										},
										"name": "AdminPublishableApiKeysRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13493,
					"name": "listSalesChannels",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13494,
							"name": "listSalesChannels",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List the sales channels associated with a publishable API key. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.publishableApiKeys.listSalesChannels()\n.then(({ sales_channels }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13495,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the publishable API key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13496,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/list-publishable-api-key-sales-channels.d.ts",
											"qualifiedName": "GetPublishableApiKeySalesChannelsParams"
										},
										"name": "GetPublishableApiKeySalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13497,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/publishable-api-keys/index.d.ts",
											"qualifiedName": "AdminPublishableApiKeysListSalesChannelsRes"
										},
										"name": "AdminPublishableApiKeysListSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13455,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13456,
							"name": "new AdminPublishableApiKeyResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13457,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13454,
								"name": "AdminPublishableApiKeyResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13455
					]
				},
				{
					"title": "Methods",
					"children": [
						13458,
						13462,
						13466,
						13470,
						13475,
						13479,
						13483,
						13488,
						13493
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13498,
			"name": "AdminRegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Region API Routes](https://docs.medusajs.com/api/admin#regions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nAdmins can manage these regions, their providers, and more.\n\nRelated Guide: [How to manage regions](https://docs.medusajs.com/modules/regions-and-currencies/admin/manage-regions)."
					}
				]
			},
			"children": [
				{
					"id": 13502,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13503,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.create({\n  name: \"Europe\",\n  currency_code: \"eur\",\n  tax_rate: 0,\n  payment_providers: [\n    \"manual\"\n  ],\n  fulfillment_providers: [\n    \"manual\"\n  ],\n  countries: [\n    \"DK\"\n  ]\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13504,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/create-region.d.ts",
											"qualifiedName": "AdminPostRegionsReq"
										},
										"name": "AdminPostRegionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13505,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13506,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13507,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.update(regionId, {\n  name: \"Europe\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13508,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13509,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the region."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/update-region.d.ts",
											"qualifiedName": "AdminPostRegionsRegionReq"
										},
										"name": "AdminPostRegionsRegionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13510,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13511,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13512,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a region. Associated resources, such as providers or currencies are not deleted. Associated tax rates are deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.delete(regionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13513,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13514,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13515,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13516,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13517,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13518,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13519,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13520,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Regions. The regions can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The regions can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list regions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list()\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.list({\n  limit,\n  offset\n})\n.then(({ regions, limit, offset, count }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13521,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved regions."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/list-regions.d.ts",
											"qualifiedName": "AdminGetRegionsParams"
										},
										"name": "AdminGetRegionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13522,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsListRes"
										},
										"name": "AdminRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13523,
					"name": "addCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13524,
							"name": "addCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a country to the list of countries in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addCountry(regionId, {\n  country_code: \"dk\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13525,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13526,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The country to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-country.d.ts",
											"qualifiedName": "AdminPostRegionsRegionCountriesReq"
										},
										"name": "AdminPostRegionsRegionCountriesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13527,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13528,
					"name": "deleteCountry",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13529,
							"name": "deleteCountry",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a country from the list of countries in a region. The country will still be available in the system, and it can be used in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteCountry(regionId, \"dk\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13530,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13531,
									"name": "country_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the country to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13532,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13533,
					"name": "addFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13534,
							"name": "addFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a fulfillment provider to the list of fulfullment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addFulfillmentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13535,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13536,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-fulfillment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionFulfillmentProvidersReq"
										},
										"name": "AdminPostRegionsRegionFulfillmentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13537,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13538,
					"name": "deleteFulfillmentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13539,
							"name": "deleteFulfillmentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a fulfillment provider from a region. The fulfillment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deleteFulfillmentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13540,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13541,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the fulfillment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13542,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13543,
					"name": "retrieveFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13544,
							"name": "retrieveFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of fulfillment options available in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of fulfillment options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.retrieveFulfillmentOptions(regionId)\n.then(({ fulfillment_options }) => {\n  console.log(fulfillment_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13545,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13546,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminGetRegionsRegionFulfillmentOptionsRes"
										},
										"name": "AdminGetRegionsRegionFulfillmentOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13547,
					"name": "addPaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13548,
							"name": "addPaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a payment provider to the list of payment providers in a region."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.addPaymentProvider(regionId, {\n  provider_id: \"manual\"\n})\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13549,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13550,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment provider to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/add-payment-provider.d.ts",
											"qualifiedName": "AdminPostRegionsRegionPaymentProvidersReq"
										},
										"name": "AdminPostRegionsRegionPaymentProvidersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13551,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13552,
					"name": "deletePaymentProvider",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13553,
							"name": "deletePaymentProvider",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a payment provider from a region. The payment provider will still be available for usage in other regions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.regions.deletePaymentProvider(regionId, \"manual\")\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13554,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13555,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider to delete from the region."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13556,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/regions/index.d.ts",
											"qualifiedName": "AdminRegionsRes"
										},
										"name": "AdminRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13499,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13500,
							"name": "new AdminRegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13501,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13498,
								"name": "AdminRegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13499
					]
				},
				{
					"title": "Methods",
					"children": [
						13502,
						13506,
						13511,
						13515,
						13519,
						13523,
						13528,
						13533,
						13538,
						13543,
						13547,
						13552
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13557,
			"name": "AdminReservationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/api/admin#reservations). To use these API Routes, make sure to install the\n[@medusajs/inventory](https://docs.medusajs.com/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.reservations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReservations, provided by the [Inventory Module](https://docs.medusajs.com/modules/multiwarehouse/inventory-module), are quantities of an item that are reserved, typically when an order is placed but not yet fulfilled.\nReservations can be associated with any resources, but commonly with line items of an order.\n\nRelated Guide: [How to manage item allocations in orders](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-item-allocations-in-orders)."
					}
				]
			},
			"children": [
				{
					"id": 13561,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13562,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.retrieve(reservationId)\n.then(({ reservation }) => {\n  console.log(reservation.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13563,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13564,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13565,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13566,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of reservations. The reservations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`location_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The reservations can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of reservations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list()\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the reservations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\"\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.list({\n  expand: \"location\",\n  limit,\n  offset\n})\n.then(({ reservations, count, limit, offset }) => {\n  console.log(reservations.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13567,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination parameters to apply on the retrieved reservations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/list-reservations.d.ts",
											"qualifiedName": "AdminGetReservationsParams"
										},
										"name": "AdminGetReservationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13568,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsListRes"
										},
										"name": "AdminReservationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13569,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13570,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reservation which can be associated with any resource, such as an order's line item."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.create({\n  line_item_id: \"item_123\",\n  location_id: \"loc_123\",\n  inventory_item_id: \"iitem_123\",\n  quantity: 1\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13571,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservation to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/create-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReq"
										},
										"name": "AdminPostReservationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13572,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13573,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13574,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a reservation's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the reservation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.update(reservationId, {\n  quantity: 3\n})\n.then(({ reservation }) => {\n  console.log(reservation.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13575,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13576,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the reservation."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/update-reservation.d.ts",
											"qualifiedName": "AdminPostReservationsReservationReq"
										},
										"name": "AdminPostReservationsReservationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13577,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/reservations/index.d.ts",
											"qualifiedName": "AdminReservationsRes"
										},
										"name": "AdminReservationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13578,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13579,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a reservation. Associated resources, such as the line item, will not be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.reservations.delete(reservationId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13580,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the reservation."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13581,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13558,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13559,
							"name": "new AdminReservationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13560,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13557,
								"name": "AdminReservationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13558
					]
				},
				{
					"title": "Methods",
					"children": [
						13561,
						13565,
						13569,
						13573,
						13578
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13582,
			"name": "AdminReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/api/admin#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created.\nAdmins can manage available return reasons, and they can be used by both admins and customers when creating a return.\n\nRelated Guide: [How to manage return reasons](https://docs.medusajs.com/modules/orders/admin/manage-returns#manage-return-reasons)."
					}
				]
			},
			"children": [
				{
					"id": 13586,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13587,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.create({\n  label: \"Damaged\",\n  value: \"damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13588,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/create-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReq"
										},
										"name": "AdminPostReturnReasonsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13589,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13590,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13591,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.update(returnReasonId, {\n  label: \"Damaged\"\n})\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13592,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13593,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the return reason."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/update-reason.d.ts",
											"qualifiedName": "AdminPostReturnReasonsReasonReq"
										},
										"name": "AdminPostReturnReasonsReasonReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13594,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13595,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13596,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a return reason."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.delete(returnReasonId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13597,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13598,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13599,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13600,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a return reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.retrieve(returnReasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13601,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return reason's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13602,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsRes"
										},
										"name": "AdminReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13603,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13604,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of return reasons."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13605,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/return-reasons/index.d.ts",
											"qualifiedName": "AdminReturnReasonsListRes"
										},
										"name": "AdminReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13583,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13584,
							"name": "new AdminReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13585,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13582,
								"name": "AdminReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13583
					]
				},
				{
					"title": "Methods",
					"children": [
						13586,
						13590,
						13595,
						13599,
						13603
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13606,
			"name": "AdminReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Return API Routes](https://docs.medusajs.com/api/admin#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA return can be created by a customer or an admin to return items in an order.\nAdmins can manage these returns and change their state.\n\nRelated Guide: [How to manage returns](https://docs.medusajs.com/modules/orders/admin/manage-returns)."
					}
				]
			},
			"children": [
				{
					"id": 13610,
					"name": "cancel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13611,
							"name": "cancel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a return as canceled. The return can be associated with an order, claim, or swap."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order associated with the return. If the return is associated with a claim or a swap, then it'll be the order\nthat the claim or swap belongs to."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.cancel(returnId)\n.then(({ order }) => {\n  console.log(order.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13612,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13613,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsCancelRes"
										},
										"name": "AdminReturnsCancelRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13614,
					"name": "receive",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13615,
							"name": "receive",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mark a return as received. This also updates the status of associated order, claim, or swap accordingly."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.receive(returnId, {\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n});\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13616,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The return's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13617,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The received return."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/receive-return.d.ts",
											"qualifiedName": "AdminPostReturnsReturnReceiveReq"
										},
										"name": "AdminPostReturnsReturnReceiveReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13618,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsRes"
										},
										"name": "AdminReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13619,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13620,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Returns. The returns can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of returns with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list returns:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list()\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.returns.list({\n  limit,\n  offset\n})\n.then(({ returns, limit, offset, count }) => {\n  console.log(returns.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13621,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Paignation configurations to be applied on the retrieved returns."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/list-returns.d.ts",
											"qualifiedName": "AdminGetReturnsParams"
										},
										"name": "AdminGetReturnsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13622,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/returns/index.d.ts",
											"qualifiedName": "AdminReturnsListRes"
										},
										"name": "AdminReturnsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13607,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13608,
							"name": "new AdminReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13609,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13606,
								"name": "AdminReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13607
					]
				},
				{
					"title": "Methods",
					"children": [
						13610,
						13614,
						13619
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13623,
			"name": "AdminSalesChannelsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/api/admin#sales-channels). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.salesChannels`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA sales channel indicates a channel where products can be sold in. For example, a webshop or a mobile app.\nAdmins can manage sales channels and the products available in them.\n\nRelated Guide: [How to manage sales channels](https://docs.medusajs.com/modules/sales-channels/admin/manage)."
					}
				]
			},
			"children": [
				{
					"id": 13627,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13628,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.retrieve(salesChannelId)\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13629,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13630,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13631,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13632,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.create({\n  name: \"App\",\n  description: \"Mobile app\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13633,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/create-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsReq"
										},
										"name": "AdminPostSalesChannelsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13634,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13635,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13636,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a sales channel's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.update(salesChannelId, {\n  name: \"App\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13637,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13638,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/update-sales-channel.d.ts",
											"qualifiedName": "AdminPostSalesChannelsSalesChannelReq"
										},
										"name": "AdminPostSalesChannelsSalesChannelReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13639,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13640,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13641,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of sales channels. The sales channels can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The sales channels can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of sales channels with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list()\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the sales channels:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\"\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.list({\n  expand: \"locations\",\n  limit,\n  offset\n})\n.then(({ sales_channels, limit, offset, count }) => {\n  console.log(sales_channels.length)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13642,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved sales channels."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/list-sales-channels.d.ts",
											"qualifiedName": "AdminGetSalesChannelsParams"
										},
										"name": "AdminGetSalesChannelsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13643,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsListRes"
										},
										"name": "AdminSalesChannelsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13644,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13645,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a sales channel. Associated products, stock locations, and other resources are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.delete(salesChannelId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13646,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13647,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13648,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13649,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a list of products from a sales channel. This doesn't delete the product. It only removes the association between the product and the sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13650,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13651,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/delete-products-batch.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminDeleteSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13652,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13653,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13654,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a list of products to a sales channel."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addProducts(salesChannelId, {\n  product_ids: [\n    {\n      id: productId\n    }\n  ]\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13655,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13656,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/add-product-batch.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelProductsBatchReq"
										},
										"name": "AdminPostSalesChannelsChannelProductsBatchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13657,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13658,
					"name": "addLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13659,
							"name": "addLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Associate a stock location with a sales channel. It requires the \n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module to be installed in\nyour Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.addLocation(salesChannelId, {\n  location_id: \"loc_123\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13660,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13661,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to associate with the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/associate-stock-location.d.ts",
											"qualifiedName": "AdminPostSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminPostSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13662,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13663,
					"name": "removeLocation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13664,
							"name": "removeLocation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a stock location from a sales channel. This only removes the association between the stock location and the sales channel. It does not delete the stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the sales channel's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.salesChannels.removeLocation(salesChannelId, {\n  location_id: \"loc_id\"\n})\n.then(({ sales_channel }) => {\n  console.log(sales_channel.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13665,
									"name": "salesChannelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The sales channel's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13666,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to remove from the sales channel."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/remove-stock-location.d.ts",
											"qualifiedName": "AdminDeleteSalesChannelsChannelStockLocationsReq"
										},
										"name": "AdminDeleteSalesChannelsChannelStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13667,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/sales-channels/index.d.ts",
											"qualifiedName": "AdminSalesChannelsRes"
										},
										"name": "AdminSalesChannelsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13624,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13625,
							"name": "new AdminSalesChannelsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13626,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13623,
								"name": "AdminSalesChannelsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13624
					]
				},
				{
					"title": "Methods",
					"children": [
						13627,
						13631,
						13635,
						13640,
						13644,
						13648,
						13653,
						13658,
						13663
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13668,
			"name": "AdminShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/api/admin#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\nAdmins can create an unlimited number of shipping options, each associated with a shipping profile and fulfillment provider, among other resources.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 13672,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13673,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.create({\n  name: \"PostFake\",\n  region_id,\n  provider_id,\n  data: {\n  },\n  price_type: \"flat_rate\"\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13674,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/create-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsReq"
										},
										"name": "AdminPostShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13675,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13676,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13677,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.update(optionId, {\n  name: \"PostFake\",\n  requirements: [\n    {\n      id,\n      type: \"max_subtotal\",\n      amount: 1000\n    }\n  ]\n})\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13678,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13679,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/update-shipping-option.d.ts",
											"qualifiedName": "AdminPostShippingOptionsOptionReq"
										},
										"name": "AdminPostShippingOptionsOptionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13680,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13681,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13682,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping option. Once deleted, it can't be used when creating orders or returns."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.delete(optionId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13683,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13684,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13685,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13686,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping option's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping option's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.retrieve(optionId)\n.then(({ shipping_option }) => {\n  console.log(shipping_option.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13687,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping option's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13688,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsRes"
										},
										"name": "AdminShippingOptionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13689,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13690,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`is_return`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingOptions.list()\n.then(({ shipping_options, count }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13691,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters to apply on the retrieved shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/list-shipping-options.d.ts",
											"qualifiedName": "AdminGetShippingOptionsParams"
										},
										"name": "AdminGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13692,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-options/index.d.ts",
											"qualifiedName": "AdminShippingOptionsListRes"
										},
										"name": "AdminShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13669,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13670,
							"name": "new AdminShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13671,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13668,
								"name": "AdminShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13669
					]
				},
				{
					"title": "Methods",
					"children": [
						13672,
						13676,
						13681,
						13685,
						13689
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13693,
			"name": "AdminShippingProfilesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/api/admin#shipping-profiles). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.shippingProfiles`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA shipping profile is used to group products that can be shipped in the same manner.\nThey are created by the admin and they're not associated with a fulfillment provider.\n\nRelated Guide: [Shipping Profile architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-profile)."
					}
				]
			},
			"children": [
				{
					"id": 13697,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13698,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a shipping profile."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { ShippingProfileType } from \"@medusajs/medusa\"\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.create({\n  name: \"Large Products\",\n  type: ShippingProfileType.DEFAULT\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13699,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/create-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesReq"
										},
										"name": "AdminPostShippingProfilesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13700,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13701,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13702,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.update(shippingProfileId, {\n  name: 'Large Products'\n})\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13703,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13704,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the shipping profile."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/update-shipping-profile.d.ts",
											"qualifiedName": "AdminPostShippingProfilesProfileReq"
										},
										"name": "AdminPostShippingProfilesProfileReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13705,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13706,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13707,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a shipping profile. Associated shipping options are deleted as well."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.delete(profileId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13708,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13709,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13710,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13711,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a shipping profile's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the shipping profile's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.retrieve(profileId)\n.then(({ shipping_profile }) => {\n  console.log(shipping_profile.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13712,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping profile's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13713,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesRes"
										},
										"name": "AdminShippingProfilesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13714,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13715,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping profiles."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping profiles."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.shippingProfiles.list()\n.then(({ shipping_profiles }) => {\n  console.log(shipping_profiles.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13716,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/shipping-profiles/index.d.ts",
											"qualifiedName": "AdminShippingProfilesListRes"
										},
										"name": "AdminShippingProfilesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13694,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13695,
							"name": "new AdminShippingProfilesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13696,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13693,
								"name": "AdminShippingProfilesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13694
					]
				},
				{
					"title": "Methods",
					"children": [
						13697,
						13701,
						13706,
						13710,
						13714
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13717,
			"name": "AdminStockLocationsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/api/admin#stock-locations). To use these API Routes, make sure to install the\n[@medusajs/stock-location](https://docs.medusajs.com/modules/multiwarehouse/install-modules#stock-location-module) module in your Medusa backend.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ". The methods\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.stockLocations`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA stock location, provided by the [Stock Location module](https://docs.medusajs.com/modules/multiwarehouse/stock-location-module), indicates a physical address that stock-kept items, such as physical products, can be stored in.\nAn admin can create and manage available stock locations.\n\nRelated Guide: [How to manage stock locations](https://docs.medusajs.com/modules/multiwarehouse/admin/manage-stock-locations)."
					}
				]
			},
			"children": [
				{
					"id": 13721,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13722,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.create({\n  name: \"Main Warehouse\",\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13723,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/create-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsReq"
										},
										"name": "AdminPostStockLocationsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13724,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13725,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13726,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.retrieve(stockLocationId)\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13727,
									"name": "itemId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13728,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13729,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13730,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a stock location's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.update(stockLocationId, {\n  name: 'Main Warehouse'\n})\n.then(({ stock_location }) => {\n  console.log(stock_location.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13731,
									"name": "stockLocationId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13732,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to be updated in the stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/update-stock-location.d.ts",
											"qualifiedName": "AdminPostStockLocationsLocationReq"
										},
										"name": "AdminPostStockLocationsLocationReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13733,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsRes"
										},
										"name": "AdminStockLocationsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13734,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13735,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.delete(stockLocationId)\n.then(({ id, object, deleted }) => {\n  console.log(id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13736,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The stock location's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13737,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/types/src/common/common.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13738,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13739,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of stock locations. The stock locations can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter.\nThe stock locations can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of stock locations with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list()\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\"\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.stockLocations.list({\n  expand: \"address\",\n  limit,\n  offset\n})\n.then(({ stock_locations, limit, offset, count }) => {\n  console.log(stock_locations.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13740,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/list-stock-locations.d.ts",
											"qualifiedName": "AdminGetStockLocationsParams"
										},
										"name": "AdminGetStockLocationsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13741,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/stock-locations/index.d.ts",
											"qualifiedName": "AdminStockLocationsListRes"
										},
										"name": "AdminStockLocationsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13718,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13719,
							"name": "new AdminStockLocationsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13720,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13717,
								"name": "AdminStockLocationsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13718
					]
				},
				{
					"title": "Methods",
					"children": [
						13721,
						13725,
						13729,
						13734,
						13738
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13742,
			"name": "AdminStoresResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Store API Routes](https://docs.medusajs.com/api/admin#store). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.store`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA store indicates the general configurations and details about the commerce store. By default, there's only one store in the Medusa backend.\nAdmins can manage the store and its details or configurations."
					}
				]
			},
			"children": [
				{
					"id": 13746,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13747,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.update({\n  name: \"Medusa Store\"\n})\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13748,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/update-store.d.ts",
											"qualifiedName": "AdminPostStoreReq"
										},
										"name": "AdminPostStoreReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13749,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13750,
					"name": "addCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13751,
							"name": "addCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a currency code to the available currencies in a store. This doesn't create new currencies, as currencies are defined within the Medusa backend. \nTo create a currency, you can [create a migration](https://docs.medusajs.com/development/entities/migrations/create) that inserts the currency into the database."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.addCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13752,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to add to the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13753,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13754,
					"name": "deleteCurrency",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13755,
							"name": "deleteCurrency",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a currency code from the available currencies in a store. This doesn't completely delete the currency and it can be added again later to the store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.deleteCurrency(\"eur\")\n.then(({ store }) => {\n  console.log(store.currencies);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13756,
									"name": "currency_code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the currency to delete from the store."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13757,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminStoresRes"
										},
										"name": "AdminStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13758,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13759,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the store's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the store's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.retrieve()\n.then(({ store }) => {\n  console.log(store.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13760,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminExtendedStoresRes"
										},
										"name": "AdminExtendedStoresRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13761,
					"name": "listPaymentProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13762,
							"name": "listPaymentProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available payment providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of payment providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listPaymentProviders()\n.then(({ payment_providers }) => {\n  console.log(payment_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13763,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminPaymentProvidersList"
										},
										"name": "AdminPaymentProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13764,
					"name": "listTaxProviders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13765,
							"name": "listTaxProviders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of available tax providers in a store."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax providers."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.store.listTaxProviders()\n.then(({ tax_providers }) => {\n  console.log(tax_providers.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13766,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/store/index.d.ts",
											"qualifiedName": "AdminTaxProvidersList"
										},
										"name": "AdminTaxProvidersList",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13743,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13744,
							"name": "new AdminStoresResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13745,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13742,
								"name": "AdminStoresResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13743
					]
				},
				{
					"title": "Methods",
					"children": [
						13746,
						13750,
						13754,
						13758,
						13761,
						13764
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13767,
			"name": "AdminSwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/api/admin#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to manage swaps](https://docs.medusajs.com/modules/orders/admin/manage-swaps)"
					}
				]
			},
			"children": [
				{
					"id": 13771,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13772,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a swap's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.retrieve(swapId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13773,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The swap's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13774,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsRes"
										},
										"name": "AdminSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13775,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13776,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of swaps. The swaps can be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of swaps with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list swaps:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list()\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.swaps.list({\n  limit,\n  offset\n})\n.then(({ swaps }) => {\n  console.log(swaps.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13777,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pagination configurations to apply on the retrieved swaps."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/list-swaps.d.ts",
											"qualifiedName": "AdminGetSwapsParams"
										},
										"name": "AdminGetSwapsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13778,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/swaps/index.d.ts",
											"qualifiedName": "AdminSwapsListRes"
										},
										"name": "AdminSwapsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13768,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13769,
							"name": "new AdminSwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13770,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13767,
								"name": "AdminSwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13768
					]
				},
				{
					"title": "Methods",
					"children": [
						13771,
						13775
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13779,
			"name": "AdminTaxRatesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/api/admin#tax-rates). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.taxRates`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nEach region has at least a default tax rate. Admins can create and manage additional tax rates that can be applied for certain conditions, such as for specific product types.\n\nRelated Guide: [How to manage tax rates](https://docs.medusajs.com/modules/taxes/admin/manage-tax-rates)."
					}
				]
			},
			"children": [
				{
					"id": 13783,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13784,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a tax rate by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId)\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.retrieve(taxRateId, {\n  expand: \"shipping_options\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13785,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13786,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13787,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13788,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13789,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of tax rates. The tax rates can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`rate`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The tax rates can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of tax rates with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list()\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the tax rates:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"]\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`50`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.list({\n  expand: [\"shipping_options\"],\n  limit,\n  offset\n})\n.then(({ tax_rates, limit, offset, count }) => {\n  console.log(tax_rates.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13790,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied to the retrieved tax rates."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/list-tax-rates.d.ts",
											"qualifiedName": "AdminGetTaxRatesParams"
										},
										"name": "AdminGetTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13791,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesListRes"
										},
										"name": "AdminTaxRatesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13792,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13793,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.create({\n  code: \"TEST\",\n  name: \"New Tax Rate\",\n  region_id\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13794,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesReq"
										},
										"name": "AdminPostTaxRatesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13795,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/create-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesParams"
										},
										"name": "AdminPostTaxRatesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13796,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13797,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13798,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a tax rate's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.update(taxRateId, {\n  name: \"New Tax Rate\"\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13799,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13800,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateReq"
										},
										"name": "AdminPostTaxRatesTaxRateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13801,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/update-tax-rate.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateParams"
										},
										"name": "AdminPostTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13802,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13803,
					"name": "addProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13804,
							"name": "addProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add products to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13805,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13806,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13807,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-products.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductsParams"
										},
										"name": "AdminPostTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13808,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13809,
					"name": "addProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13810,
							"name": "addProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add product types to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13811,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13812,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-product-types.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminPostTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13813,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/get-tax-rate.d.ts",
											"qualifiedName": "AdminGetTaxRatesTaxRateParams"
										},
										"name": "AdminGetTaxRatesTaxRateParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13814,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13815,
					"name": "addShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13816,
							"name": "addShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add shipping options to a tax rate."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.addShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13817,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13818,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to add to the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13819,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/add-to-shipping-options.d.ts",
											"qualifiedName": "AdminPostTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminPostTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13820,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13821,
					"name": "removeProducts",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13822,
							"name": "removeProducts",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove products from a tax rate. This only removes the association between the products and the tax rate. It does not delete the products."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProducts(taxRateId, {\n  products: [\n    productId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13823,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13824,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The products to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13825,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-products.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13826,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13827,
					"name": "removeProductTypes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13828,
							"name": "removeProductTypes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove product types from a tax rate. This only removes the association between the product types and the tax rate. It does not delete the product types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeProductTypes(taxRateId, {\n  product_types: [\n    productTypeId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13829,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13830,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product types to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13831,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-product-types.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateProductTypesParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13832,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13833,
					"name": "removeShippingOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13834,
							"name": "removeShippingOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove shipping options from a tax rate. This only removes the association between the shipping options and the tax rate. It does not delete the shipping options."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the tax rate's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.removeShippingOptions(taxRateId, {\n  shipping_options: [\n    shippingOptionId\n  ]\n})\n.then(({ tax_rate }) => {\n  console.log(tax_rate.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13835,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13836,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping options to remove from the tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsReq"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13837,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved tax rate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/remove-from-shipping-options.d.ts",
											"qualifiedName": "AdminDeleteTaxRatesTaxRateShippingOptionsParams"
										},
										"name": "AdminDeleteTaxRatesTaxRateShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13838,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/tax-rates/index.d.ts",
											"qualifiedName": "AdminTaxRatesRes"
										},
										"name": "AdminTaxRatesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13839,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13840,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a tax rate. Resources associated with the tax rate, such as products or product types, are not deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.taxRates.delete(taxRateId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13841,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tax rate's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13842,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13780,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13781,
							"name": "new AdminTaxRatesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13782,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13779,
								"name": "AdminTaxRatesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13780
					]
				},
				{
					"title": "Methods",
					"children": [
						13783,
						13788,
						13792,
						13797,
						13803,
						13809,
						13815,
						13821,
						13827,
						13833,
						13839
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13843,
			"name": "AdminUploadsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/api/admin#uploads). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.uploads`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nThe methods in this class are used to upload any type of resources. For example, they can be used to upload CSV files that are used to import products into the store.\n\nRelated Guide: [How to upload CSV file when importing a product](https://docs.medusajs.com/modules/products/admin/import-products#1-upload-csv-file)."
					}
				]
			},
			"children": [
				{
					"id": 13850,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13851,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file or multiple files to a public bucket or storage. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.create(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13852,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file(s) to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13853,
					"name": "createProtected",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13854,
							"name": "createProtected",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Upload a file to an ACL or a non-public bucket. The file upload is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the uploaded file details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.createProtected(file)\n.then(({ uploads }) => {\n  console.log(uploads.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13855,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The file to upload."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsRes"
										},
										"name": "AdminUploadsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13856,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13857,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete an uploaded file from storage. The file is deleted using the installed file service on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.delete({\n  file_key\n})\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13858,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to delete."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/delete-upload.d.ts",
											"qualifiedName": "AdminDeleteUploadsReq"
										},
										"name": "AdminDeleteUploadsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13859,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13860,
					"name": "getPresignedDownloadUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13861,
							"name": "getPresignedDownloadUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create and retrieve a presigned or public download URL for a file. The URL creation is handled by the file service installed on the Medusa backend."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the download URL details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.uploads.getPresignedDownloadUrl({\n  file_key\n})\n.then(({ download_url }) => {\n  console.log(download_url);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13862,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The uploaded file to get a presigned download URL for."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/get-download-url.d.ts",
											"qualifiedName": "AdminPostUploadsDownloadUrlReq"
										},
										"name": "AdminPostUploadsDownloadUrlReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13863,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/uploads/index.d.ts",
											"qualifiedName": "AdminUploadsDownloadUrlRes"
										},
										"name": "AdminUploadsDownloadUrlRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13864,
					"name": "_createPayload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 13865,
							"name": "_createPayload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 13866,
									"name": "file",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUploadPayload"
										},
										"name": "AdminCreateUploadPayload",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "FormData"
								},
								"name": "FormData",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 13844,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13845,
							"name": "new AdminUploadsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13846,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13843,
								"name": "AdminUploadsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13844
					]
				},
				{
					"title": "Methods",
					"children": [
						13850,
						13853,
						13856,
						13860,
						13864
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13867,
			"name": "AdminUsersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin User API Routes](https://docs.medusajs.com/api/admin#users). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.users`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nA store can have more than one user, each having the same privileges. Admins can manage users, their passwords, and more.\n\nRelated Guide: [How to manage users](https://docs.medusajs.com/modules/users/admin/manage-users)."
					}
				]
			},
			"children": [
				{
					"id": 13871,
					"name": "sendResetPasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13872,
							"name": "sendResetPasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a password token for an admin user with a given email. This also triggers the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event. So, if you have a Notification Service installed\nthat can handle this event, a notification, such as an email, will be sent to the user. The token is triggered as part of the "
									},
									{
										"kind": "code",
										"text": "`user.password_reset`"
									},
									{
										"kind": "text",
										"text": " event's payload.\nThat token must be used later to reset the password using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 13875,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the token is generated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.sendResetPasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13873,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password-token.d.ts",
											"qualifiedName": "AdminResetPasswordTokenRequest"
										},
										"name": "AdminResetPasswordTokenRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13874,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13875,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13876,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset the password of an admin user using their reset password token. You must generate a reset password token first for the user using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "sendResetPasswordToken",
										"target": 13871,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method,\nthen use that token to reset the password in this method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.resetPassword({\n  token: \"supersecrettoken\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13877,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reset details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/reset-password.d.ts",
											"qualifiedName": "AdminResetPasswordRequest"
										},
										"name": "AdminResetPasswordRequest",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13878,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13879,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13880,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.retrieve(userId)\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13881,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13882,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13883,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13884,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create an admin user. The user has the same privileges as all admin users, and will be able to authenticate and perform admin functionalities right after creation."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.create({\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13885,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminCreateUserPayload"
										},
										"name": "AdminCreateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 13886,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13887,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13888,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update an admin user's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the user's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.update(userId, {\n  first_name: \"Marcellus\"\n})\n.then(({ user }) => {\n  console.log(user.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13889,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13890,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the user."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
											"qualifiedName": "AdminUpdateUserPayload"
										},
										"name": "AdminUpdateUserPayload",
										"package": "@medusajs/medusa-js"
									}
								},
								{
									"id": 13891,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUserRes"
										},
										"name": "AdminUserRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13892,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13893,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a user. Once deleted, the user will not be able to authenticate or perform admin functionalities."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the deletion operation's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.delete(userId)\n.then(({ id, object, deleted }) => {\n  console.log(id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13894,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13895,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/types/common.d.ts",
											"qualifiedName": "DeleteResponse"
										},
										"name": "DeleteResponse",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13896,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13897,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve all admin users."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of users."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list users:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list()\n.then(({ users }) => {\n  console.log(users.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " users are returned. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.users.list({\n  limit,\n  offset\n})\n.then(({ users, limit, offset, count }) => {\n  console.log(users.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13898,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/list-users.d.ts",
											"qualifiedName": "AdminGetUsersParams"
										},
										"name": "AdminGetUsersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13899,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/users/index.d.ts",
											"qualifiedName": "AdminUsersListRes"
										},
										"name": "AdminUsersListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13868,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13869,
							"name": "new AdminUsersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13870,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13867,
								"name": "AdminUsersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13868
					]
				},
				{
					"title": "Methods",
					"children": [
						13871,
						13875,
						13879,
						13883,
						13887,
						13892,
						13896
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 13900,
			"name": "AdminVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/api/admin#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.admin.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "user authentication",
						"target": 12710
					},
					{
						"kind": "text",
						"text": ".\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\nProduct variants can be managed through "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "AdminProductsResource",
						"target": 13381
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to manage product variants](https://docs.medusajs.com/modules/products/admin/manage-products#manage-product-variants)."
					}
				]
			},
			"children": [
				{
					"id": 13904,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13905,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product variants. The product variant can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variant can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list()\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\"\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.list({\n  expand: \"options\",\n  limit,\n  offset\n})\n.then(({ variants, limit, offset, count }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13906,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/list-variants.d.ts",
											"qualifiedName": "AdminGetVariantsParams"
										},
										"name": "AdminGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13907,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsListRes"
										},
										"name": "AdminVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13908,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13909,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product variant's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product variant by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.retrieve(variantId, {\n  expand: \"options\"\n})\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13910,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13911,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product variant."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-variant.d.ts",
											"qualifiedName": "AdminGetVariantParams"
										},
										"name": "AdminGetVariantParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 13912,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/index.d.ts",
											"qualifiedName": "AdminVariantsRes"
										},
										"name": "AdminVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13913,
					"name": "getInventory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13914,
							"name": "getInventory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the available inventory of a product variant."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the inventory details of the product variant."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.admin.variants.getInventory(variantId)\n.then(({ variant }) => {\n  console.log(variant.inventory, variant.sales_channel_availability)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13915,
									"name": "variantId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product variant's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13916,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/admin/variants/get-inventory.d.ts",
											"qualifiedName": "AdminGetVariantsVariantInventoryRes"
										},
										"name": "AdminGetVariantsVariantInventoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 13901,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 13902,
							"name": "new AdminVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 13903,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 13900,
								"name": "AdminVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13901
					]
				},
				{
					"title": "Methods",
					"children": [
						13904,
						13908,
						13913
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12290,
			"name": "AuthResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Auth API Routes](https://docs.medusajs.com/api/store#auth). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.auth`"
					},
					{
						"kind": "text",
						"text": " property.\n\nThe methods in this class allows you to manage a customer's session, such as login or log out.\nYou can send authenticated requests for a customer either using the Cookie header or using the JWT Token.\nWhen you log the customer in using the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "authenticate",
						"target": 12294,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " method, the JS client will automatically attach the\ncookie header in all subsequent requests.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 12294,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12295,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate a customer using their email and password. If the customer is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.authenticate({\n  email: \"user@example.com\",\n  password: \"user@example.com\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12296,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12297,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12298,
					"name": "deleteSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12299,
							"name": "deleteSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Log out the customer and remove their authentication session. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 12294,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when customer is logged out successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.deleteSession()\n.then(() => {\n  // customer logged out successfully\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12300,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12301,
					"name": "getSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12302,
							"name": "getSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the details of the logged-in customer. Can also be used to check if there is an authenticated customer.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 12294,
										"tsLinkText": "customer authentication"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.auth.getSession()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12303,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreAuthRes"
										},
										"name": "StoreAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12304,
					"name": "exists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12305,
							"name": "exists",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Check if the email is already used by another registered customer. Can be used to validate a new customer's email."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the result of the check."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.exists(\"user@example.com\")\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12306,
									"name": "email",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The email to check."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12307,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreGetAuthEmailRes"
										},
										"name": "StoreGetAuthEmailRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12308,
					"name": "getToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12309,
							"name": "getToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authenticate the customer and retrieve a JWT token to use for subsequent authenticated requests."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the access token of the customer, if they're authenticated successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.auth.getToken({\n  email: 'user@example.com',\n  password: 'supersecret'\n})\n.then(({ access_token }) => {\n  console.log(access_token);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12310,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The credentials of the customer to authenticate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/create-session.d.ts",
											"qualifiedName": "StorePostAuthReq"
										},
										"name": "StorePostAuthReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12311,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/auth/index.d.ts",
											"qualifiedName": "StoreBearerAuthRes"
										},
										"name": "StoreBearerAuthRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12291,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12292,
							"name": "new AuthResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12293,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12290,
								"name": "AuthResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12291
					]
				},
				{
					"title": "Methods",
					"children": [
						12294,
						12298,
						12301,
						12304,
						12308
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12312,
			"name": "CartsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA cart is a virtual shopping bag that customers can use to add items they want to purchase.\nA cart is then used to checkout and place an order.\n\nRelated Guide: [How to implement cart functionality in your storefront](https://docs.medusajs.com/modules/carts-and-checkout/storefront/implement-cart)."
					}
				]
			},
			"children": [
				{
					"id": 12313,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12314,
							"name": "new CartsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12315,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12312,
								"name": "CartsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12316,
					"name": "lineItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "LineItemsResource",
								"target": 12418,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to line-item-related routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12418,
						"name": "LineItemsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12317,
					"name": "addShippingMethod",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12318,
							"name": "addShippingMethod",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add a shipping method to the cart. The validation of the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " field is handled by the fulfillment provider of the chosen shipping option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.addShippingMethod(cartId, {\n  option_id\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12319,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to add the shipping method to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12320,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method to add."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/add-shipping-method.d.ts",
											"qualifiedName": "StorePostCartsCartShippingMethodReq"
										},
										"name": "StorePostCartsCartShippingMethodReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12321,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12322,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12323,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete a cart and place an order or create a swap, based on the cart's type. This includes attempting to authorize the cart's payment.\nIf authorizing the payment requires more action, the cart will not be completed and the order will not be placed or the swap will not be created.\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during cart completion or the request is interrupted for any reason, the cart completion can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the completion details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.complete(cartId)\n.then(({ data, type }) => {\n  console.log(data.id, type);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12324,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to complete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12325,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCompleteCartRes"
										},
										"name": "StoreCompleteCartRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12326,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12327,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Cart. Although optional, specifying the cart's region and sales channel can affect the cart's pricing and\nthe products that can be added to the cart respectively. So, make sure to set those early on and change them if necessary, such as when the customer changes their region.\nIf a customer is logged in, make sure to pass its ID or email within the cart's details so that the cart is attached to the customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.create()\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12328,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-cart.d.ts",
											"qualifiedName": "StorePostCartReq"
										},
										"name": "StorePostCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12329,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12330,
					"name": "createPaymentSessions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12331,
							"name": "createPaymentSessions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create Payment Sessions for each of the available Payment Providers in the Cart's Region. If there's only one payment session created,\nit will be selected by default. The creation of the payment session uses the payment provider and may require sending requests to third-party services."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.createPaymentSessions(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12332,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to create the payment sessions for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12333,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12334,
					"name": "deleteDiscount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12335,
							"name": "deleteDiscount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Remove a Discount from a Cart. This only removes the application of the discount, and not completely deletes it. The totals will be re-calculated and the payment sessions\nwill be refreshed after the removal."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deleteDiscount(cartId, code)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12336,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the ID of the cart to remove the discount from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12337,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the discount to remove from the cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12338,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12339,
					"name": "deletePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12340,
							"name": "deletePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a Payment Session in a Cart. May be useful if a payment has failed. The totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.deletePaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12341,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to delete the payment session from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12342,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12343,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12344,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12345,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session to ensure that it is in sync with the Cart. This is usually not necessary, but is provided for edge cases."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.refreshPaymentSession(cartId, \"manual\")\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12346,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the cart to refresh its payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12347,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that's associated with the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12348,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12349,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12350,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Cart's details. This includes recalculating its totals."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.retrieve(cartId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12351,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12352,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12353,
					"name": "setPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12354,
							"name": "setPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Select the Payment Session that will be used to complete the cart. This is typically used when the customer chooses their preferred payment method during checkout.\nThe totals of the cart will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.setPaymentSession(cartId, {\n  provider_id: \"manual\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12355,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12356,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The associated payment provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/set-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionReq"
										},
										"name": "StorePostCartsCartPaymentSessionReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12357,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12358,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12359,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Cart's details. If the cart has payment sessions and the region was not changed, the payment sessions are updated. The cart's totals are also recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.update(cartId, {\n  email: \"user@example.com\"\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12360,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12361,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the cart."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-cart.d.ts",
											"qualifiedName": "StorePostCartsCartReq"
										},
										"name": "StorePostCartsCartReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12362,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12363,
					"name": "updatePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12364,
							"name": "updatePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a Payment Session with additional data. This can be useful depending on the payment provider used.\nAll payment sessions are updated and cart totals are recalculated afterwards."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.updatePaymentSession(cartId, \"manual\", {\n  data: {\n\n  }\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12365,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12366,
									"name": "provider_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment provider that the payment session is associated with."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12367,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-payment-session.d.ts",
											"qualifiedName": "StorePostCartsCartPaymentSessionUpdateReq"
										},
										"name": "StorePostCartsCartPaymentSessionUpdateReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12368,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12313
					]
				},
				{
					"title": "Properties",
					"children": [
						12316
					]
				},
				{
					"title": "Methods",
					"children": [
						12317,
						12322,
						12326,
						12330,
						12334,
						12339,
						12344,
						12349,
						12353,
						12358,
						12363
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12369,
			"name": "CollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Collection API Routes](https://docs.medusajs.com/api/store#product-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.collections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\nUsing the methods in this class, you can list or retrieve a collection's details and products."
					}
				]
			},
			"children": [
				{
					"id": 12370,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12371,
							"name": "new CollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12372,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12369,
								"name": "CollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12373,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12374,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a product collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.retrieve(collectionId)\n.then(({ collection }) => {\n  console.log(collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12375,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12376,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsRes"
										},
										"name": "StoreCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12377,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12378,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product collections. The product collections can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`created_at`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product collections can also be paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product collections with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product collections:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list()\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.collections.list({\n  limit,\n  offset\n})\n.then(({ collections, limit, offset, count }) => {\n  console.log(collections.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12379,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product collections."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/list-collections.d.ts",
											"qualifiedName": "StoreGetCollectionsParams"
										},
										"name": "StoreGetCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12380,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/collections/index.d.ts",
											"qualifiedName": "StoreCollectionsListRes"
										},
										"name": "StoreCollectionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12370
					]
				},
				{
					"title": "Methods",
					"children": [
						12373,
						12377
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12381,
			"name": "CustomersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA customer can register and manage their information such as addresses, orders, payment methods, and more.\n\nRelated Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/modules/customers/storefront/implement-customer-profiles)."
					}
				]
			},
			"children": [
				{
					"id": 12382,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12383,
							"name": "new CustomersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12384,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12381,
								"name": "CustomerResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12385,
					"name": "paymentMethods",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "PaymentMethodsResource",
								"target": 12513,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to payment-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12513,
						"name": "PaymentMethodsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12386,
					"name": "addresses",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "AddressesResource",
								"target": 12273,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to address-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12273,
						"name": "AddressesResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12387,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12388,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a new customer. This will also automatically authenticate the customer and set their login session in the response Cookie header.\nSubsequent requests sent with the JS client are sent with the Cookie session automatically."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the created customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.create({\n  first_name: \"Alec\",\n  last_name: \"Reynolds\",\n  email: \"user@example.com\",\n  password: \"supersecret\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12389,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the customer to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/create-customer.d.ts",
											"qualifiedName": "StorePostCustomersReq"
										},
										"name": "StorePostCustomersReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12390,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12391,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12392,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 12294
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.retrieve()\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12393,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12394,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12395,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update the logged-in customer's details. This method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 12294
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the logged-in customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.update({\n  first_name: \"Laury\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12396,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the logged-in customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/update-customer.d.ts",
											"qualifiedName": "StorePostCustomersCustomerReq"
										},
										"name": "StorePostCustomersCustomerReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12397,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12398,
					"name": "listOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12399,
							"name": "listOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of the logged-in customer's orders. The orders can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`status`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`fulfillment_status`"
									},
									{
										"kind": "text",
										"text": ". The orders can also be paginated.\nThis method requires "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "customer authentication",
										"target": 12294
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of orders with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.listOrders()\n.then(({ orders, limit, offset, count }) => {\n  console.log(orders);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12400,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved orders."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/list-orders.d.ts",
											"qualifiedName": "StoreGetCustomersCustomerOrdersParams"
										},
										"name": "StoreGetCustomersCustomerOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12401,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListOrdersRes"
										},
										"name": "StoreCustomersListOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12402,
					"name": "resetPassword",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12403,
							"name": "resetPassword",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reset a customer's password using a password token created by a previous request using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "generatePasswordToken",
										"target": 12406,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. If the password token expired,\nyou must create a new one."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.resetPassword({\n  email: \"user@example.com\",\n  password: \"supersecret\",\n  token: \"supersecrettoken\"\n})\n.then(({ customer }) => {\n  console.log(customer.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12404,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to reset the password."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password.d.ts",
											"qualifiedName": "StorePostCustomersResetPasswordReq"
										},
										"name": "StorePostCustomersResetPasswordReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12405,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersRes"
										},
										"name": "StoreCustomersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12406,
					"name": "generatePasswordToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12407,
							"name": "generatePasswordToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a reset password token to be used when sending a request with the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "resetPassword",
										"target": 12402,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method. This emits the event "
									},
									{
										"kind": "code",
										"text": "`customer.password_reset`"
									},
									{
										"kind": "text",
										"text": ". If a notification provider is\ninstalled in the Medusa backend and is configured to handle this event, a notification to the customer, such as an email, may be sent with reset instructions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when reset password token is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.customers.generatePasswordToken({\n  email: \"user@example.com\"\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // failed\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12408,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The necessary details to create the reset password token."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/reset-password-token.d.ts",
											"qualifiedName": "StorePostCustomersCustomerPasswordTokenReq"
										},
										"name": "StorePostCustomersCustomerPasswordTokenReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12409,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12382
					]
				},
				{
					"title": "Properties",
					"children": [
						12385,
						12386
					]
				},
				{
					"title": "Methods",
					"children": [
						12387,
						12391,
						12394,
						12398,
						12402,
						12406
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12410,
			"name": "GiftCardsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Gift Card API Routes](https://docs.medusajs.com/api/store#gift-cards). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.giftCards`"
					},
					{
						"kind": "text",
						"text": " property.\n\nCustomers can use gift cards during checkout to deduct the gift card's balance from the checkout total.\nThe methods in this class allow retrieving a gift card's details by its code. A gift card can be applied to a cart using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 12312
					},
					{
						"kind": "text",
						"text": ".\n\nRelated Guide: [How to use gift cards in a storefront](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards)."
					}
				]
			},
			"children": [
				{
					"id": 12411,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12412,
							"name": "new GiftCardsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12413,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12410,
								"name": "GiftCardsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12414,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12415,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Gift Card's details by its associated unique code."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the gift card."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.giftCards.retrieve(code)\n.then(({ gift_card }) => {\n  console.log(gift_card.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12416,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The code of the gift card."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12417,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/gift-cards/index.d.ts",
											"qualifiedName": "StoreGiftCardsRes"
										},
										"name": "StoreGiftCardsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12411
					]
				},
				{
					"title": "Methods",
					"children": [
						12414
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12418,
			"name": "LineItemsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Line Item API Routes part of the [Store Cart API Routes](https://docs.medusajs.com/api/store#carts). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.carts.lineItems`"
					},
					{
						"kind": "text",
						"text": " property."
					}
				]
			},
			"children": [
				{
					"id": 12419,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12420,
							"name": "new LineItemsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12421,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12418,
								"name": "LineItemsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12422,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12423,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a Line Item with a given Product Variant and adds it to the Cart"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.create(cart_id, {\n  variant_id,\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12424,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12425,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The line item to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/create-line-item/index.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsReq"
										},
										"name": "StorePostCartsCartLineItemsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12426,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12427,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12428,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update a line item's data."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.update(cartId, lineId, {\n  quantity: 1\n})\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12429,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12430,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to update."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12431,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to update in the line item."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/update-line-item.d.ts",
											"qualifiedName": "StorePostCartsCartLineItemsItemReq"
										},
										"name": "StorePostCartsCartLineItemsItemReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12432,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12433,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12434,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Delete a line item from a cart. The payment sessions will be updated and the totals will be recalculated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the associated cart's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.carts.lineItems.delete(cartId, lineId)\n.then(({ cart }) => {\n  console.log(cart.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12435,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item's cart."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12436,
									"name": "line_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the line item to delete."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12437,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/carts/index.d.ts",
											"qualifiedName": "StoreCartsRes"
										},
										"name": "StoreCartsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12419
					]
				},
				{
					"title": "Methods",
					"children": [
						12422,
						12427,
						12433
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12438,
			"name": "OrderEditsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order Edits API Routes](https://docs.medusajs.com/api/store#order-edits). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orderEdits`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrder edits are changes made to items in an order such as adding, updating their quantity, or deleting them. Order edits are created by the admin.\nA customer can review order edit requests created by an admin and confirm or decline them.\n\nRelated Guide: [How to handle order edits in a storefront](https://docs.medusajs.com/modules/orders/storefront/handle-order-edits)."
					}
				]
			},
			"children": [
				{
					"id": 12439,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12440,
							"name": "new OrderEditsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12441,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12438,
								"name": "OrderEditsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12442,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12443,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order Edit's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.retrieve(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12444,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12445,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12446,
					"name": "decline",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12447,
							"name": "decline",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decline an Order Edit. The changes are not reflected on the original order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.decline(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12448,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12449,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decline details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/decline-order-edit.d.ts",
											"qualifiedName": "StorePostOrderEditsOrderEditDecline"
										},
										"name": "StorePostOrderEditsOrderEditDecline",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12450,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12451,
					"name": "complete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12452,
							"name": "complete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Complete and confirm an Order Edit and reflect its changes on the original order. Any additional payment required must be authorized first using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "PaymentCollectionsResource",
										"target": 12479
									},
									{
										"kind": "text",
										"text": " routes."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the order edit's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orderEdits.complete(orderEditId)\n.then(({ order_edit }) => {\n  console.log(order_edit.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12453,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the order edit."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12454,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/order-edits/index.d.ts",
											"qualifiedName": "StoreOrderEditsRes"
										},
										"name": "StoreOrderEditsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12439
					]
				},
				{
					"title": "Methods",
					"children": [
						12442,
						12446,
						12451
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12455,
			"name": "OrdersResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Order API Routes](https://docs.medusajs.com/api/store#orders). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.orders`"
					},
					{
						"kind": "text",
						"text": " property.\n\nOrders are purchases made by customers, typically through a storefront.\nOrders are placed and created using "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "CartsResource",
						"target": 12312
					},
					{
						"kind": "text",
						"text": ". The methods in this class allow retrieving and claiming orders.\n\nRelated Guide: [How to retrieve order details in a storefront](https://docs.medusajs.com/modules/orders/storefront/retrieve-order-details)."
					}
				]
			},
			"children": [
				{
					"id": 12456,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12457,
							"name": "new OrdersResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12458,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12455,
								"name": "OrdersResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12459,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12460,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an Order's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieve(orderId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12461,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12462,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12463,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12464,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve an order's details by the ID of the cart that was used to create the order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.retrieveByCartId(cartId)\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12465,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12466,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12467,
					"name": "lookupOrder",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12468,
							"name": "lookupOrder",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Look up an order using filters. If the filters don't narrow down the results to a single order, a "
									},
									{
										"kind": "code",
										"text": "`404`"
									},
									{
										"kind": "text",
										"text": " response is returned with no orders."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the details of the order."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.orders.lookupOrder({\n  display_id: 1,\n  email: \"user@example.com\"\n})\n.then(({ order }) => {\n  console.log(order.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12469,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters used to retrieve the order."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/lookup-order.d.ts",
											"qualifiedName": "StoreGetOrdersParams"
										},
										"name": "StoreGetOrdersParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12470,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/index.d.ts",
											"qualifiedName": "StoreOrdersRes"
										},
										"name": "StoreOrdersRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12471,
					"name": "requestCustomerOrders",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12472,
							"name": "requestCustomerOrders",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Allow the logged-in customer to claim ownership of one or more orders. This generates a token that can be used later on to verify the claim using the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "confirmRequest",
										"target": 12475,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method.\nThis also emits the event "
									},
									{
										"kind": "code",
										"text": "`order-update-token.created`"
									},
									{
										"kind": "text",
										"text": ". So, if you have a notification provider installed that handles this event and sends the customer a notification, such as an email,\nthe customer should receive instructions on how to finalize their claim ownership."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the request is created successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.requestCustomerOrders({\n  order_ids,\n})\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12473,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The orders to claim."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/request-order.d.ts",
											"qualifiedName": "StorePostCustomersCustomerOrderClaimReq"
										},
										"name": "StorePostCustomersCustomerOrderClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12474,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12475,
					"name": "confirmRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12476,
							"name": "confirmRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Verify the claim order token provided to the customer when they request ownership of an order."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the claim order is verified successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.orders.confirmRequest(\n  token,\n)\n.then(() => {\n  // successful\n})\n.catch(() => {\n  // an error occurred\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12477,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The claim order to verify."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/orders/confirm-order-request.d.ts",
											"qualifiedName": "StorePostCustomersCustomerAcceptClaimReq"
										},
										"name": "StorePostCustomersCustomerAcceptClaimReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12478,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12456
					]
				},
				{
					"title": "Methods",
					"children": [
						12459,
						12463,
						12467,
						12471,
						12475
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12479,
			"name": "PaymentCollectionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Payment Collection API Routes](https://docs.medusajs.com/api/store#payment-collections). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.paymentCollections`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA payment collection is useful for managing additional payments, such as for Order Edits, or installment payments."
					}
				]
			},
			"children": [
				{
					"id": 12480,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12481,
							"name": "new PaymentCollectionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12482,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12479,
								"name": "PaymentCollectionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12483,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12484,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Payment Collection's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a payment collection by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.retrieve(paymentCollectionId, {\n  expand: \"region\"\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id)\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12485,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12486,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved payment collection."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/get-payment-collection.d.ts",
											"qualifiedName": "StoreGetPaymentCollectionsParams"
										},
										"name": "StoreGetPaymentCollectionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12487,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12488,
					"name": "authorizePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12489,
							"name": "authorizePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize a Payment Session of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorize(paymentId, sessionId)\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12490,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12491,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12492,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12493,
					"name": "authorizePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12494,
							"name": "authorizePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorize the Payment Sessions of a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.authorizePaymentSessionsBatch(paymentCollectionId, {\n session_ids: [\"ps_123456\"]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12495,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12496,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of payment session IDs to authorize."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/authorize-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsAuthorizeReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12497,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12498,
					"name": "managePaymentSessionsBatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12499,
							"name": "managePaymentSessionsBatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create, update, or delete a list of payment sessions of a Payment Collections. If a payment session is not provided in the "
									},
									{
										"kind": "code",
										"text": "`sessions`"
									},
									{
										"kind": "text",
										"text": " array, it's deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To add two new payment sessions:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\n\n// Total amount = 10000\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 5000,\n    },\n    {\n      provider_id: \"manual\",\n      amount: 5000,\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo update a payment session and another one by not including it in the payload:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nmedusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n  sessions: [\n    {\n      provider_id: \"stripe\",\n      amount: 10000,\n      session_id: \"ps_123456\"\n    },\n  ]\n})\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12500,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12501,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes of each session to update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-batch-payment-sessions.d.ts",
											"qualifiedName": "StorePostPaymentCollectionsBatchSessionsReq"
										},
										"name": "StorePostPaymentCollectionsBatchSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12502,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12503,
					"name": "managePaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12504,
							"name": "managePaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Payment Session for a payment provider in a Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the payment collection's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.paymentCollections.managePaymentSession(payment_id, { provider_id: \"stripe\" })\n.then(({ payment_collection }) => {\n  console.log(payment_collection.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12505,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12506,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The payment session to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/manage-payment-session.d.ts",
											"qualifiedName": "StorePaymentCollectionSessionsReq"
										},
										"name": "StorePaymentCollectionSessionsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12507,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsRes"
										},
										"name": "StorePaymentCollectionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12508,
					"name": "refreshPaymentSession",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12509,
							"name": "refreshPaymentSession",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Refresh a Payment Session's data to ensure that it is in sync with the Payment Collection."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the refreshed payment session's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.paymentCollections.refreshPaymentSession(paymentCollectionId, sessionId)\n.then(({ payment_session }) => {\n  console.log(payment_session.status);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12510,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment collection."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12511,
									"name": "session_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the payment session."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12512,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/payment-collections/index.d.ts",
											"qualifiedName": "StorePaymentCollectionsSessionRes"
										},
										"name": "StorePaymentCollectionsSessionRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12480
					]
				},
				{
					"title": "Methods",
					"children": [
						12483,
						12488,
						12493,
						12498,
						12503,
						12508
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12513,
			"name": "PaymentMethodsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to Payment Method API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/api/store#customers_postcustomers). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.customers.paymentMethods`"
					},
					{
						"kind": "text",
						"text": " property.\n\nAll methods in this class require "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "customer authentication",
						"target": 12294
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 12514,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12515,
							"name": "new PaymentMethodsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12516,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12513,
								"name": "PaymentMethodsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12517,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12518,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the logged-in customer's saved payment methods. This method only works with payment providers created with the deprecated Payment Service interface.\nThe payment methods are saved using the Payment Service's third-party service, and not on the Medusa backend. So, they're retrieved from the third-party service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the customer's payment methods."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged\nmedusa.customers.paymentMethods.list()\n.then(({ payment_methods }) => {\n  console.log(payment_methods.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12519,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/customers/index.d.ts",
											"qualifiedName": "StoreCustomersListPaymentMethodsRes"
										},
										"name": "StoreCustomersListPaymentMethodsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12514
					]
				},
				{
					"title": "Methods",
					"children": [
						12517
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12520,
			"name": "ProductCategoriesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Category API Routes](https://docs.medusajs.com/api/store#product-categories_getproductcategories). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productCategories`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts can be categoriezed into categories. A product can be associated more than one category.\nUsing the methods in this class, you can list or retrieve a category's details and products.\n\nRelated Guide: [How to use product categories in a storefront](https://docs.medusajs.com/modules/products/storefront/use-categories)."
					}
				],
				"blockTags": [
					{
						"tag": "@featureFlag",
						"content": [
							{
								"kind": "text",
								"text": "product_categories"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 12521,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12522,
							"name": "new ProductCategoriesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12523,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12520,
								"name": "ProductCategoriesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12524,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12525,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Category's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product category's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a product category by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId)\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productCategories.retrieve(productCategoryId, {\n  expand: \"products\"\n})\n.then(({ product_category }) => {\n  console.log(product_category.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12526,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product category."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12527,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/get-product-category.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryParams"
										},
										"name": "StoreGetProductCategoriesCategoryParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12528,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesCategoryRes"
										},
										"name": "StoreGetProductCategoriesCategoryRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12529,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12530,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product categories. The product categories can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`handle`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. \nThe product categories can also be paginated. This method can also be used to retrieve a product category by its handle."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product categories with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list()\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo retrieve a product category by its handle:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  handle: \"women\",\n})\n.then(({ product_categories, limit, offset, count }) => {\n  if (!product_categories.length) {\n    // category does not exist\n  }\n  const category = product_categories[0]\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product categories:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\"\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productCategories.list({\n  expand: \"products\",\n  limit,\n  offset\n})\n.then(({ product_categories, limit, offset, count }) => {\n  console.log(product_categories.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12531,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product categories."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/list-product-categories.d.ts",
											"qualifiedName": "StoreGetProductCategoriesParams"
										},
										"name": "StoreGetProductCategoriesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12532,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-categories/index.d.ts",
											"qualifiedName": "StoreGetProductCategoriesRes"
										},
										"name": "StoreGetProductCategoriesRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12521
					]
				},
				{
					"title": "Methods",
					"children": [
						12524,
						12529
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12533,
			"name": "ProductTagsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Tag API Routes](https://docs.medusajs.com/api/store#product-tags). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTags`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct tags are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share tags."
					}
				]
			},
			"children": [
				{
					"id": 12534,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12535,
							"name": "new ProductTagsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12536,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12533,
								"name": "ProductTagsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12537,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12538,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product tags. The product tags can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product tags can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product tags with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product tags:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list()\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.productTags.list({\n  limit,\n  offset\n})\n.then(({ product_tags }) => {\n  console.log(product_tags.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12539,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved product tags."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/list-product-tags.d.ts",
											"qualifiedName": "StoreGetProductTagsParams"
										},
										"name": "StoreGetProductTagsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12540,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-tags/index.d.ts",
											"qualifiedName": "StoreProductTagsListRes"
										},
										"name": "StoreProductTagsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12534
					]
				},
				{
					"title": "Methods",
					"children": [
						12537
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12541,
			"name": "ProductTypesResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Type API Routes](https://docs.medusajs.com/api/store#product-types). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.productTypes`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct types are string values that can be used to filter products by.\nProducts can have more than one tag, and products can share types."
					}
				]
			},
			"children": [
				{
					"id": 12542,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12543,
							"name": "new ProductTypesResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12544,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12541,
								"name": "ProductTypesResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12545,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12546,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of product types. The product types can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product types can also be sorted or paginated."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product types with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product types:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list()\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`20`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.productTypes.list({\n  limit,\n  offset\n})\n.then(({ product_types }) => {\n  console.log(product_types.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12547,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on retrieved product types."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/list-product-types.d.ts",
											"qualifiedName": "StoreGetProductTypesParams"
										},
										"name": "StoreGetProductTypesParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12548,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/product-types/index.d.ts",
											"qualifiedName": "StoreProductTypesListRes"
										},
										"name": "StoreProductTypesListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12542
					]
				},
				{
					"title": "Methods",
					"children": [
						12545
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12549,
			"name": "ProductVariantsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.product.variants`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProduct variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product."
					}
				]
			},
			"children": [
				{
					"id": 12550,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12551,
							"name": "new ProductVariantsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12552,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12549,
								"name": "ProductVariantsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12553,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12554,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product Variant's details. For accurate and correct pricing of the product variant based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product variant's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.retrieve(productVariantId)\n.then(({ variant }) => {\n  console.log(variant.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12555,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the product variant."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12556,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsRes"
										},
										"name": "StoreVariantsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12557,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12558,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieves a list of product variants. The product variants can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`title`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The product variants can also be paginated.\n\nFor accurate and correct pricing of the product variants based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only variants of products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of product variants."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list()\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the product variants:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\"\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n// must be previously logged in or use api token\nmedusa.product.variants.list({\n  expand: \"product\",\n  limit,\n  offset\n})\n.then(({ variants }) => {\n  console.log(variants.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12559,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations applied on the retrieved product variants."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/list-variants.d.ts",
											"qualifiedName": "StoreGetVariantsParams"
										},
										"name": "StoreGetVariantsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12560,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/variants/index.d.ts",
											"qualifiedName": "StoreVariantsListRes"
										},
										"name": "StoreVariantsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12550
					]
				},
				{
					"title": "Methods",
					"children": [
						12553,
						12557
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12561,
			"name": "ProductsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Product API Routes](https://docs.medusajs.com/api/store#products). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.products`"
					},
					{
						"kind": "text",
						"text": " property.\n\nProducts are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/modules/gift-cards/storefront/use-gift-cards) in a store.\nUsing the methods in this class, you can filter products by categories, collections, sales channels, and more.\n\nRelated Guide: [How to show products in a storefront](https://docs.medusajs.com/modules/products/storefront/show-products)."
					}
				]
			},
			"children": [
				{
					"id": 12562,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12563,
							"name": "new ProductsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12564,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12561,
								"name": "ProductsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12565,
					"name": "variants",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "ProductVariantsResource",
								"target": 12549,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": " used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/api/store#product-variants_getvariants)."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 12549,
						"name": "ProductVariantsResource",
						"package": "@medusajs/medusa-js"
					},
					"defaultValue": "..."
				},
				{
					"id": 12566,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12567,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Product's details. For accurate and correct pricing of the product based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the current sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the product's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.retrieve(productId)\n.then(({ product }) => {\n  console.log(product.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12568,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The product's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12569,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsRes"
										},
										"name": "StoreProductsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12570,
					"name": "search",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12571,
							"name": "search",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Run a search query on products using the search service installed on the Medusa backend. The searching is handled through the search service, so the returned data's\nformat depends on the search service you're using."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of search results. The format of the items depends on the search engine installed on the Medusa backend."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.search({\n  q: \"Shirt\"\n})\n.then(({ hits }) => {\n  console.log(hits.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12572,
									"name": "searchOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fields to search products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/search.d.ts",
											"qualifiedName": "StorePostSearchReq"
										},
										"name": "StorePostSearchReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12573,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StorePostSearchRes"
										},
										"name": "StorePostSearchRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12574,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12575,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of products. The products can be filtered by fields such as "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`q`"
									},
									{
										"kind": "text",
										"text": " passed in the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter. The products can also be sorted or paginated.\nThis method can also be used to retrieve a product by its handle.\n\nFor accurate and correct pricing of the products based on the customer's context, it's highly recommended to pass fields such as\n"
									},
									{
										"kind": "code",
										"text": "`region_id`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`currency_code`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`cart_id`"
									},
									{
										"kind": "text",
										"text": " when available.\n\nPassing "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": " ensures retrieving only products available in the specified sales channel.\nYou can alternatively use a publishable API key in the request header instead of passing a "
									},
									{
										"kind": "code",
										"text": "`sales_channel_id`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of products with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To list products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list()\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the products:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\"\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`100`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`limit`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`offset`"
											},
											{
												"kind": "text",
												"text": " properties:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.products.list({\n  expand: \"variants\",\n  limit,\n  offset\n})\n.then(({ products, limit, offset, count }) => {\n  console.log(products.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12576,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Filters and pagination configurations to apply on the retrieved products."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/list-products.d.ts",
											"qualifiedName": "StoreGetProductsParams"
										},
										"name": "StoreGetProductsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12577,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/products/index.d.ts",
											"qualifiedName": "StoreProductsListRes"
										},
										"name": "StoreProductsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12562
					]
				},
				{
					"title": "Properties",
					"children": [
						12565
					]
				},
				{
					"title": "Methods",
					"children": [
						12566,
						12570,
						12574
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12578,
			"name": "RegionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Region API Routes](https://docs.medusajs.com/api/store#regions_getregions). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.regions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nRegions are different countries or geographical regions that the commerce store serves customers in.\nCustomers can choose what region they're in, which can be used to change the prices shown based on the region and its currency.\n\nRelated Guide: [How to use regions in a storefront](https://docs.medusajs.com/modules/regions-and-currencies/storefront/use-regions)."
					}
				]
			},
			"children": [
				{
					"id": 12579,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12580,
							"name": "new RegionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12581,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12578,
								"name": "RegionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12582,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12583,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of regions. This method is useful to show the customer all available regions to choose from."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of regions with pagination fields."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.list()\n.then(({ regions, count, limit, offset }) => {\n  console.log(regions.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12584,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsListRes"
										},
										"name": "StoreRegionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12585,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12586,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Region's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the region's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.regions.retrieve(regionId)\n.then(({ region }) => {\n  console.log(region.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12587,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The region's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12588,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/regions/index.d.ts",
											"qualifiedName": "StoreRegionsRes"
										},
										"name": "StoreRegionsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12579
					]
				},
				{
					"title": "Methods",
					"children": [
						12582,
						12585
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12589,
			"name": "ReturnReasonsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return Reason API Routes](https://docs.medusajs.com/api/store#return-reasons). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returnReasons`"
					},
					{
						"kind": "text",
						"text": " property.\n\nReturn reasons are key-value pairs that are used to specify why an order return is being created."
					}
				]
			},
			"children": [
				{
					"id": 12590,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12591,
							"name": "new ReturnReasonsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12592,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12589,
								"name": "ReturnReasonsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12593,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12594,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Return Reason's details."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return reason's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.retrieve(reasonId)\n.then(({ return_reason }) => {\n  console.log(return_reason.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12595,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the return reason."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12596,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsRes"
										},
										"name": "StoreReturnReasonsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12597,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12598,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of Return Reasons. This is useful when implementing a Create Return flow in the storefront."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of return reasons."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returnReasons.list()\n.then(({ return_reasons }) => {\n  console.log(return_reasons.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12599,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/return-reasons/index.d.ts",
											"qualifiedName": "StoreReturnReasonsListRes"
										},
										"name": "StoreReturnReasonsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12590
					]
				},
				{
					"title": "Methods",
					"children": [
						12593,
						12597
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12600,
			"name": "ReturnsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Return API Routes](https://docs.medusajs.com/api/store#returns). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.returns`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA return can be created by a customer to return items in an order.\n\nRelated Guide: [How to create a return in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-return)."
					}
				]
			},
			"children": [
				{
					"id": 12601,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12602,
							"name": "new ReturnsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12603,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12600,
								"name": "ReturnsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12604,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12605,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a return for an order. If a return shipping method is specified, the return is automatically fulfilled."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the return's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.returns.create({\n  order_id,\n  items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ]\n})\n.then((data) => {\n  console.log(data.return.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12606,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the return to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/create-return.d.ts",
											"qualifiedName": "StorePostReturnsReq"
										},
										"name": "StorePostReturnsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12607,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/returns/index.d.ts",
											"qualifiedName": "StoreReturnsRes"
										},
										"name": "StoreReturnsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12601
					]
				},
				{
					"title": "Methods",
					"children": [
						12604
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12608,
			"name": "ShippingOptionsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Shipping Option API Routes](https://docs.medusajs.com/api/store#shipping-options). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.shippingOptions`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA shipping option is used to define the available shipping methods during checkout or when creating a return.\n\nRelated Guide: [Shipping Option architecture](https://docs.medusajs.com/modules/carts-and-checkout/shipping#shipping-option)."
					}
				]
			},
			"children": [
				{
					"id": 12609,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12610,
							"name": "new ShippingOptionsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12611,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12608,
								"name": "ShippingOptionsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12612,
					"name": "listCartOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12613,
							"name": "listCartOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options available for a cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.listCartOptions(cartId)\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12614,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12615,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12616,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12617,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a list of shipping options. The shipping options can be filtered using the "
									},
									{
										"kind": "code",
										"text": "`query`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the list of shipping options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.shippingOptions.list()\n.then(({ shipping_options }) => {\n  console.log(shipping_options.length);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12618,
									"name": "query",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the shipping options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/list-options.d.ts",
											"qualifiedName": "StoreGetShippingOptionsParams"
										},
										"name": "StoreGetShippingOptionsParams",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12619,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/shipping-options/index.d.ts",
											"qualifiedName": "StoreShippingOptionsListRes"
										},
										"name": "StoreShippingOptionsListRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12609
					]
				},
				{
					"title": "Methods",
					"children": [
						12612,
						12616
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		},
		{
			"id": 12620,
			"name": "SwapsResource",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This class is used to send requests to [Store Swap API Routes](https://docs.medusajs.com/api/store#swaps). All its method\nare available in the JS Client under the "
					},
					{
						"kind": "code",
						"text": "`medusa.swaps`"
					},
					{
						"kind": "text",
						"text": " property.\n\nA swap is created by a customer or an admin to exchange an item with a new one.\nCreating a swap implicitely includes creating a return for the item being exchanged.\n\nRelated Guide: [How to create a swap in a storefront](https://docs.medusajs.com/modules/orders/storefront/create-swap)"
					}
				]
			},
			"children": [
				{
					"id": 12621,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 12622,
							"name": "new SwapsResource",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 12623,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa-js/src/request.ts",
											"qualifiedName": "Client"
										},
										"name": "Client",
										"package": "@medusajs/medusa-js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 12620,
								"name": "SwapsResource",
								"package": "@medusajs/medusa-js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseResource.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "BaseResource.constructor"
					}
				},
				{
					"id": 12624,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12625,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a Swap for an Order. This will also create a return and associate it with the swap. If a return shipping option is specified, the return will automatically be fulfilled.\nTo complete the swap, you must use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "CartsResource.complete",
										"target": 12322
									},
									{
										"kind": "text",
										"text": " method passing it the ID of the swap's cart.\n\nAn idempotency key will be generated if none is provided in the header "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " and added to\nthe response. If an error occurs during swap creation or the request is interrupted for any reason, the swap creation can be retried by passing the idempotency\nkey in the "
									},
									{
										"kind": "code",
										"text": "`Idempotency-Key`"
									},
									{
										"kind": "text",
										"text": " header."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.create({\n  order_id,\n  return_items: [\n    {\n      item_id,\n      quantity: 1\n    }\n  ],\n  additional_items: [\n    {\n      variant_id,\n      quantity: 1\n    }\n  ]\n})\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12626,
									"name": "payload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data of the swap to be created."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/create-swap.d.ts",
											"qualifiedName": "StorePostSwapsReq"
										},
										"name": "StorePostSwapsReq",
										"package": "@medusajs/medusa"
									}
								},
								{
									"id": 12627,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				},
				{
					"id": 12628,
					"name": "retrieveByCartId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12629,
							"name": "retrieveByCartId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve a Swap's details by the ID of its cart."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves to the swap's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport Medusa from \"@medusajs/medusa-js\"\nconst medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\nmedusa.swaps.retrieveByCartId(cartId)\n.then(({ swap }) => {\n  console.log(swap.id);\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12630,
									"name": "cart_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart's ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 12631,
									"name": "customHeaders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Custom headers to attach to the request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../packages/medusa-js/src/typings.ts",
									"qualifiedName": "ResponsePromise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../packages/medusa/dist/api/routes/store/swaps/index.d.ts",
											"qualifiedName": "StoreSwapsRes"
										},
										"name": "StoreSwapsRes",
										"package": "@medusajs/medusa"
									}
								],
								"name": "ResponsePromise",
								"package": "@medusajs/medusa-js"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						12621
					]
				},
				{
					"title": "Methods",
					"children": [
						12624,
						12628
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
						"qualifiedName": "default"
					},
					"name": "default",
					"package": "@medusajs/medusa-js"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				12273,
				12700,
				12718,
				12742,
				12777,
				12674,
				12790,
				12831,
				12852,
				12939,
				12984,
				12632,
				13009,
				13060,
				13083,
				13108,
				13252,
				13121,
				13917,
				13939,
				13311,
				13957,
				13366,
				13373,
				13381,
				13454,
				13498,
				13557,
				13582,
				13606,
				13623,
				13668,
				13693,
				13717,
				13742,
				13767,
				13779,
				13843,
				13867,
				13900,
				12290,
				12312,
				12369,
				12381,
				12410,
				12418,
				12438,
				12455,
				12479,
				12513,
				12520,
				12533,
				12541,
				12549,
				12561,
				12578,
				12589,
				12600,
				12608,
				12620
			]
		}
	],
	"packageName": "@medusajs/medusa-js",
	"symbolIdMap": {
		"12272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/index.ts",
			"qualifiedName": ""
		},
		"12273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource"
		},
		"12274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AddressesResource"
		},
		"12276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"12278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.addAddress"
		},
		"12279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"12280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"12281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"12282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.deleteAddress"
		},
		"12283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"12284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"12285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"12286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "AddressesResource.updateAddress"
		},
		"12287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "address_id"
		},
		"12288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "payload"
		},
		"12289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/addresses.ts",
			"qualifiedName": "customHeaders"
		},
		"12290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource"
		},
		"12291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AuthResource"
		},
		"12293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"12295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.authenticate"
		},
		"12296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"12297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"12299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.deleteSession"
		},
		"12300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"12302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getSession"
		},
		"12303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"12305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.exists"
		},
		"12306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "email"
		},
		"12307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"12309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "AuthResource.getToken"
		},
		"12310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "payload"
		},
		"12311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource"
		},
		"12313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CartsResource"
		},
		"12315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.lineItems"
		},
		"12317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"12318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.addShippingMethod"
		},
		"12319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"12321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"12323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.complete"
		},
		"12324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"12327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.create"
		},
		"12328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"12329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"12331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.createPaymentSessions"
		},
		"12332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"12335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deleteDiscount"
		},
		"12336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "code"
		},
		"12338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"12340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.deletePaymentSession"
		},
		"12341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"12343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"12345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.refreshPaymentSession"
		},
		"12346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"12348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"12350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.retrieve"
		},
		"12351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"12354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.setPaymentSession"
		},
		"12355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"12357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"12359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.update"
		},
		"12360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"12362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"12364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "CartsResource.updatePaymentSession"
		},
		"12365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "cart_id"
		},
		"12366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "provider_id"
		},
		"12367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "payload"
		},
		"12368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/carts.ts",
			"qualifiedName": "customHeaders"
		},
		"12369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource"
		},
		"12370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CollectionsResource"
		},
		"12372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"12374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.retrieve"
		},
		"12375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "id"
		},
		"12376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"12378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "CollectionsResource.list"
		},
		"12379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "query"
		},
		"12380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource"
		},
		"12382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "CustomerResource"
		},
		"12384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.paymentMethods"
		},
		"12386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.addresses"
		},
		"12387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"12388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.create"
		},
		"12389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"12390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"12392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.retrieve"
		},
		"12393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"12395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.update"
		},
		"12396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"12397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"12399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.listOrders"
		},
		"12400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "params"
		},
		"12401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"12403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.resetPassword"
		},
		"12404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"12405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12406": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"12407": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "CustomerResource.generatePasswordToken"
		},
		"12408": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "payload"
		},
		"12409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"12411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "GiftCardsResource"
		},
		"12413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"12415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "GiftCardsResource.retrieve"
		},
		"12416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "code"
		},
		"12417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"12418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource"
		},
		"12419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "LineItemsResource"
		},
		"12421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"12423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.create"
		},
		"12424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"12425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"12426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"12427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"12428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.update"
		},
		"12429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"12430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"12431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "payload"
		},
		"12432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"12433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"12434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "LineItemsResource.delete"
		},
		"12435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "cart_id"
		},
		"12436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "line_id"
		},
		"12437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/line-items.ts",
			"qualifiedName": "customHeaders"
		},
		"12438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"12439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrderEditsResource"
		},
		"12441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"12443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.retrieve"
		},
		"12444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"12445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"12447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.decline"
		},
		"12448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"12449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "payload"
		},
		"12450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"12452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "OrderEditsResource.complete"
		},
		"12453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "id"
		},
		"12454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"12455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource"
		},
		"12456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "OrdersResource"
		},
		"12458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"12460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieve"
		},
		"12461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "id"
		},
		"12462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"12464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.retrieveByCartId"
		},
		"12465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "cart_id"
		},
		"12466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"12468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.lookupOrder"
		},
		"12469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"12470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"12472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.requestCustomerOrders"
		},
		"12473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"12474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"12476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "OrdersResource.confirmRequest"
		},
		"12477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "payload"
		},
		"12478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"12480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentCollectionsResource"
		},
		"12482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"12484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.retrieve"
		},
		"12485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "query"
		},
		"12487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"12489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSession"
		},
		"12490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"12492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"12494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.authorizePaymentSessionsBatch"
		},
		"12495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"12497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"12499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSessionsBatch"
		},
		"12500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"12502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"12504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.managePaymentSession"
		},
		"12505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"12507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"12509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "PaymentCollectionsResource.refreshPaymentSession"
		},
		"12510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "id"
		},
		"12511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "session_id"
		},
		"12512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"12514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "PaymentMethodsResource"
		},
		"12516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"12518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "PaymentMethodsResource.list"
		},
		"12519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/payment-methods.ts",
			"qualifiedName": "customHeaders"
		},
		"12520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"12521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductCategoriesResource"
		},
		"12523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"12525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.retrieve"
		},
		"12526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "id"
		},
		"12527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"12528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"12530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "ProductCategoriesResource.list"
		},
		"12531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "query"
		},
		"12532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"12533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"12534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTagsResource"
		},
		"12536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"12538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "ProductTagsResource.list"
		},
		"12539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "query"
		},
		"12540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-tags.ts",
			"qualifiedName": "customHeaders"
		},
		"12541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"12542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductTypesResource"
		},
		"12544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"12546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "ProductTypesResource.list"
		},
		"12547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "query"
		},
		"12548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"12549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"12550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductVariantsResource"
		},
		"12552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"12554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.retrieve"
		},
		"12555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "id"
		},
		"12556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"12557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"12558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "ProductVariantsResource.list"
		},
		"12559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "query"
		},
		"12560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/product-variants.ts",
			"qualifiedName": "customHeaders"
		},
		"12561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource"
		},
		"12562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ProductsResource"
		},
		"12564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.variants"
		},
		"12566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"12567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.retrieve"
		},
		"12568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "id"
		},
		"12569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"12571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.search"
		},
		"12572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "searchOptions"
		},
		"12573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"12575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "ProductsResource.list"
		},
		"12576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "query"
		},
		"12577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/products.ts",
			"qualifiedName": "customHeaders"
		},
		"12578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource"
		},
		"12579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "RegionsResource"
		},
		"12581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"12583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.list"
		},
		"12584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"12586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "RegionsResource.retrieve"
		},
		"12587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "id"
		},
		"12588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"12589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"12590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnReasonsResource"
		},
		"12592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"12594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.retrieve"
		},
		"12595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "id"
		},
		"12596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"12598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "ReturnReasonsResource.list"
		},
		"12599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"12600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource"
		},
		"12601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ReturnsResource"
		},
		"12603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"12605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "ReturnsResource.create"
		},
		"12606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "payload"
		},
		"12607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"12608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"12609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "ShippingOptionsResource"
		},
		"12611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"12613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.listCartOptions"
		},
		"12614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "cart_id"
		},
		"12615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"12617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "ShippingOptionsResource.list"
		},
		"12618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "query"
		},
		"12619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"12620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource"
		},
		"12621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "SwapsResource"
		},
		"12623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"12625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.create"
		},
		"12626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "payload"
		},
		"12627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"12628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"12629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "SwapsResource.retrieveByCartId"
		},
		"12630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "cart_id"
		},
		"12631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"12632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin"
		},
		"12633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "Admin"
		},
		"12635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.auth"
		},
		"12637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.batchJobs"
		},
		"12638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customers"
		},
		"12639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.customerGroups"
		},
		"12640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.discounts"
		},
		"12641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.currencies"
		},
		"12642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.collections"
		},
		"12643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.draftOrders"
		},
		"12644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.giftCards"
		},
		"12645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.invites"
		},
		"12646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.inventoryItems"
		},
		"12647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notes"
		},
		"12648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.priceLists"
		},
		"12649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.products"
		},
		"12650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTags"
		},
		"12651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productTypes"
		},
		"12652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.users"
		},
		"12653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returns"
		},
		"12654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orders"
		},
		"12655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.orderEdits"
		},
		"12656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.publishableApiKeys"
		},
		"12657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.returnReasons"
		},
		"12658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.variants"
		},
		"12659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.salesChannels"
		},
		"12660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.swaps"
		},
		"12661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingProfiles"
		},
		"12662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.stockLocations"
		},
		"12663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.store"
		},
		"12664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.shippingOptions"
		},
		"12665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.regions"
		},
		"12666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.reservations"
		},
		"12667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.notifications"
		},
		"12668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.taxRates"
		},
		"12669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.uploads"
		},
		"12670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.paymentCollections"
		},
		"12671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.payments"
		},
		"12672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.productCategories"
		},
		"12673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/index.ts",
			"qualifiedName": "Admin.custom"
		},
		"12674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"12675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomResource"
		},
		"12677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"12679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.get"
		},
		"12680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TQuery"
		},
		"12681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"12682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"12683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "query"
		},
		"12684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"12685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"12686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"12687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.post"
		},
		"12688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TPayload"
		},
		"12689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"12690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"12691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "payload"
		},
		"12692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"12693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"12694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"12695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "AdminCustomResource.delete"
		},
		"12696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "TResponse"
		},
		"12697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "path"
		},
		"12698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "options"
		},
		"12699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/custom.ts",
			"qualifiedName": "customHeaders"
		},
		"12700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"12701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminAuthResource"
		},
		"12703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"12705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getSession"
		},
		"12706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"12708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.deleteSession"
		},
		"12709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"12711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.createSession"
		},
		"12712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"12713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"12715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "AdminAuthResource.getToken"
		},
		"12716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "payload"
		},
		"12717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/auth.ts",
			"qualifiedName": "customHeaders"
		},
		"12718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"12719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminBatchJobsResource"
		},
		"12721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"12723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.create"
		},
		"12724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "payload"
		},
		"12725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"12726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"12727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.list"
		},
		"12728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "query"
		},
		"12729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"12730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"12731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.cancel"
		},
		"12732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"12733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"12734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"12735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.confirm"
		},
		"12736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"12737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"12738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"12739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "AdminBatchJobsResource.retrieve"
		},
		"12740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "batchJobId"
		},
		"12741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/batch-jobs.ts",
			"qualifiedName": "customHeaders"
		},
		"12742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"12743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCollectionsResource"
		},
		"12745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"12747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.create"
		},
		"12748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"12749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"12751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.update"
		},
		"12752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"12753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"12754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12755": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"12756": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.delete"
		},
		"12757": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"12758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"12760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.retrieve"
		},
		"12761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"12762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"12764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.list"
		},
		"12765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "query"
		},
		"12766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"12768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.addProducts"
		},
		"12769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"12770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"12771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"12773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "AdminCollectionsResource.removeProducts"
		},
		"12774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "id"
		},
		"12775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "payload"
		},
		"12776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/collections.ts",
			"qualifiedName": "customHeaders"
		},
		"12777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"12778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCurrenciesResource"
		},
		"12780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"12782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.list"
		},
		"12783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "query"
		},
		"12784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"12785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"12786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "AdminCurrenciesResource.update"
		},
		"12787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "code"
		},
		"12788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "payload"
		},
		"12789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/currencies.ts",
			"qualifiedName": "customHeaders"
		},
		"12790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"12791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomerGroupsResource"
		},
		"12793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"12795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.create"
		},
		"12796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"12797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"12799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.retrieve"
		},
		"12800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"12802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"12804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.update"
		},
		"12805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"12807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"12809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.delete"
		},
		"12810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"12813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.list"
		},
		"12814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"12815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"12817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.addCustomers"
		},
		"12818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"12820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"12822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.removeCustomers"
		},
		"12823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "payload"
		},
		"12825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"12827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "AdminCustomerGroupsResource.listCustomers"
		},
		"12828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "id"
		},
		"12829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "query"
		},
		"12830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customer-groups.ts",
			"qualifiedName": "customHeaders"
		},
		"12831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"12832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminCustomersResource"
		},
		"12834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"12836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.create"
		},
		"12837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"12838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"12840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.update"
		},
		"12841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"12842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "payload"
		},
		"12843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"12845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.retrieve"
		},
		"12846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "id"
		},
		"12847": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12848": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"12849": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "AdminCustomersResource.list"
		},
		"12850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "query"
		},
		"12851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/customers.ts",
			"qualifiedName": "customHeaders"
		},
		"12852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"12853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDiscountsResource"
		},
		"12855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"12857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addRegion"
		},
		"12858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"12860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"12862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.create"
		},
		"12863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"12866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.update"
		},
		"12867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"12871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createDynamicCode"
		},
		"12872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"12876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.delete"
		},
		"12877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"12880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteDynamicCode"
		},
		"12881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"12883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"12885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieve"
		},
		"12886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"12890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.retrieveByCode"
		},
		"12891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "code"
		},
		"12892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"12894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.list"
		},
		"12895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"12898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.removeRegion"
		},
		"12899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "id"
		},
		"12900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "regionId"
		},
		"12901": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12902": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"12903": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.createCondition"
		},
		"12904": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12905": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12906": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12907": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12908": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"12909": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.updateCondition"
		},
		"12910": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12911": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"12912": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12913": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12914": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12915": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"12916": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteCondition"
		},
		"12917": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12918": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"12919": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12920": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"12921": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.getCondition"
		},
		"12922": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12923": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"12924": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12925": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12926": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"12927": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.addConditionResourceBatch"
		},
		"12928": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12929": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"12930": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12931": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "query"
		},
		"12932": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12933": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"12934": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "AdminDiscountsResource.deleteConditionResourceBatch"
		},
		"12935": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "discountId"
		},
		"12936": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "conditionId"
		},
		"12937": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "payload"
		},
		"12938": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/discounts.ts",
			"qualifiedName": "customHeaders"
		},
		"12939": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"12940": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12941": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminDraftOrdersResource"
		},
		"12942": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12943": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"12944": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.create"
		},
		"12945": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"12946": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12947": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"12948": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.addLineItem"
		},
		"12949": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12950": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"12951": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12952": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"12953": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.delete"
		},
		"12954": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12955": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12956": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"12957": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.removeLineItem"
		},
		"12958": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12959": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"12960": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12961": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"12962": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.retrieve"
		},
		"12963": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12964": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12965": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"12966": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.list"
		},
		"12967": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "query"
		},
		"12968": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12969": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"12970": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.markPaid"
		},
		"12971": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12972": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12973": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"12974": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.update"
		},
		"12975": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12976": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"12977": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12978": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"12979": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "AdminDraftOrdersResource.updateLineItem"
		},
		"12980": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "id"
		},
		"12981": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "itemId"
		},
		"12982": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "payload"
		},
		"12983": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/draft-orders.ts",
			"qualifiedName": "customHeaders"
		},
		"12984": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"12985": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"12986": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminGiftCardsResource"
		},
		"12987": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"12988": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"12989": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.create"
		},
		"12990": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"12991": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"12992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"12993": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.update"
		},
		"12994": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"12995": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "payload"
		},
		"12996": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"12997": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"12998": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.delete"
		},
		"12999": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"13000": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"13001": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"13002": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.retrieve"
		},
		"13003": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "id"
		},
		"13004": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"13005": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"13006": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "AdminGiftCardsResource.list"
		},
		"13007": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "query"
		},
		"13008": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/gift-cards.ts",
			"qualifiedName": "customHeaders"
		},
		"13009": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"13010": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13011": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInventoryItemsResource"
		},
		"13012": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13013": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"13014": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.retrieve"
		},
		"13015": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13016": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13017": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13018": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"13019": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.update"
		},
		"13020": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13021": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"13022": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13023": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13024": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"13025": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.delete"
		},
		"13026": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13027": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13028": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"13029": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.create"
		},
		"13030": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"13031": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13032": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13033": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"13034": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.list"
		},
		"13035": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13036": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13037": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"13038": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.updateLocationLevel"
		},
		"13039": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13040": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"13041": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"13042": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13043": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13044": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"13045": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.createLocationLevel"
		},
		"13046": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13047": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "payload"
		},
		"13048": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13049": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13050": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"13051": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.deleteLocationLevel"
		},
		"13052": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13053": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "locationId"
		},
		"13054": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13055": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"13056": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "AdminInventoryItemsResource.listLocationLevels"
		},
		"13057": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "inventoryItemId"
		},
		"13058": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "query"
		},
		"13059": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/inventory-item.ts",
			"qualifiedName": "customHeaders"
		},
		"13060": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"13061": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13062": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminInvitesResource"
		},
		"13063": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13064": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"13065": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.accept"
		},
		"13066": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"13067": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"13068": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"13069": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.create"
		},
		"13070": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "payload"
		},
		"13071": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"13072": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"13073": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.delete"
		},
		"13074": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"13075": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"13076": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"13077": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.list"
		},
		"13078": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"13079": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"13080": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "AdminInvitesResource.resend"
		},
		"13081": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "id"
		},
		"13082": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/invites.ts",
			"qualifiedName": "customHeaders"
		},
		"13083": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"13084": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13085": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotesResource"
		},
		"13086": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13087": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"13088": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.create"
		},
		"13089": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"13090": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"13091": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"13092": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.update"
		},
		"13093": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"13094": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "payload"
		},
		"13095": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"13096": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"13097": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.delete"
		},
		"13098": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"13099": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"13100": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"13101": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.retrieve"
		},
		"13102": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "id"
		},
		"13103": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"13104": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"13105": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "AdminNotesResource.list"
		},
		"13106": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "query"
		},
		"13107": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notes.ts",
			"qualifiedName": "customHeaders"
		},
		"13108": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"13109": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13110": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminNotificationsResource"
		},
		"13111": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13112": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"13113": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.list"
		},
		"13114": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "query"
		},
		"13115": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"13116": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"13117": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "AdminNotificationsResource.resend"
		},
		"13118": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "id"
		},
		"13119": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "payload"
		},
		"13120": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/notifications.ts",
			"qualifiedName": "customHeaders"
		},
		"13121": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"13122": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13123": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrdersResource"
		},
		"13124": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13125": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"13126": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.update"
		},
		"13127": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13128": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13129": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13130": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"13131": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.retrieve"
		},
		"13132": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13133": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"13134": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13135": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"13136": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.list"
		},
		"13137": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "query"
		},
		"13138": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13139": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"13140": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.complete"
		},
		"13141": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13142": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13143": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"13144": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.capturePayment"
		},
		"13145": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13146": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13147": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"13148": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.refundPayment"
		},
		"13149": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13150": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13151": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13152": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"13153": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createFulfillment"
		},
		"13154": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13155": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13156": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13157": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"13158": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelFulfillment"
		},
		"13159": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13160": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"13161": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13162": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"13163": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwapFulfillment"
		},
		"13164": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13165": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"13166": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"13167": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13168": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"13169": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaimFulfillment"
		},
		"13170": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13171": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"13172": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "fulfillmentId"
		},
		"13173": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13174": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"13175": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createShipment"
		},
		"13176": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13177": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13178": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13179": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"13180": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.requestReturn"
		},
		"13181": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13182": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13183": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13184": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"13185": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancel"
		},
		"13186": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13187": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13188": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"13189": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.addShippingMethod"
		},
		"13190": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13191": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13192": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13193": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"13194": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.archive"
		},
		"13195": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13196": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13197": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"13198": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwap"
		},
		"13199": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13200": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13201": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13202": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"13203": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelSwap"
		},
		"13204": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13205": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"13206": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13207": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"13208": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillSwap"
		},
		"13209": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13210": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"13211": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13212": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13213": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"13214": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createSwapShipment"
		},
		"13215": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13216": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"13217": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13218": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13219": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"13220": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.processSwapPayment"
		},
		"13221": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13222": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "swapId"
		},
		"13223": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13224": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"13225": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaim"
		},
		"13226": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13227": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13228": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13229": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"13230": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.cancelClaim"
		},
		"13231": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13232": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"13233": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13234": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"13235": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.updateClaim"
		},
		"13236": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13237": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"13238": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13239": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13240": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"13241": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.fulfillClaim"
		},
		"13242": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13243": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"13244": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13245": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13246": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"13247": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "AdminOrdersResource.createClaimShipment"
		},
		"13248": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "id"
		},
		"13249": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "claimId"
		},
		"13250": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "payload"
		},
		"13251": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/orders.ts",
			"qualifiedName": "customHeaders"
		},
		"13252": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"13253": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13254": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminOrderEditsResource"
		},
		"13255": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13256": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"13257": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.retrieve"
		},
		"13258": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13259": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"13260": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13261": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"13262": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.list"
		},
		"13263": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "query"
		},
		"13264": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13265": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"13266": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.create"
		},
		"13267": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"13268": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13269": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"13270": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.update"
		},
		"13271": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13272": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"13273": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13274": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"13275": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.delete"
		},
		"13276": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13277": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13278": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"13279": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.addLineItem"
		},
		"13280": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13281": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"13282": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13283": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"13284": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.deleteItemChange"
		},
		"13285": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"13286": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemChangeId"
		},
		"13287": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13288": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"13289": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.requestConfirmation"
		},
		"13290": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13291": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13292": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"13293": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.cancel"
		},
		"13294": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13295": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13296": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"13297": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.confirm"
		},
		"13298": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "id"
		},
		"13299": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13300": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"13301": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.updateLineItem"
		},
		"13302": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"13303": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"13304": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "payload"
		},
		"13305": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13306": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"13307": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "AdminOrderEditsResource.removeLineItem"
		},
		"13308": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "orderEditId"
		},
		"13309": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "itemId"
		},
		"13310": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/order-edits.ts",
			"qualifiedName": "customHeaders"
		},
		"13311": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"13312": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13313": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPriceListResource"
		},
		"13314": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13315": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"13316": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.create"
		},
		"13317": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"13318": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13319": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"13320": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.update"
		},
		"13321": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13322": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"13323": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13324": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"13325": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.delete"
		},
		"13326": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13327": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13328": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"13329": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.retrieve"
		},
		"13330": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13331": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13332": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"13333": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.list"
		},
		"13334": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"13335": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13336": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"13337": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.listProducts"
		},
		"13338": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13339": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "query"
		},
		"13340": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13341": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"13342": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.addPrices"
		},
		"13343": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13344": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"13345": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13346": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"13347": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deletePrices"
		},
		"13348": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "id"
		},
		"13349": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"13350": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13351": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"13352": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductPrices"
		},
		"13353": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"13354": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "productId"
		},
		"13355": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13356": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"13357": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteVariantPrices"
		},
		"13358": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"13359": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "variantId"
		},
		"13360": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13361": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"13362": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "AdminPriceListResource.deleteProductsPrices"
		},
		"13363": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "priceListId"
		},
		"13364": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "payload"
		},
		"13365": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/price-lists.ts",
			"qualifiedName": "customHeaders"
		},
		"13366": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"13367": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13368": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTagsResource"
		},
		"13369": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13370": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"13371": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "AdminProductTagsResource.list"
		},
		"13372": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-tags.ts",
			"qualifiedName": "query"
		},
		"13373": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"13374": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13375": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductTypesResource"
		},
		"13376": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13377": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"13378": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "AdminProductTypesResource.list"
		},
		"13379": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "query"
		},
		"13380": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-types.ts",
			"qualifiedName": "customHeaders"
		},
		"13381": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"13382": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13383": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductsResource"
		},
		"13384": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13385": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"13386": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.create"
		},
		"13387": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13388": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13389": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"13390": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.retrieve"
		},
		"13391": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13392": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13393": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"13394": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.update"
		},
		"13395": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13396": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13397": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13398": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"13399": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.delete"
		},
		"13400": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13401": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13402": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"13403": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.list"
		},
		"13404": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"13405": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13409": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"13410": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listTags"
		},
		"13411": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13412": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"13413": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.setMetadata"
		},
		"13414": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13415": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13416": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13417": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"13418": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.createVariant"
		},
		"13419": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13420": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13421": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13422": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"13423": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateVariant"
		},
		"13424": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13425": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"13426": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13427": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13428": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"13429": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteVariant"
		},
		"13430": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13431": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "variantId"
		},
		"13432": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13433": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"13434": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.listVariants"
		},
		"13435": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13436": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "query"
		},
		"13437": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13438": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"13439": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.addOption"
		},
		"13440": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13441": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13442": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13443": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"13444": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.updateOption"
		},
		"13445": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13446": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"13447": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "payload"
		},
		"13448": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13449": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"13450": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "AdminProductsResource.deleteOption"
		},
		"13451": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "id"
		},
		"13452": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "optionId"
		},
		"13453": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/products.ts",
			"qualifiedName": "customHeaders"
		},
		"13454": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"13455": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13456": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPublishableApiKeyResource"
		},
		"13457": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13458": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"13459": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.retrieve"
		},
		"13460": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13461": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13462": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"13463": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.list"
		},
		"13464": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"13465": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13466": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"13467": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.create"
		},
		"13468": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"13469": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13470": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"13471": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.update"
		},
		"13472": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13473": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"13474": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13475": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"13476": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.delete"
		},
		"13477": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13478": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13479": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"13480": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.revoke"
		},
		"13481": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13482": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13483": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"13484": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.addSalesChannelsBatch"
		},
		"13485": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13486": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"13487": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13488": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"13489": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.deleteSalesChannelsBatch"
		},
		"13490": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13491": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "payload"
		},
		"13492": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13493": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"13494": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "AdminPublishableApiKeyResource.listSalesChannels"
		},
		"13495": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "id"
		},
		"13496": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "query"
		},
		"13497": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/publishable-api-keys.ts",
			"qualifiedName": "customHeaders"
		},
		"13498": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"13499": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13500": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminRegionsResource"
		},
		"13501": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13502": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"13503": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.create"
		},
		"13504": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"13505": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13506": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"13507": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.update"
		},
		"13508": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13509": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"13510": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13511": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"13512": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.delete"
		},
		"13513": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13514": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13515": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"13516": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieve"
		},
		"13517": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13518": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13519": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"13520": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.list"
		},
		"13521": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "query"
		},
		"13522": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13523": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"13524": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addCountry"
		},
		"13525": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13526": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"13527": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13528": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"13529": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteCountry"
		},
		"13530": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13531": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "country_code"
		},
		"13532": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13533": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"13534": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addFulfillmentProvider"
		},
		"13535": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13536": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"13537": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13538": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"13539": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deleteFulfillmentProvider"
		},
		"13540": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13541": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"13542": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13543": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"13544": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.retrieveFulfillmentOptions"
		},
		"13545": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13546": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13547": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"13548": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.addPaymentProvider"
		},
		"13549": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13550": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "payload"
		},
		"13551": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13552": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"13553": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "AdminRegionsResource.deletePaymentProvider"
		},
		"13554": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "id"
		},
		"13555": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "provider_id"
		},
		"13556": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/regions.ts",
			"qualifiedName": "customHeaders"
		},
		"13557": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"13558": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13559": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReservationsResource"
		},
		"13560": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13561": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"13562": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.retrieve"
		},
		"13563": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"13564": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"13565": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"13566": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.list"
		},
		"13567": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "query"
		},
		"13568": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"13569": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"13570": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.create"
		},
		"13571": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"13572": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"13573": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"13574": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.update"
		},
		"13575": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"13576": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "payload"
		},
		"13577": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"13578": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"13579": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "AdminReservationsResource.delete"
		},
		"13580": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "id"
		},
		"13581": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/reservations.ts",
			"qualifiedName": "customHeaders"
		},
		"13582": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"13583": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13584": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnReasonsResource"
		},
		"13585": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13586": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"13587": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.create"
		},
		"13588": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"13589": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"13590": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"13591": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.update"
		},
		"13592": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"13593": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "payload"
		},
		"13594": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"13595": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"13596": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.delete"
		},
		"13597": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"13598": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"13599": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"13600": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.retrieve"
		},
		"13601": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "id"
		},
		"13602": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"13603": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"13604": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "AdminReturnReasonsResource.list"
		},
		"13605": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/return-reasons.ts",
			"qualifiedName": "customHeaders"
		},
		"13606": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"13607": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13608": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminReturnsResource"
		},
		"13609": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13610": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"13611": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.cancel"
		},
		"13612": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"13613": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"13614": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"13615": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.receive"
		},
		"13616": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "id"
		},
		"13617": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "payload"
		},
		"13618": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"13619": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"13620": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "AdminReturnsResource.list"
		},
		"13621": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "query"
		},
		"13622": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/returns.ts",
			"qualifiedName": "customHeaders"
		},
		"13623": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"13624": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13625": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSalesChannelsResource"
		},
		"13626": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13627": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"13628": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.retrieve"
		},
		"13629": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13630": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13631": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"13632": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.create"
		},
		"13633": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13634": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13635": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"13636": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.update"
		},
		"13637": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13638": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13639": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13640": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"13641": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.list"
		},
		"13642": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "query"
		},
		"13643": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13644": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"13645": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.delete"
		},
		"13646": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13647": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13648": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"13649": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeProducts"
		},
		"13650": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13651": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13652": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13653": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"13654": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addProducts"
		},
		"13655": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13656": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13657": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13658": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"13659": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.addLocation"
		},
		"13660": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13661": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13662": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13663": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"13664": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "AdminSalesChannelsResource.removeLocation"
		},
		"13665": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "salesChannelId"
		},
		"13666": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "payload"
		},
		"13667": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/sales-channels.ts",
			"qualifiedName": "customHeaders"
		},
		"13668": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"13669": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13670": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingOptionsResource"
		},
		"13671": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13672": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"13673": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.create"
		},
		"13674": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"13675": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"13676": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"13677": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.update"
		},
		"13678": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"13679": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "payload"
		},
		"13680": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"13681": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"13682": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.delete"
		},
		"13683": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"13684": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"13685": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"13686": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.retrieve"
		},
		"13687": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "id"
		},
		"13688": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"13689": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"13690": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "AdminShippingOptionsResource.list"
		},
		"13691": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "query"
		},
		"13692": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-options.ts",
			"qualifiedName": "customHeaders"
		},
		"13693": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"13694": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13695": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminShippingProfilesResource"
		},
		"13696": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13697": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"13698": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.create"
		},
		"13699": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"13700": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"13701": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"13702": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.update"
		},
		"13703": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"13704": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "payload"
		},
		"13705": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"13706": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"13707": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.delete"
		},
		"13708": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"13709": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"13710": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"13711": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.retrieve"
		},
		"13712": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "id"
		},
		"13713": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"13714": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"13715": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "AdminShippingProfilesResource.list"
		},
		"13716": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/shipping-profiles.ts",
			"qualifiedName": "customHeaders"
		},
		"13717": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"13718": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13719": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStockLocationsResource"
		},
		"13720": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13721": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"13722": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.create"
		},
		"13723": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"13724": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"13725": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"13726": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.retrieve"
		},
		"13727": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "itemId"
		},
		"13728": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"13729": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"13730": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.update"
		},
		"13731": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "stockLocationId"
		},
		"13732": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "payload"
		},
		"13733": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"13734": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"13735": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.delete"
		},
		"13736": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "id"
		},
		"13737": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"13738": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"13739": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "AdminStockLocationsResource.list"
		},
		"13740": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "query"
		},
		"13741": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/stock-locations.ts",
			"qualifiedName": "customHeaders"
		},
		"13742": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"13743": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13744": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminStoresResource"
		},
		"13745": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13746": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"13747": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.update"
		},
		"13748": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "payload"
		},
		"13749": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13750": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"13751": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.addCurrency"
		},
		"13752": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"13753": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13754": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"13755": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.deleteCurrency"
		},
		"13756": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "currency_code"
		},
		"13757": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13758": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"13759": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.retrieve"
		},
		"13760": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13761": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"13762": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listPaymentProviders"
		},
		"13763": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13764": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"13765": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "AdminStoresResource.listTaxProviders"
		},
		"13766": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/store.ts",
			"qualifiedName": "customHeaders"
		},
		"13767": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"13768": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13769": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminSwapsResource"
		},
		"13770": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13771": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"13772": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.retrieve"
		},
		"13773": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "id"
		},
		"13774": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"13775": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"13776": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "AdminSwapsResource.list"
		},
		"13777": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "query"
		},
		"13778": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/swaps.ts",
			"qualifiedName": "customHeaders"
		},
		"13779": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"13780": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13781": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminTaxRatesResource"
		},
		"13782": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13783": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"13784": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.retrieve"
		},
		"13785": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13786": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13787": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13788": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"13789": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.list"
		},
		"13790": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13791": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13792": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"13793": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.create"
		},
		"13794": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13795": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13796": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13797": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"13798": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.update"
		},
		"13799": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13800": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13801": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13802": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13803": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"13804": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProducts"
		},
		"13805": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13806": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13807": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13808": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13809": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"13810": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addProductTypes"
		},
		"13811": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13812": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13813": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13814": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13815": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"13816": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.addShippingOptions"
		},
		"13817": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13818": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13819": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13820": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13821": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"13822": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProducts"
		},
		"13823": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13824": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13825": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13826": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13827": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"13828": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeProductTypes"
		},
		"13829": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13830": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13831": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13832": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13833": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"13834": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.removeShippingOptions"
		},
		"13835": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13836": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "payload"
		},
		"13837": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "query"
		},
		"13838": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13839": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"13840": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "AdminTaxRatesResource.delete"
		},
		"13841": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "id"
		},
		"13842": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/tax-rates.ts",
			"qualifiedName": "customHeaders"
		},
		"13843": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"13844": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13845": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUploadsResource"
		},
		"13846": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13850": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"13851": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.create"
		},
		"13852": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"13853": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"13854": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.createProtected"
		},
		"13855": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"13856": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"13857": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.delete"
		},
		"13858": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"13859": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"13860": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"13861": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource.getPresignedDownloadUrl"
		},
		"13862": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "payload"
		},
		"13863": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "customHeaders"
		},
		"13864": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"13865": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "AdminUploadsResource._createPayload"
		},
		"13866": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/uploads.ts",
			"qualifiedName": "file"
		},
		"13867": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"13868": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13869": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminUsersResource"
		},
		"13870": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13871": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"13872": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.sendResetPasswordToken"
		},
		"13873": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"13874": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13875": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"13876": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.resetPassword"
		},
		"13877": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"13878": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13879": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"13880": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.retrieve"
		},
		"13881": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"13882": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13883": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"13884": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.create"
		},
		"13885": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"13886": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13887": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"13888": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.update"
		},
		"13889": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"13890": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "payload"
		},
		"13891": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13892": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"13893": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.delete"
		},
		"13894": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "id"
		},
		"13895": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13896": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"13897": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "AdminUsersResource.list"
		},
		"13898": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "query"
		},
		"13899": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/users.ts",
			"qualifiedName": "customHeaders"
		},
		"13900": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"13901": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13902": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminVariantsResource"
		},
		"13903": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13904": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"13905": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.list"
		},
		"13906": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"13907": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"13908": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"13909": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.retrieve"
		},
		"13910": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "id"
		},
		"13911": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "query"
		},
		"13912": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"13913": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"13914": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "AdminVariantsResource.getInventory"
		},
		"13915": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "variantId"
		},
		"13916": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/variants.ts",
			"qualifiedName": "customHeaders"
		},
		"13917": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"13918": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13919": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentCollectionsResource"
		},
		"13920": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13921": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"13922": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.retrieve"
		},
		"13923": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"13924": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "query"
		},
		"13925": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"13926": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"13927": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.update"
		},
		"13928": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"13929": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "payload"
		},
		"13930": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"13931": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"13932": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.delete"
		},
		"13933": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"13934": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"13935": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"13936": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "AdminPaymentCollectionsResource.markAsAuthorized"
		},
		"13937": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "id"
		},
		"13938": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payment-collections.ts",
			"qualifiedName": "customHeaders"
		},
		"13939": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"13940": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13941": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminPaymentsResource"
		},
		"13942": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13943": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"13944": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.retrieve"
		},
		"13945": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"13946": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "query"
		},
		"13947": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"13948": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"13949": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.capturePayment"
		},
		"13950": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"13951": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"13952": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"13953": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "AdminPaymentsResource.refundPayment"
		},
		"13954": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "id"
		},
		"13955": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "payload"
		},
		"13956": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/payments.ts",
			"qualifiedName": "customHeaders"
		},
		"13957": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"13958": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "default.__constructor"
		},
		"13959": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "AdminProductCategoriesResource"
		},
		"13960": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/base.ts",
			"qualifiedName": "client"
		},
		"13961": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"13962": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.retrieve"
		},
		"13963": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"13964": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"13965": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13966": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"13967": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.create"
		},
		"13968": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"13969": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13970": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"13971": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.update"
		},
		"13972": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"13973": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"13974": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13975": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"13976": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.list"
		},
		"13977": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "query"
		},
		"13978": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13979": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"13980": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.delete"
		},
		"13981": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"13982": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13983": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"13984": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.removeProducts"
		},
		"13985": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"13986": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"13987": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		},
		"13988": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"13989": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "AdminProductCategoriesResource.addProducts"
		},
		"13990": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "productCategoryId"
		},
		"13991": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "payload"
		},
		"13992": {
			"sourceFileName": "../../../packages/medusa-js/src/resources/admin/product-categories.ts",
			"qualifiedName": "customHeaders"
		}
	}
}